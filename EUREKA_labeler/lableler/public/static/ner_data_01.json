[{"text":"Also see the last bit of section 2.2.3.1 here for another example of @MapsId","label":{"api":{"@MapsId":[[69,75]]}}},{"text":"Only and only if your POJO is running in the same thread as the HttpServletRequest is running in, then you'll be able to achieve this with help of ThreadLocal<T>","label":{"api":{"HttpServletRequest":[[64,81]],"ThreadLocal<T>":[[147,160]]}}},{"text":"Implement javax.servlet.Filter which does the following in doFilter() method and is mapped on an url-pattern of interest, e.g","label":{"api":{"javax.servlet.Filter":[[10,29]],"doFilter()":[[59,68]]}}},{"text":"This all is basically also how the Context objects of the average MVC framework works, like JSF's FacesContext and the one in Wicket","label":{"api":{"Context":[[35,41]],"FacesContext":[[98,109]]}}},{"text":"Since JDK 11 there is OutputStream.nullOutputStream()","label":{"api":{"OutputStream.nullOutputStream()":[[22,52]]}}},{"text":"Collections.singletonList will create an immutable List","label":{"api":{"Collections.singletonList":[[0,24]]}}},{"text":"Thread(Runnable, String) creates a Thread, assigns its name to the String and specifies that it should run the Runnable","label":{"api":{"Thread(Runnable, String)":[[0,23]],"Thread":[[35,40]],"String":[[67,72]],"Runnable":[[111,118]]}}},{"text":"Thread(String) calls the general constructor with special magic arguments of Thread (null, null, name)","label":{"api":{"Thread(String)":[[0,13]],"Thread (null, null, name)":[[77,101]]}}},{"text":"In Java 8 you can use getAndUpdate (and updateAndGet) in AtomicInteger","label":{"api":{"getAndUpdate":[[22,33]],"updateAndGet":[[40,51]],"AtomicInteger":[[57,69]]}}},{"text":"Read the Java API","label":{"api":{}}},{"text":"Or you could use a ByteArrayOutputStream (Although it creates the resulting array for you, rather than copying into an existing array as you asked)","label":{"api":{"ByteArrayOutputStream":[[19,39]]}}},{"text":"Here is another solution which also uses ByteBuffer","label":{"api":{"ByteBuffer":[[41,50]]}}},{"text":"Also java 8 introduced to Map interface nice computeIfAbsent default method which doesn't break map contract and features lazy evaluation","label":{"api":{"Map":[[26,28]],"computeIfAbsent":[[45,59]]}}},{"text":"Thanks to default methods, Java 8 now has this built in with Map::getOrDefault","label":{"api":{"Map::getOrDefault":[[61,77]]}}},{"text":"In case you're on Java 8 already and it's no problem to end up with double[] instead of float[], consider Stream#mapToDouble() (no there's no such method as mapToFloat())","label":{"api":{"Stream#mapToDouble()":[[106,125]],"mapToFloat()":[[157,168]]}}},{"text":"What are example applications for a ByteBuffer in Java","label":{"api":{"ByteBuffer":[[36,45]]}}},{"text":"Leave off the @GeneratedValue and I believe you can just use Java's UUID.randomUUID() to generate a RFC 4122 compliant UUID like Hibernate's 'uuid2' generator","label":{"api":{"@GeneratedValue":[[14,28]],"UUID.randomUUID()":[[68,84]]}}},{"text":"Calling PrintWriter.checkError() will tell you if any error has occurred","label":{"api":{"PrintWriter.checkError()":[[8,31]]}}},{"text":"You can obtain CodeSource by ProtectionDomain#getCodeSource() and the ProtectionDomain in turn can be obtained by Class#getProtectionDomain()","label":{"api":{"CodeSource":[[15,24]],"ProtectionDomain#getCodeSource()":[[29,60]],"ProtectionDomain":[[70,85]],"Class#getProtectionDomain()":[[114,140]]}}},{"text":"The JDK 7 includes (via NIO.2) a class called Files that provides a createSymbolicLink() method","label":{"api":{"Files":[[46,50]],"createSymbolicLink()":[[68,87]]}}},{"text":"I have the name of a variable/identifier, say, x, and the JCCompilationUnit and Scope","label":{"api":{"JCCompilationUnit":[[58,74]],"Scope":[[80,84]]}}},{"text":"The cardinality() method returns the number of set bits","label":{"api":{"cardinality()":[[4,16]]}}},{"text":"Take a look at the documentation on Container.findComponentAt(int x, int y), if you are going to add Components on the dragP Container, other than \"draggable\" labels","label":{"api":{"Container.findComponentAt(int x, int y)":[[36,74]],"Components":[[101,110]]}}},{"text":"Also, you can instead use Container.getComponentAt(int x, int y), in this case","label":{"api":{"Container.getComponentAt(int x, int y)":[[26,63]]}}},{"text":"Look at the documentation for FileHandler  and you will see a number is added for file conflict resolution","label":{"api":{"FileHandler":[[30,40]]}}},{"text":"In Java 7, there is a new method Locale.forLanguageTag(String), which assumes the hyphen as a separator","label":{"api":{"Locale.forLanguageTag(String)":[[33,61]]}}},{"text":"Check the documentation of Locale for more information","label":{"api":{"Locale":[[27,32]]}}},{"text":"Just wanted to add my two cents, an elegant solution using Executors and the double colon operator (::) that hasn't been mentioned yet","label":{"api":{"Executors":[[59,67]]}}},{"text":"According to this post, you can call purge on the executor","label":{"api":{"purge":[[37,41]],"executor":[[50,57]]}}},{"text":"Collectors can join Streams which is very useful if you want to filter or map your data","label":{"api":{"Collectors":[[0,9]],"Streams":[[20,26]]}}},{"text":"To get a Stream from a Collection, call stream() on it","label":{"api":{"Stream":[[9,14]],"Collection":[[23,32]],"stream()":[[40,47]]}}},{"text":"Since Java 1.7 you can use the Watch Service API to register for directory events","label":{"api":{"Watch Service":[[31,43]]}}},{"text":"It is part of Java's New I/O (NIO) library and does not require any additional resources","label":{"api":{"New I/O (NIO)":[[21,33]]}}},{"text":"For Java specific documentation see the Pattern class","label":{"api":{"Pattern":[[40,46]]}}},{"text":"For some uses of regular expressions (such as in the sample above), there are shortcut methods in String","label":{"api":{"String":[[98,103]]}}},{"text":"matches(), replaceAll()/replaceFirst() and split()","label":{"api":{"matches()":[[0,8]],"replaceAll()":[[11,22]],"replaceFirst()":[[24,37]],"split()":[[43,49]]}}},{"text":"Pass the CountDownLatch object to each of your tasks and code your tasks something like below","label":{"api":{"CountDownLatch":[[9,22]]}}},{"text":"Use a Future for your tasks (instead of submitting Runnable's), a callback updates  it's state when it's completed, so you can use Future.isDone to track the sate of all your tasks","label":{"api":{"Future":[[6,11]],"Runnable":[[51,58]],"Future.isDone":[[131,143]]}}},{"text":"You could create your own thread pool which extends ThreadPoolExecutor","label":{"api":{"ThreadPoolExecutor":[[52,69]]}}},{"text":"CountDownLatch and example there","label":{"api":{"CountDownLatch":[[0,13]]}}},{"text":"Human resources CountDownLatch","label":{"api":{"CountDownLatch":[[16,29]]}}},{"text":"Of course, latch can be set on the different value than 2 (in constructor of CountDownLatch), as well as the number of runnable objects can be established in iteration i.e","label":{"api":{"CountDownLatch":[[77,90]],"runnable":[[119,126]]}}},{"text":"ArrayList, but it must correspond (number of count downs must be equal the parameter in CountDownLatch constructor)","label":{"api":{"CountDownLatch":[[88,101]]}}},{"text":"You can create an unconnected socket using the noarg constructor Socket() and then call connect(SocketAddress endpoint, int timeout) with a small timeout value","label":{"api":{"Socket()":[[65,72]],"connect(SocketAddress endpoint, int timeout)":[[88,131]]}}},{"text":"Set the content type to application/octet-stream","label":{"api":{}}},{"text":"How about using a CountDownLatch","label":{"api":{"CountDownLatch":[[18,31]]}}},{"text":"Another different solution to the already posted answers would be using DoubleStream.of","label":{"api":{"DoubleStream.of":[[72,86]]}}},{"text":"You can specify the start index with indexOf","label":{"api":{"indexOf":[[37,43]]}}},{"text":"If you just want something to iterate over in a for-each loop (so an Iterable and not only an Iterator), there's always java.util.Collections.list(Enumeration<T> e) (without using any external libraries)","label":{"api":{"Iterable":[[69,76]],"Iterator":[[94,101]],"java.util.Collections.list(Enumeration<T> e)":[[120,163]]}}},{"text":"You can parse such URLs with java.net.URI","label":{"api":{"java.net.URI":[[29,40]]}}},{"text":"Call MimeMessage.saveChanges() on the enclosing message, which will update the headers by cascading down the MIME structure into a call to MimeBodyPart.updateHeaders() on your body part","label":{"api":{"MimeMessage.saveChanges()":[[5,29]],"MimeBodyPart.updateHeaders()":[[139,166]]}}},{"text":"In Java 8 there is a new compiler flag that allows additional metadata to be stored with byte code and these parameter names can be extracted using the Parameter object in reflection","label":{"api":{"Parameter":[[152,160]]}}},{"text":"In newer versions of hibernate org.springframework.core.ParameterNameDiscoverer uses this feature","label":{"api":{"org.springframework.core.ParameterNameDiscoverer":[[31,78]]}}},{"text":"Access parameters using reflection's Parameter class","label":{"api":{"Parameter":[[37,45]]}}},{"text":"In such case, also compare run time types with a call to Object#getClass() which of course will make it impossible that two different types are considered equal","label":{"api":{"Object#getClass()":[[57,73]]}}},{"text":"This can be achieved by combining TeeInputStream from Apache Commons and a PipedInputStream and PipedOutputStream as follows","label":{"api":{"TeeInputStream":[[34,47]],"PipedInputStream":[[75,90]],"PipedOutputStream":[[96,112]]}}},{"text":"Since Java 7 there are helper methods for equals and hashCode in the standard library","label":{"api":{"equals":[[42,47]],"hashCode":[[53,60]]}}},{"text":"Note that the getBoolean method delegates the system property value, simplifying the code to","label":{"api":{"getBoolean":[[14,23]]}}},{"text":"You can simply use StandardCharsets.UTF_8 instead","label":{"api":{"StandardCharsets.UTF_8":[[19,40]]}}},{"text":"the get method in Guava's LoadingCache wraps all checked exceptions into ExecutionException","label":{"api":{"LoadingCache":[[26,37]],"ExecutionException":[[73,90]]}}},{"text":"The documentation states that the exception can be inspected using getCause()","label":{"api":{"getCause()":[[67,76]]}}},{"text":"I had a similar problem in my implementation using Java EE7, JSF2.2, JPA2 and @NamedStoredProcedureQuery which @axtavt solution helped solve (+1)","label":{"api":{"@NamedStoredProcedureQuery":[[78,103]]}}},{"text":"The easiest way to do this is by using the built in MaskFormatter in the javax.swing.text library","label":{"api":{"MaskFormatter":[[52,64]],"javax.swing.text":[[73,88]]}}},{"text":"The general way is to use the File class getCanonicalPath() method","label":{"api":{"File":[[30,33]],"getCanonicalPath()":[[41,58]]}}},{"text":"Use the substring method of the String class","label":{"api":{"substring":[[8,16]],"String":[[32,37]]}}},{"text":"It's possible to do this using the SepiaTone Effect class in the JavaFX library","label":{"api":{"SepiaTone Effect":[[35,50]],"JavaFX":[[65,70]]}}},{"text":"If you don't have access to java 8 and the API java.time, here is my simple function to copy the time of one date to another date using the old java.util.Calendar (inspire by Jigar Joshi)","label":{"api":{"java.time":[[47,55]],"java.util.Calendar":[[144,161]]}}},{"text":"The class ByteBuffer  provides methods for putting all primitive data types, in little endian or big endian byte order, as you wish","label":{"api":{"ByteBuffer":[[10,19]]}}},{"text":"Java 1.6 added a constant Locale.ROOT to specify a language/country neutral locale","label":{"api":{"Locale.ROOT":[[26,36]]}}},{"text":"The List interface would be broken without int","label":{"api":{"List":[[4,7]]}}},{"text":"The problem is the overloaded remove() method (remove(int) vs","label":{"api":{"remove()":[[30,37]],"remove(int)":[[47,57]]}}},{"text":"You can actually get a list of JVMs using the Attach API, without resorting to using jconsole.jar","label":{"api":{"Attach":[[46,51]]}}},{"text":"The complete documentation is available in the documentation for the package javax.annotation.processing","label":{"api":{"javax.annotation.processing":[[77,103]]}}},{"text":"Turns out that if you need to check expiration you can call X509Certificate.checkValidity() and it will throw either a CertificateExpiredException or a CertificateNotYetValidException","label":{"api":{"X509Certificate.checkValidity()":[[60,90]],"CertificateExpiredException":[[119,145]],"CertificateNotYetValidException":[[152,182]]}}},{"text":"If you want to use ArrayList or LinkedList, it seems that the answer is no","label":{"api":{"ArrayList":[[19,27]],"LinkedList":[[32,41]]}}},{"text":"Although there are some classes in java that you can set them fixed size, like PriorityQueue, ArrayList and LinkedList can't, because there is no constructor for these two to specify capacity","label":{"api":{"PriorityQueue":[[79,91]],"ArrayList":[[94,102]],"LinkedList":[[108,117]]}}},{"text":"If you want to stick to ArrayList/LinkedList, one easy solution is to check the size manually each time","label":{"api":{"ArrayList":[[24,32]],"LinkedList":[[34,43]]}}},{"text":"LinkedList is better than ArrayList in this situation","label":{"api":{"LinkedList":[[0,9]],"ArrayList":[[26,34]]}}},{"text":"The reason is that the cost of removing from ArrayList is O(N), but only O(1) for LinkedList","label":{"api":{"ArrayList":[[45,53]],"LinkedList":[[82,91]]}}},{"text":"The public java.util.List subclasses of the JDK don't provide a fixed size feature that   doesn't make part of the List specification","label":{"api":{"java.util.List":[[11,24]],"List":[[115,118]]}}},{"text":"Since Java 8 you can use CompletableFuture<T>","label":{"api":{"CompletableFuture<T>":[[25,44]]}}},{"text":"java.awt.Desktop is the class you're looking for","label":{"api":{"java.awt.Desktop":[[0,15]]}}},{"text":"When I changed it to \"http://docs.oracle.com/javase/6/docs/api/\" the tooltips started showing up again","label":{"api":{}}},{"text":"One way to test whether a character is tokenizable is to check whether it fails Character.isIdentifierIgnorable()","label":{"api":{"Character.isIdentifierIgnorable()":[[80,112]]}}},{"text":"For that I try to use Java Comparator and Comparable but it allows to sort in alphabetic order only","label":{"api":{"Comparator":[[27,36]],"Comparable":[[42,51]]}}},{"text":"From a JDBC Connection, call getMetaData and getColumns drill down from there to get information for schemas, tables and, columns","label":{"api":{"getMetaData":[[29,39]],"getColumns":[[45,54]]}}},{"text":"Cloning HTTP request and response is possible via HttpServletResponseWrapper class http://docs.oracle.com/javaee/1.3/api/javax/servlet/http/HttpServletResponseWrapper.html","label":{"api":{"HttpServletResponseWrapper":[[50,75]]}}},{"text":"Collection (so ArrayList also) have","label":{"api":{"Collection":[[0,9]],"ArrayList":[[15,23]]}}},{"text":"You can get user input using BufferedReader","label":{"api":{"BufferedReader":[[29,42]]}}},{"text":"It will store a String value in accStr so you have to parse it to an int using Integer.parseInt","label":{"api":{"String":[[16,21]],"Integer.parseInt":[[79,94]]}}},{"text":"I know this question is a few years old, but as Java 8 has, in the meantime, brought us Optional, I thought I'd offer up a solution using it (and Stream and Collectors)","label":{"api":{"Optional":[[88,95]],"Stream":[[146,151]],"Collectors":[[157,166]]}}},{"text":"Optional is like null","label":{"api":{"Optional":[[0,7]]}}},{"text":"In contrast, you cannot assign an Optional<PcapLinkType> value to a variable of type PcapLinkType","label":{"api":{"Optional<PcapLinkType>":[[34,55]],"PcapLinkType":[[85,96]]}}},{"text":"Optional makes you check for a valid value first","label":{"api":{"Optional":[[0,7]]}}},{"text":"Of course, if you want to retain DLT_UNKNOWN for backward compatibility or whatever other reason, you can still use Optional even in that case, using orElse() to specify it as the default value","label":{"api":{"DLT_UNKNOWN":[[33,43]],"Optional":[[116,123]],"orElse()":[[150,157]]}}},{"text":"Take a look at SimpleDateFormat, it will turn the String into a Date and you can set the Date into a Calendar instance","label":{"api":{"SimpleDateFormat":[[15,30]],"String":[[50,55]],"Date":[[64,67],[89,92]],"Calendar":[[101,108]]}}},{"text":"You can use the java.util.jar.JarFile class, and use the getJarEntry method to see if the file exists","label":{"api":{"java.util.jar.JarFile class":[[16,42]],"getJarEntry":[[57,67]]}}},{"text":"ArrayList documentation, and Examples","label":{"api":{"ArrayList":[[0,8]]}}},{"text":"You may want to look at Vector or ArrayList as other suggested","label":{"api":{"Vector":[[24,29]],"ArrayList":[[34,42]]}}},{"text":"Just define a different TableCellRenderer to each column","label":{"api":{"TableCellRenderer":[[24,40]]}}},{"text":"You can use the String.valueOf() method to accomplish this","label":{"api":{"String.valueOf()":[[16,31]]}}},{"text":"if you are attempting to have the procedure process the data as an int, you need to pass the data in as such using the appropriate method in CallableStatement (in this example, setInt())","label":{"api":{"CallableStatement":[[141,157]],"setInt()":[[177,184]]}}},{"text":"You can use the AWT Robot to generate key press events","label":{"api":{"AWT Robot":[[16,24]]}}},{"text":"The focus problem mentioned in the comments can be solved by setting the window to not receive the focus via Window.setFocusableWindowState with an argument of false","label":{"api":{"Window.setFocusableWindowState":[[109,138]]}}},{"text":"You can accomplish it with DecimalFormat","label":{"api":{"DecimalFormat":[[27,39]]}}},{"text":"Or you can use String.format() as well","label":{"api":{"String.format()":[[15,29]]}}},{"text":"Call st.execute(); or st.executeUpdate(); to execute it","label":{"api":{"st.execute();":[[5,17]],"st.executeUpdate();":[[22,40]]}}},{"text":"Have you considered using synchronizedList","label":{"api":{"synchronizedList":[[26,41]]}}},{"text":"I would suggest using an ArrayList instead, but my code for you uses the same array you created","label":{"api":{"ArrayList":[[25,33]]}}},{"text":"You are probably looking for System.currentTimeMillis to record the time at the beginning and then again at the end and take the difference to get the \"time that it took\"","label":{"api":{"System.currentTimeMillis":[[29,52]]}}},{"text":"System.nanoTime is more trustworthy because it is resilient to user changes of the system time and provides a higher resolution","label":{"api":{"System.nanoTime":[[0,14]]}}},{"text":"Be aware though, as it states in the documentation","label":{"api":{}}},{"text":"You can make a JFrame partially transparent using the frame.setOpacity(float opacity) method","label":{"api":{"JFrame":[[15,20]],"frame.setOpacity(float opacity)":[[54,84]]}}},{"text":"Instead of calling Thread.sleep(n) implement a Swing Timer for repeating tasks, or a single shot Timer for a 'delayed effect'","label":{"api":{"Thread.sleep(n)":[[19,33]],"Swing Timer":[[47,57]],"single shot Timer":[[85,101]]}}},{"text":"To solve this, try to use Collections.synchronizedList(List list) to create synchronized list","label":{"api":{"Collections.synchronizedList(List list)":[[26,64]]}}},{"text":"The API for DefaultTableCellRenderer will show you that this class in fact derives from JLabel which has the method that you're interested in","label":{"api":{"DefaultTableCellRenderer":[[12,35]],"JLabel":[[88,93]]}}},{"text":"If you are unsure of which characters need escaping, try to write the property set to a file using one of the the Properties.store methods","label":{"api":{"Properties.store":[[114,129]]}}},{"text":"You're probably looking for Integer.parseInt() which takes a String and outputs an integer value","label":{"api":{"Integer.parseInt()":[[28,45]],"String":[[61,66]],"integer":[[83,89]]}}},{"text":"You should probably use a ProcessBuilder (instead of Runtime.exec)","label":{"api":{"ProcessBuilder":[[26,39]],"Runtime.exec":[[53,64]]}}},{"text":"XMLEncoder uses the JavaBean pattern to serialize an object","label":{"api":{"XMLEncoder":[[0,9]],"JavaBean":[[20,27]]}}},{"text":"If you want to always write XML for every property, you may want to consider using JAXB instead of XMLEncoder","label":{"api":{"JAXB":[[83,86]],"XMLEncoder":[[99,108]]}}},{"text":"As a side note, I noticed it looks like you are trying to \"cap\" the input values with the Scanner#nextInt(int) method but I don't think this will give you the results you are expecting","label":{"api":{"Scanner#nextInt(int)":[[90,109]]}}},{"text":"Once you have the images, you can override paintComponent and use the Graphics.drawImage method to let the EDT display the full or a partial view, by stitching the images of the corresponding patches together","label":{"api":{"paintComponent":[[43,56]],"Graphics.drawImage method":[[70,94]]}}},{"text":"You can do it with reflection using Class.getMethod and Method.invoke","label":{"api":{"Class.getMethod":[[36,50]],"Method.invoke":[[56,68]]}}},{"text":"The Java Communications API provides ways for communicating with the underlying system's serial but also parallel ports, as you can quickly see from this documentation page","label":{"api":{"Communications":[[9,22]]}}},{"text":"The closest thing in the JDK is using TimeUnit","label":{"api":{"TimeUnit":[[38,45]]}}},{"text":"It is interesting to note that (quite unbelievably) Date is not immutable","label":{"api":{"Date":[[52,55]]}}},{"text":"Swing has an interface, Scrollable, specifically intended for this purpose","label":{"api":{"Scrollable":[[24,33]]}}},{"text":"The method Object.equals(Object obj) takes another Object instance as a parameter","label":{"api":{"Object.equals(Object obj)":[[11,35]],"Object":[[51,56]]}}},{"text":"Don't do it yourself, use System.arrayCopy() to copy both arrays into a new array of the combined size","label":{"api":{"System.arrayCopy()":[[26,43]]}}},{"text":"This is an automated warning Eclipse is giving related to Closeable and AutoCloseable and can be ignored if the underlying resource is System.in, System.out or System.err","label":{"api":{"Closeable":[[58,66]],"AutoCloseable":[[72,84]],"System.in":[[135,143]],"System.out":[[146,155]],"System.err":[[160,169]]}}},{"text":"Arrays#asList() returns a fixed-size list backed by the specified array -- any call to set will work, but remove() and other methods will throw an UnsupportedOperationException","label":{"api":{"Arrays#asList()":[[0,14]],"remove()":[[106,113]],"UnsupportedOperationException":[[147,175]]}}},{"text":"Based on the short snippet above (and assuming everything else is correct) you should check the image load status of the ImageIcon using the getImageLoadStatus() method","label":{"api":{"ImageIcon":[[121,129]],"getImageLoadStatus()":[[141,160]]}}},{"text":"If it returns MediaTracker.COMPLETE then you're good to go and the error is somewhere outside this code","label":{"api":{"MediaTracker.COMPLETE":[[14,34]]}}},{"text":"For intelligible output when you print out an object, you need to override Object.toString() on your class, as described in \"Object as a Superclass\"","label":{"api":{"Object.toString()":[[75,91]]}}},{"text":"You should check the javadoc for hasNext(pattern)","label":{"api":{"hasNext(pattern)":[[33,48]]}}},{"text":"Java's Shape class has a getBounds() method that can be used to obtain a Rectangle object that includes an X and Y coordinate","label":{"api":{"getBounds()":[[25,35]],"Rectangle":[[73,81]]}}},{"text":"You'll also want to be certain that your usage is consistent with what the API mandates for RandomAccessFile","label":{"api":{"RandomAccessFile":[[92,107]]}}},{"text":"ResultSet   is a interface, It doesn't have any method implementation","label":{"api":{"ResultSet":[[0,8]]}}},{"text":"I would use a Map<Integer, ArrayList<String>> to store your team members with their corresponding teams","label":{"api":{"Map<Integer, ArrayList<String>>":[[14,44]]}}},{"text":"Use a BufferedReader if you do not already use a buffer","label":{"api":{"BufferedReader":[[6,19]]}}},{"text":"To run concurrent tasks, you should use an ExecutorService that you instanciate thanks to Executors","label":{"api":{"ExecutorService":[[43,57]],"Executors":[[90,98]]}}},{"text":"You have the @JoinColumn for that","label":{"api":{"@JoinColumn":[[13,23]]}}},{"text":"Also if you need to set the Join Table, use the @JoinTable annotation","label":{"api":{"@JoinTable":[[48,57]]}}},{"text":"Add the standard regex case-insensitivity flag","label":{"api":{}}},{"text":"When you print a Date, java uses Date.toString() method","label":{"api":{"Date":[[17,20]],"Date.toString()":[[33,47]]}}},{"text":"In Java 8 and later, use java.time classes","label":{"api":{"java.time":[[25,33]]}}},{"text":"a plain thread, see the get() methods inheritted by FutureTask (ref)","label":{"api":{"get()":[[24,28]],"FutureTask":[[52,61]]}}},{"text":"It may be more appropriate to use the Service class (ref) as described here or Java's standard concurrency (e.g","label":{"api":{"Service":[[38,44]]}}},{"text":"You should look into locks when using a shared resource instead of using synchonize, specifically something like a ReadWriteLock","label":{"api":{"ReadWriteLock":[[115,127]]}}},{"text":"If you use the CASE_INSENSITIVE flag, you can simplify this to","label":{"api":{"CASE_INSENSITIVE":[[15,30]]}}},{"text":"Also consider using Preferences instead","label":{"api":{"Preferences":[[20,30]]}}},{"text":"This package might help you","label":{"api":{}}},{"text":"I believe this functionality can be achieved through the Task's messageProperty","label":{"api":{"Task":[[57,60]],"messageProperty":[[64,78]]}}},{"text":"To scroll the scroll pane to the bottom completely, set its vvalue property to 1.0","label":{"api":{}}},{"text":"In such a case, if delaying the call via Platform.runLater() doesn't fix the problem, consider setting the property's value in response to the content height property invalidation event","label":{"api":{"Platform.runLater()":[[41,59]]}}},{"text":"In that case you can use  String#equales() method","label":{"api":{"String#equales()":[[26,41]]}}},{"text":"For sample name to match use String#equales() method and do you operations accordingly","label":{"api":{"String#equales()":[[29,44]]}}},{"text":"If you look at String Class then you will find many useful methods","label":{"api":{"String":[[15,20]]}}},{"text":"Because you can think of multimap as map key -> collection, just use JDK's TreeMap which is sorted according to the natural ordering of its keys","label":{"api":{"multimap":[[25,32]],"TreeMap":[[75,81]]}}},{"text":"Cleanest might maybe to write your own ListResourceBundle child or such","label":{"api":{"ListResourceBundle":[[39,56]]}}},{"text":"Construct a HashSet as follows","label":{"api":{"HashSet":[[12,18]]}}},{"text":"In real-world application you can use LinkedHashSet to achieve the same functionality","label":{"api":{"LinkedHashSet":[[38,50]]}}},{"text":"Methods defined for Object like wait and notify could help you too","label":{"api":{"Object":[[20,25]],"wait":[[32,35]],"notify":[[41,46]]}}},{"text":"This method has no arguments - so I tend to skip the IllegalArgumentException","label":{"api":{"IllegalArgumentException":[[53,76]]}}},{"text":"I'm actually going over the list every-once-in-a-while, when this pops-up, and just go with IllegalStateException or with InternalError","label":{"api":{"IllegalStateException":[[92,112]],"InternalError":[[122,134]]}}},{"text":"Yours is a very basic question, so I suggest you give a look at the TreeMap documentation for more information","label":{"api":{"TreeMap":[[68,74]]}}},{"text":"All overloads of the println method append a newline following whatever you want to print; all overloads of the print method don't","label":{"api":{"println":[[21,27]]}}},{"text":"If all you want is a newline, then you don't even have to supply an argument -- call the no-argument println overload","label":{"api":{"println":[[101,107]]}}},{"text":"Since the documentation for InputStream.read(byte[]) states","label":{"api":{"InputStream.read(byte[])":[[28,51]]}}},{"text":"To do that, use the String constructor overload that takes in an array offset/length and a charset","label":{"api":{"String":[[20,25]]}}},{"text":"This is because trim removes all leading/trailing characters with values less than or equal to 0x20 (Space) - including NUL characters","label":{"api":{"trim":[[16,19]]}}},{"text":"You have to set Javascript disabled on the WebEngine itself that the WebView controls","label":{"api":{"WebEngine":[[43,51]],"WebView":[[69,75]]}}},{"text":"You can easily do that in java with the help of a this class","label":{"api":{}}},{"text":"As you can see in the documentation of (Java-Map) the get method does not use the generic injection, but instead Object as input parameter","label":{"api":{"Java-Map":[[40,47]],"get":[[54,56]],"Object":[[113,118]]}}},{"text":"Otherwise you will loose some input in arr, see the split(String) API doc","label":{"api":{"split(String)":[[52,64]]}}},{"text":"See the split(String, int) API doc for further explanations","label":{"api":{"split(String, int)":[[8,25]]}}},{"text":"Use instanceof and the Inet4Address type","label":{"api":{"instanceof":[[4,13]],"Inet4Address":[[23,34]]}}},{"text":"With the Introspector you can get the BeanInfo and this gives you access to the bean's PropertyDescriptors","label":{"api":{"Introspector":[[9,20]],"BeanInfo":[[38,45]],"PropertyDescriptors":[[87,105]]}}},{"text":"Check out the Charset documentation","label":{"api":{"Charset":[[14,20]]}}},{"text":"To avoid this I had to check if the value was null and use #setNull(index, class) in these cases","label":{"api":{"#setNull(index, class)":[[59,80]]}}},{"text":"The org.w3c.dom.ls interfaces can help you here","label":{"api":{"org.w3c.dom.ls":[[4,17]]}}},{"text":"Java provides a managed bit-based data structure called a BitSet","label":{"api":{"BitSet":[[58,63]]}}},{"text":"I say this is managed because Java does not have a native type for storing bits, instead, a BitSet stores individual bits as a component of a long, and keeps a long[] to back the set","label":{"api":{"BitSet":[[92,97]]}}},{"text":"This is a pretty storage-efficient approach, but the implementation of BitSet reserves 6 bits out of every 64 for \"addressing\", which amounts to a 10% overhead just in the raw storage layer","label":{"api":{"BitSet":[[71,76]]}}},{"text":"This means you can likely beat BitSet on storage by keeping and carefully addressing your own long[], at the cost of some complexity and risk in your code","label":{"api":{"BitSet":[[31,36]]}}},{"text":"Unless you're extremely constrained on space, it's probably not worth saving the ~10% raw overhead of a BitSet","label":{"api":{"BitSet":[[104,109]]}}},{"text":"If you just need to wait for the thread to finish try Thread.join()","label":{"api":{"Thread.join()":[[54,66]]}}},{"text":"However, its generally unwise to manage the threading yourself, try using an executor and submit the work you need as a future task that you can manage independently of the thread","label":{"api":{"executor":[[77,84]],"future task":[[120,130]]}}},{"text":"I think you could try using the keySet()-Method of your outer map","label":{"api":{"keySet()":[[32,39]]}}},{"text":"You can convert it to a java.sql.Date, java.sql.Time, or java.sql.Timestamp by first parsing the date with a SimpleDateFormat, and creating the appropriate object, and calling setDate, setTime, or setTimestamp instead of setString","label":{"api":{"java.sql.Date":[[24,36]],"java.sql.Time":[[39,51]],"java.sql.Timestamp":[[57,74]],"SimpleDateFormat":[[109,124]],"setDate":[[176,182]],"setTime":[[185,191]],"setTimestamp":[[197,208]],"setString":[[221,229]]}}},{"text":"Instead of checking the direct supertypes, you should use Types.isAssignable to check if Serializable is one of the supertypes of the TypeMirror","label":{"api":{"Types.isAssignable":[[58,75]],"Serializable":[[89,100]],"TypeMirror":[[134,143]]}}},{"text":"In order to achieve what you're trying to do, look into the Collection's Map interface","label":{"api":{"Collection":[[60,69]],"Map":[[73,75]]}}},{"text":"Here is an example which prints all elements and their values of the @Resource annotation of a class","label":{"api":{"@Resource":[[69,77]]}}},{"text":"Moreover I'd recommend you to use PreparedStatement instead","label":{"api":{"PreparedStatement":[[34,50]]}}},{"text":"Based on Collectors documentation it's as simple as","label":{"api":{"Collectors":[[9,18]]}}},{"text":"A Java String uses UTF-16 as an internal encoding","label":{"api":{"String":[[7,12]]}}},{"text":"There is an API for accessing a String as a sequence of Unicode code points which handles encoding and decoding these \"surrogate pairs\" transparently","label":{"api":{"String":[[32,37]]}}},{"text":"Use Scanner.nextLine() to read each line and then Ignore the ones which starts with // like following","label":{"api":{"Scanner.nextLine()":[[4,21]]}}},{"text":"For some insane reason, Calendar class uses a zero-based index for month (Jan==0, Feb==1, etc), but all other date parts are one-based (matching their actual numbers)","label":{"api":{"Calendar":[[24,31]]}}},{"text":"My advice is to never use Calendar","label":{"api":{"Calendar":[[26,33]]}}},{"text":"Try using new date and time library provided by Java 8, which are inspired by Joda-Time and they are easy to use","label":{"api":{"date":[[14,17]],"time":[[23,26]]}}},{"text":"You probably want to use a SimpleDateFormat to parse the string as a Date and do the time arithmetic on that","label":{"api":{"SimpleDateFormat":[[27,42]],"string":[[57,62]],"Date":[[69,72]]}}},{"text":"You can use the List#get(int index) method","label":{"api":{"List#get(int index)":[[16,34]]}}},{"text":"You can use the List#get(index) for this","label":{"api":{"List#get(index)":[[16,30]]}}},{"text":"Use PrepredStatement  instead of Statement","label":{"api":{"PrepredStatement":[[4,19]],"Statement":[[33,41]]}}},{"text":"PIG internally uses JAVA REGEX specifications only","label":{"api":{"REGEX":[[25,29]]}}},{"text":"For sync points, if you use the standard logging facility, you would have to write a handler that first collects all output in a PriorityQueue with a given sorting function that includes the time and thread source (e.g","label":{"api":{"PriorityQueue":[[129,141]]}}},{"text":"If you need a more fine-grain control, then you need to adjust your architecture and use the classes from the concurrent package in a proper way","label":{"api":{"concurrent":[[110,119]]}}},{"text":"You should use a collection, like a List or an ArrayList or even a LinkedList, for example","label":{"api":{"collection":[[17,26]],"List":[[36,39]],"ArrayList":[[47,55]],"LinkedList":[[67,76]]}}},{"text":"For example, in a List, you can add a new item or remove an existing one, in this way","label":{"api":{"List":[[18,21]]}}},{"text":"The first is your Waiter, which will just listen for events and put them into a Queue of some sort (see the \"All Known Implementing Classes\" section)","label":{"api":{"Waiter":[[18,23]],"Queue":[[80,84]]}}},{"text":"ProgressMonitor is designed to handle long operations, but if used directly, then it does not refresh","label":{"api":{"ProgressMonitor":[[0,14]]}}},{"text":"I have made an app using Java FX and WebView","label":{"api":{"Java FX":[[25,31]],"WebView":[[37,43]]}}},{"text":"Do I have to obtain a secure certificate for running WebView in browser","label":{"api":{"WebView":[[53,59]]}}},{"text":"You can use IntStream ints() or DoubleStream doubles() available as of java 8 in Random class","label":{"api":{"IntStream":[[12,20]],"ints()":[[22,27]],"DoubleStream":[[32,43]],"doubles()":[[45,53]],"Random":[[81,86]]}}},{"text":"Use a HashSet","label":{"api":{"HashSet":[[6,12]]}}},{"text":"I would advice to learn searching in http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html (for example) you can find there all available methods","label":{"api":{}}},{"text":"Create a PreparedStatement and make a Batch-Update","label":{"api":{"PreparedStatement":[[9,25]]}}},{"text":"Timeouts are enabled by invoking ServerSocket.setSoTimeout(int)","label":{"api":{"Timeout":[[0,6]],"ServerSocket.setSoTimeout(int)":[[33,62]]}}},{"text":"Use Collections.max and provide a custom Comparator","label":{"api":{"Collections.max":[[4,18]],"Comparator":[[41,50]]}}},{"text":"Then if you really want to find the position of this object in the list you can use indexOf","label":{"api":{"indexOf":[[84,90]]}}},{"text":"How can I get a JTree to only listen to its TreeModel while it is actually visible to the user or at least to have it unregister itself as soon as the corresponding JFrame is disposed","label":{"api":{"JTree":[[16,20]],"TreeModel":[[44,52]],"JFrame":[[165,170]]}}},{"text":"As far as I can see the only case a JTree unregisters itself from its model is if you pass it a new model (using setModel(…))","label":{"api":{"JTree":[[36,40]],"setModel(…)":[[113,123]]}}},{"text":"I implemented a TreeModel using a WatchService to have an always up to date model of a file system tree","label":{"api":{"TreeModel":[[16,24]],"WatchService":[[34,45]]}}},{"text":"So even if the JTree is not visible anymore it is still kept in memory by the model which still needs to get updates from the WatchService, although none of this is necessary any longer","label":{"api":{"JTree":[[15,19]],"WatchService":[[126,137]]}}},{"text":"I guess the best way would be to create a new class extending JTree that does the registering to and unregistering from the model","label":{"api":{"JTree":[[62,66]]}}},{"text":"\\s is a regular expression that stands for any of the following","label":{"api":{}}},{"text":"First alternative is to use a Thread.setDefaultUncaughtExceptionHandler","label":{"api":{"Thread.setDefaultUncaughtExceptionHandler":[[30,70]]}}},{"text":"you can use CountDownLatch(since java 1.5) here, tt is a synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes","label":{"api":{"CountDownLatch":[[12,25]]}}},{"text":"Since you're creating a new Scanner object using the new File(fileName), this constructor of Scanner throws a FileNotFoundException which needs to be handled","label":{"api":{"Scanner":[[28,34],[93,99]],"File(fileName)":[[57,70]],"FileNotFoundException":[[110,130]]}}},{"text":"I advice you move this code to a method inside the class and handle the FileNotFoundException either by having a throws clause or a try-catch around the code creating a new Scanner using a File object","label":{"api":{"FileNotFoundException":[[72,92]],"Scanner":[[173,179]],"File":[[189,192]]}}},{"text":"As per Java Documentation, InputStream","label":{"api":{"InputStream":[[27,37]]}}},{"text":"Consider using a Vector or an ArrayList instead","label":{"api":{"Vector":[[17,22]],"ArrayList":[[30,38]]}}},{"text":"Try to use Set instead of List","label":{"api":{"Set":[[11,13]],"List":[[26,29]]}}},{"text":"Set wont allow duplicate values","label":{"api":{"Set":[[0,2]]}}},{"text":"For example, use an explicit ThreadPoolExecutor constructor, passing it the CallerRunsPolicy as Rejection Policy","label":{"api":{"ThreadPoolExecutor":[[29,46]],"CallerRunsPolicy":[[76,91]]}}},{"text":"The getNodeValue method in the DOM is defined to always return null for element nodes (see the table at the top of the JavaDoc page for org.w3c.dom.Node for details)","label":{"api":{"getNodeValue":[[4,15]],"org.w3c.dom.Node":[[136,151]]}}},{"text":"1) You can use InputVerifier like next","label":{"api":{"InputVerifier":[[15,27]]}}},{"text":"Use getField instead of getDeclaredField","label":{"api":{"getField":[[4,11]],"getDeclaredField":[[24,39]]}}},{"text":"Use the String.split() function to split the line at commas , into an array of Strings","label":{"api":{"String.split()":[[8,21]]}}},{"text":"If this is a fixed format, you can use String#indexOf to get the index of \"DB2.QUERY_CT=\", then (since you know the length of DB2.QUERY_CT=, you can know where the number begins and extract it","label":{"api":{"String#indexOf":[[39,52]]}}},{"text":"All in all simply use ConcurrentHashMap as map implementation in concurrent environement","label":{"api":{"ConcurrentHashMap":[[22,38]]}}},{"text":"Use the @XmlTransient annotation","label":{"api":{"@XmlTransient annotation":[[8,31]]}}},{"text":"Consider using a DelayQueue","label":{"api":{"DelayQueue":[[17,26]]}}},{"text":"You need X as the specifier for the UTC offset as it's in ISO-8601 format, as per the SimpleDateFormat documentation","label":{"api":{"SimpleDateFormat":[[86,101]]}}},{"text":"The bean inherits from a superclass that could implement Formattable (http://docs.oracle.com/javase/7/docs/api/java/util/Formattable.html) but I just don't seem to understand how to make this work","label":{"api":{"Formattable":[[57,67]]}}},{"text":"If you use a java ThreadPoolExecutor you can provide your own task queue to be used internally by it, you should not interact with the queue directly","label":{"api":{"ThreadPoolExecutor":[[18,35]]}}},{"text":"You can use a PriorityBlockingQueue constructed with a custom Comparator that returns which task goes first","label":{"api":{"PriorityBlockingQueue":[[14,34]],"Comparator":[[62,71]]}}},{"text":"As in Tomcat and Weblogic, you can find some more interesting information","label":{"api":{"Weblogic":[[17,24]]}}},{"text":"Java comes with a serialization mechanism (Serializable) which does not require much work from your side","label":{"api":{"Serializable":[[43,54]]}}},{"text":"If you have a ListCellRenderer, simply invoke getListCellRendererComponent() with the appropriate values, and then invoke setBounds(x, y, w, h) and paint(g) on the returned component (which is all normal cases is the renderer itself) to paint it as it would be in a list","label":{"api":{"ListCellRenderer":[[14,29]],"getListCellRendererComponent()":[[46,75]],"setBounds(x, y, w, h)":[[122,142]],"paint(g)":[[148,155]]}}},{"text":"To catch when there is a String entered (blank text counts too), use NumberFormatException","label":{"api":{"String":[[25,30]],"NumberFormatException":[[69,89]]}}},{"text":"To catch any error, use Exception","label":{"api":{"Exception":[[24,32]]}}},{"text":"To answer your question on how you can do it, you could get the entrySet from your map and then just put into the new map by using getValue as key and getKey as value","label":{"api":{"entrySet":[[64,71]],"getValue":[[131,138]],"getKey":[[151,156]]}}},{"text":"But remember that keys in a Map are unique, which means if you have one value with two different key in your original map, only the second key (in iteration order) will be kep as value in the new map","label":{"api":{"Map":[[28,30]]}}},{"text":"Calendar javadocs for MONTH","label":{"api":{"Calendar":[[0,7]],"MONTH":[[22,26]]}}},{"text":"The JavaDoc for String.compareTo says","label":{"api":{"String.compareTo":[[16,31]]}}},{"text":"Just implement a MouseListener and use mouseExited() and mouseEntered() to keep track","label":{"api":{"MouseListener":[[17,29]],"mouseExited()":[[39,51]],"mouseEntered()":[[57,70]]}}},{"text":"As of Java 1.5 you can use Character.digit to get the numeric value of the corresponding digit","label":{"api":{"Character.digit":[[27,41]]}}},{"text":"You could try to use CopyOnWriteArrayList or CopyOnWriteArraySet in your case","label":{"api":{"CopyOnWriteArrayList":[[21,40]],"CopyOnWriteArraySet":[[45,63]]}}},{"text":"Your arrays have 100 elements, so lots of Zeros get printed, use Arrays.copyOf to create smaller arrays","label":{"api":{"Arrays.copyOf":[[65,77]]}}},{"text":"You can do this with Files.lines","label":{"api":{"Files.lines":[[21,31]]}}},{"text":"Note that it uses the UTF-8 charset to read the file, if that's not what you want you can pass your charset as the second argument to Files.lines","label":{"api":{"Files.lines":[[134,144]]}}},{"text":"You have two options, you should use PreparedStatement and bind your parameter(s)","label":{"api":{"PreparedStatement":[[37,53]]}}},{"text":"You can use Arrays.sort and provide a custom comparator","label":{"api":{"Arrays.sort":[[12,22]]}}},{"text":"See the doc of the writeMethod, readMethod and of the Serializable interface","label":{"api":{"writeMethod":[[19,29]],"readMethod":[[32,41]],"Serializable":[[54,65]]}}},{"text":"There is no (realistic) way to put this in a loop, but you can circumvent the recursion using a Dequeue approach (in the form of a stack)","label":{"api":{"Dequeue":[[96,102]]}}},{"text":"Then put that copy in a Dequeue and terminate the function","label":{"api":{"Dequeue":[[24,30]]}}},{"text":"you can easily put the code part above in the run() method of a Runnable and have multiple threads wait on a ConcurrentLinkedDeque","label":{"api":{"run()":[[46,50]],"Runnable":[[64,71]],"ConcurrentLinkedDeque":[[109,129]]}}},{"text":"If you don't have to use regular expressions, it is always preferred to use String.replace() instead of String.replaceAll(), since you get rid of all the regular expression overhead","label":{"api":{"String.replace()":[[76,91]],"String.replaceAll()":[[104,122]]}}},{"text":"Use LinkedHashSet instead of HashSet","label":{"api":{"LinkedHashSet":[[4,16]],"HashSet":[[29,35]]}}},{"text":"LinkedHashSet will maintain the insertion order","label":{"api":{"LinkedHashSet":[[0,12]]}}},{"text":"You can use LinkedHashSet, which preserves insertion order","label":{"api":{"LinkedHashSet":[[12,24]]}}},{"text":"If you are using Swing, SwingWorker is the way to do it","label":{"api":{"Swing":[[17,21]],"SwingWorker":[[24,34]]}}},{"text":"So by using the SwingWorker, you don't have to worry about the internals of handling UI events in the EDT and the time consuming tasks in another thread","label":{"api":{"SwingWorker":[[16,26]]}}},{"text":"Use LinkedHashMap instead of HashSet","label":{"api":{"LinkedHashMap":[[4,16]],"HashSet":[[29,35]]}}},{"text":"LinkedHashMap will maintain the insertion order","label":{"api":{"LinkedHashMap":[[0,12]]}}},{"text":"If you want to retain an order in a Map, your usual choice would be a LinkedHashMap","label":{"api":{"Map":[[36,38]],"LinkedHashMap":[[70,82]]}}},{"text":"Arrays.sort(char[]) uses natural ordering, so you'll get Bs then Rs then Ws","label":{"api":{"Arrays.sort(char[])":[[0,18]]}}},{"text":"If you want an other sort order you have to implement your own Comparator and use Arrays.sort(T[], Comparator)","label":{"api":{"Comparator":[[63,72]],"Arrays.sort(T[], Comparator)":[[82,109]]}}},{"text":"If you use DecimalFormat http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html you can set up the display to look however you like but it does not rigidly enforce what the user types","label":{"api":{"DecimalFormat":[[11,23]]}}},{"text":"This is a job for String#matches(String) and a suiting regular expression","label":{"api":{"String#matches(String)":[[18,39]]}}},{"text":"Also if you need to get result from your Runnables, try to use Callable instead of Runnable","label":{"api":{"Runnable":[[41,48],[83,90]],"Callable":[[63,70]]}}},{"text":"With that when you submit Callable you get Future instance from which you can get result","label":{"api":{"Callable":[[26,33]],"Future":[[43,48]]}}},{"text":"Read about Executors, Callable and Future","label":{"api":{"Executor":[[11,18]],"Callable":[[22,29]],"Future":[[35,40]]}}},{"text":"They suggest BitSet as solution for large sets of booleans, but in your case byte solves the problem better, because you won't have a large set of booleans, you will have a large set of 8 booleans objects","label":{"api":{"BitSet":[[13,18]],"boolean":[[147,153],[188,194]]}}},{"text":"Two of the exceptions thrown by commit() are rollback exceptions that indicate that the transaction was rolled back","label":{"api":{"commit()":[[32,39]]}}},{"text":"The rollback() method doesn't throw any of those except SystemException","label":{"api":{"rollback()":[[4,13]],"SystemException":[[56,70]]}}},{"text":"\"The SystemException is thrown by the transaction manager to indicate that it has encountered an unexpected error condition that prevents future transaction services from proceeding.\" (src) So you can't rollback after a SystemException","label":{"api":{"SystemException":[[5,19],[220,234]],"transaction manager":[[38,56]]}}},{"text":"To retain them, use the two-arg overload of split that takes a limit parameter","label":{"api":{"split":[[44,48]]}}},{"text":"Using an ArrayList","label":{"api":{"ArrayList":[[9,17]]}}},{"text":"But just to clarify, a ThreadPoolExecutor accepts Runnable objects exactly like a Thread","label":{"api":{"ThreadPoolExecutor":[[23,40]],"Runnable":[[50,57]],"Thread":[[82,87]]}}},{"text":"As you can see in documentation of stack, pop gets and removes data","label":{"api":{"stack":[[35,39]],"pop":[[42,44]]}}},{"text":"You can use the String.trim() method to remove leading and trailing spaces","label":{"api":{"String.trim()":[[16,28]]}}},{"text":"Take advantage of the APIs","label":{"api":{}}},{"text":"You have to use RandomAccessFile and use seek to get to the top","label":{"api":{"RandomAccessFile":[[16,31]],"seek":[[41,44]]}}},{"text":"You should check mark method of BufferedReader","label":{"api":{"mark":[[17,20]],"BufferedReader":[[32,45]]}}},{"text":"If this is an important operation, you're better off using a SortedMap, for instance TreeMap, which keeps its elements in sorted order, and then you can simply call firstKey() to find the lowest key","label":{"api":{"SortedMap":[[61,69]],"TreeMap":[[85,91]],"firstKey()":[[165,174]]}}},{"text":"Capital \"D\" is day of year; lowercase \"d\" is day of month (SimpleDateFormat javadocs)","label":{"api":{"SimpleDateFormat":[[59,74]]}}},{"text":"From the Oracle documentation on the org.w3c.dom package","label":{"api":{"org.w3c.dom package":[[37,55]]}}},{"text":"I think you need to read more from your Process, and you should use a ProcessBuilder","label":{"api":{"Process":[[40,46]],"ProcessBuilder":[[70,83]]}}},{"text":"Timer.schedule(TimerTask, long), after the specified delay","label":{"api":{"Timer.schedule(TimerTask, long)":[[0,30]]}}},{"text":"either Timer.schedule(TimerTask, long, long) or Timer.scheduleAtFixedRate(TimerTask, long, long)","label":{"api":{"Timer.schedule(TimerTask, long, long)":[[7,43]],"Timer.scheduleAtFixedRate(TimerTask, long, long)":[[48,95]]}}},{"text":"You can use Set.add(...) return value for this","label":{"api":{"Set.add(...)":[[12,23]]}}},{"text":"Please refer to the SimpleDateFormat API for more info","label":{"api":{"SimpleDateFormat":[[20,35]]}}},{"text":"Here's the 1.7 options list, if you prefer","label":{"api":{"options list":[[15,26]]}}},{"text":"I can read this directly into Java Time objects by using the getTime() method from the ResultSet class","label":{"api":{"Time":[[35,38]],"getTime()":[[61,69]],"ResultSet":[[87,95]]}}},{"text":"I have read everything I could find (this, this and many others) but none of the responses actually use Time objects","label":{"api":{"Time":[[104,107]]}}},{"text":"You are using the Scanner.next method which only returns the next word in the string","label":{"api":{"Scanner.next":[[18,29]]}}},{"text":"You can use Scanner.nextLine() to get the entire input string, instead of only 1 word","label":{"api":{"Scanner.nextLine()":[[12,29]]}}},{"text":"You may want to see the API to see all the other fun things you can do with BigDecimal","label":{"api":{"BigDecimal":[[76,85]]}}},{"text":"If you want to create the whole path, see File#mkdirs","label":{"api":{"File#mkdirs":[[42,52]]}}},{"text":"I ended up using Java's built in Color class","label":{"api":{"Color":[[33,37]]}}},{"text":"You can use SimpleDateFormat class","label":{"api":{"SimpleDateFormat":[[12,27]]}}},{"text":"As @camickr has suggested below, you can also make use of event.getValueIsAdjusting() method","label":{"api":{"event.getValueIsAdjusting()":[[58,84]]}}},{"text":"I would use a Java 7 PathMatcher with a glob pattern (or a regex pattern if the sophistication is needed) and use it in a FileVistor","label":{"api":{"PathMatcher":[[21,31]],"FileVistor":[[122,131]]}}},{"text":"Then just walk the file tree via Files.walkFileTree()","label":{"api":{"Files.walkFileTree()":[[33,52]]}}},{"text":"All basic data type classes in java implement Comparable interface","label":{"api":{"Comparable":[[46,55]]}}},{"text":"This is generally a bad idea and can even throw a ConcurrentModificationException under some circumstances","label":{"api":{"ConcurrentModificationException":[[50,80]]}}},{"text":"That is the MBeanServer","label":{"api":{"MBeanServer":[[12,22]]}}},{"text":"You can explore the other types at this link","label":{"api":{}}},{"text":"You don't call setColor(), so the rectangle is drawn with the default colour","label":{"api":{"setColor()":[[15,24]]}}},{"text":"Approximately 5 seconds (plus or minus some unspecified and likely non-deterministic jitter) per the Timer documentation because (at the start) N = 5 and your period = 1000 so 5000 milliseconds","label":{"api":{"Timer":[[101,105]]}}},{"text":"Tune your reads with setFetchSize() and your writes by using batching","label":{"api":{"setFetchSize()":[[21,34]]}}},{"text":"Use Thread.yield(), and second the client.getSocket().getInputStream().available() method tells you exactly how many byte(s) you can read without blocking","label":{"api":{"Thread.yield()":[[4,17]],"client.getSocket().getInputStream().available()":[[35,81]]}}},{"text":"You might be able to get away with using an ArrayList instead, if you just care about plain simple storage of multiple objects of the same type","label":{"api":{"ArrayList":[[44,52]]}}},{"text":"However, in order to use a HashMap, you need to keep in mind that a Hash / Map is a collection of Key-Value pairs","label":{"api":{"HashMap":[[27,33]]}}},{"text":"Please check the class ArrayList<E> documentation page","label":{"api":{"ArrayList<E>":[[23,34]]}}},{"text":"The key is LinkedHashMap, part of standard Java SDK, which is a Set (i.e","label":{"api":{"LinkedHashMap":[[11,23]],"Set":[[64,66]]}}},{"text":"This approach is exactly what eis commented, with LinkedHashMap used as the \"structure that doesn't allow duplicates\"","label":{"api":{"LinkedHashMap":[[50,62]]}}},{"text":"Modeling closely to Java AWT's Rectangle2D class, I have my Rectangle POJO","label":{"api":{"Rectangle2D":[[31,41]],"Rectangle":[[60,68]]}}},{"text":"So this is definitely a bug in my algorithm, but I copied it straight from Rectangle2D#intersect, and don't see where I've gone wrong","label":{"api":{"Rectangle2D":[[75,85]]}}},{"text":"And you should take a look at http://docs.oracle.com/javase/7/docs/api/java/io/File.html, specifically at the get*() methods that involve the filename","label":{"api":{"get*()":[[110,115]]}}},{"text":"I read somewhere that Instrumentation might be useful (Instrumentation)","label":{"api":{}}},{"text":"Check the ArrayList class documentation for other function","label":{"api":{"ArrayList":[[10,18]]}}},{"text":"When you get an Object from the ArrayList, you get.","label":{"api":{"Object":[[16,21]],"ArrayList":[[32,40]],"get":[[47,49]]}}},{"text":"I'm not sure if this will work, but looking at the JButton docs, there is a setFont(Font font) method you can call","label":{"api":{"JButton":[[51,57]],"setFont(Font font)":[[76,93]]}}},{"text":"You can try passing it a Font created with the font size you'd like using the Font(String name, int style, int size) constructor","label":{"api":{"Font":[[25,28]],"Font(String name, int style, int size)":[[78,115]]}}},{"text":"Create ArrayList of Integer and add result, return that array list","label":{"api":{"ArrayList":[[7,15]],"Integer":[[20,26]],"array list":[[56,65]]}}},{"text":"See ProcessBuilder javadoc for more info","label":{"api":{"ProcessBuilder":[[4,17]]}}},{"text":"I think using a hashmap with an List is what you're specifically asking for","label":{"api":{"hashmap":[[16,22]],"List":[[32,35]]}}},{"text":"However, a look at this question shows this would not be quite as easy as this, as you must instantiate each List for all your key's (that question deals specifically with multidimensional hashmaps, but the premise is the same)","label":{"api":{"List":[[109,112]],"hashmap":[[189,195]]}}},{"text":"If you can't use the List inside either, I suppose you could put another hashmap inside, but I don't see that having much real use for this unless it's just an arbitrary requirement","label":{"api":{"List":[[21,24]],"hashmap":[[73,79]]}}},{"text":"You should save the return value of nextInt properly and use it for comparison","label":{"api":{"nextInt":[[36,42]]}}},{"text":"You can use substring and lastIndexOf as shown below","label":{"api":{"substring":[[12,20]],"lastIndexOf":[[26,36]]}}},{"text":"You do have finalizers, but they're not guaranteed to run","label":{"api":{"finalizers":[[12,21]]}}},{"text":"Further discussion about why finalizers may not run in this thread","label":{"api":{"finalizers":[[29,38]]}}},{"text":"Not exactly a hook, but you can use a WeakReference to be notified that an object has become eligible to be garbage collected","label":{"api":{"WeakReference":[[38,50]]}}},{"text":"You are binding UpAction and DownAction to KeyStroke.getKeyStroke(keyCode, 0), which according to the javadoc is a \"key pressed\" event","label":{"api":{"UpAction":[[16,23]],"DownAction":[[29,38]],"KeyStroke.getKeyStroke(keyCode, 0)":[[43,76]]}}},{"text":"You can create a separate key release binding with, for example, KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0, true)","label":{"api":{"KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0, true)":[[65,111]]}}},{"text":"Convert your Joda-Time DateTime object to a java.util.Date","label":{"api":{"DateTime":[[23,30]],"java.util.Date":[[44,57]]}}},{"text":"Joda-Time knows how to convert to java.util.Date","label":{"api":{"java.util.Date":[[34,47]]}}},{"text":"By the way, the java.sql.Date class is simply a very thin subclass of java.util.Date","label":{"api":{"java.sql.Date":[[16,28]],"java.util.Date":[[70,83]]}}},{"text":"These classes supplant the mess that is java.util.Date/Calendar","label":{"api":{"java.util.Date":[[40,53]],"Calendar":[[55,62]]}}},{"text":"We can add an HyperlinkListener to that","label":{"api":{"HyperlinkListener":[[14,30]]}}},{"text":"The documentation of Instrumentation.setNativeMethodPrefix explains the details","label":{"api":{"Instrumentation.setNativeMethodPrefix":[[21,57]]}}},{"text":"Use setHorizontalAlignment() method of JLabel like next","label":{"api":{"setHorizontalAlignment()":[[4,27]],"JLabel":[[39,44]]}}},{"text":"I have a 2 JFormattedTextFields that input the same information in different forms","label":{"api":{"JFormattedTextField":[[11,29]]}}},{"text":"I have implemented something like this before using PropertyChangeListeners, however I have encountered a strange error this time","label":{"api":{"PropertyChangeListener":[[52,73]]}}},{"text":"When my JFrame opens the PropertyChangeListener event is fired for no apparent reason","label":{"api":{"JFrame":[[8,13]],"PropertyChangeListener":[[25,46]]}}},{"text":"The value of getNewValue() on the PropertyChangeEvent is null","label":{"api":{"getNewValue()":[[13,25]],"PropertyChangeEvent":[[34,52]]}}},{"text":"Then later in my JFrame constructor","label":{"api":{"JFrame":[[17,22]]}}},{"text":"As you can see I do not set the value in code and the event is called (and generates a NullPointerException) before I get a chance to type anything in","label":{"api":{"NullPointerException":[[87,106]]}}},{"text":"CharSequence is an interface that \"bundles\" most of the character based implementations like StringBuilder, StringBuffer, CharBuffer, String and in Avro Utf8","label":{"api":{"CharSequence":[[0,11]],"StringBuilder":[[93,105]],"StringBuffer":[[108,119]],"CharBuffer":[[122,131]],"String":[[134,139]]}}},{"text":"Have a look at using exec this Executes the specified string command in a separate process","label":{"api":{"exec":[[21,24]]}}},{"text":"On the server side, implemented with Servlets, you simply make your class extend HttpServlet and implement the various doXxx() methods","label":{"api":{"Servlets":[[37,44]],"HttpServlet":[[81,91]],"doXxx()":[[119,125]]}}},{"text":"When you set the root logger level to FINE that is setting the effective level for all child loggers too","label":{"api":{}}},{"text":"The most efficient way to do this would be to use System.arrayCopy(), which is much faster and more efficient than copying manually using a loop","label":{"api":{"System.arrayCopy()":[[50,67]]}}},{"text":"Do not reallocate the table component, instead use setModel() to refresh data","label":{"api":{"setModel()":[[51,60]]}}},{"text":"I don't have a definitive answer to the question, by if I look at the java class generated for a tag file by jetty, it is a SimpleTag, as it extends SimpleTagSupport","label":{"api":{"SimpleTag":[[124,132]],"SimpleTagSupport":[[149,164]]}}},{"text":"You can use Collections.sort and provide a custom Comparator where you compare the first element of each list, i.e the name","label":{"api":{"Collections.sort":[[12,27]],"Comparator":[[50,59]]}}},{"text":"Arrays are objects too, but they don't override Object's toString() method, which is responsible for the \"crazy output\"","label":{"api":{"Arrays":[[0,5]],"Object":[[48,53]],"toString()":[[57,66]]}}},{"text":"The documentation at http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#close() indicates that when you do so, it also closes the underlying stream","label":{"api":{}}},{"text":"Yes, these are available through their wrapper's TYPE fields","label":{"api":{"TYPE":[[49,52]]}}},{"text":"By default, the SAX and DOM parsers are not namespace-aware, you need to explicitly call setNamespace() on the factory","label":{"api":{"SAX and DOM parser":[[16,33]],"setNamespace()":[[89,102]]}}},{"text":"As a rule of thumb always use a language construct, when there is one, in this case the Comparator","label":{"api":{"Comparator":[[88,97]]}}},{"text":"Seeing @Elliott Frisch's answer I think the best thing for you is to implement Comparable in your object","label":{"api":{"Comparable":[[79,88]]}}},{"text":"Collections.sort(List list) is way faster, and if you look at the source you would see why","label":{"api":{"Collections.sort(List list)":[[0,26]]}}},{"text":"Java can do this with the ScheduledExecutorService","label":{"api":{"ScheduledExecutorService":[[26,49]]}}},{"text":"In that case, each parent can spawn one thread per child and then use a semaphore to wait for all of them to finish","label":{"api":{"semaphore":[[72,80]]}}},{"text":"Cancel them, or call shutdownNow","label":{"api":{"shutdownNow":[[21,31]]}}},{"text":"Implementing the Comparable interface only makes sense for classes who really have a natural ordering","label":{"api":{"Comparable":[[17,26]]}}},{"text":"Take a look at TreeSet, which is such a search tree","label":{"api":{"TreeSet":[[15,21]]}}},{"text":"The FileHandler doesn't support generating file names by date and time from the LogManager","label":{"api":{"FileHandler":[[4,14]],"LogManager":[[80,89]]}}},{"text":"If you want to generate a file name on startup you can subclass the FileHandler and create a static method to generate your file name using a SimpleDateFormat","label":{"api":{"FileHandler":[[68,78]],"SimpleDateFormat":[[142,157]]}}},{"text":"The LogManager supports a 'config' option that will also allow you to install custom code to setup and install a FileHandler","label":{"api":{"LogManager":[[4,13]],"FileHandler":[[113,123]]}}},{"text":"If you want to generate a file name per each LogRecord you have to create a custom Handler that will create and close a FileHandler on each publish","label":{"api":{"LogRecord":[[45,53]],"Handler":[[83,89]],"FileHandler":[[120,130]]}}},{"text":"If you put '\\\\' in a pattern it will be treated as a backslash, just like you expected","label":{"api":{"pattern":[[21,27]]}}},{"text":"You can use java.util.Arrays as below","label":{"api":{"java.util.Arrays":[[12,27]]}}},{"text":"If you are running two threads within the same JVM process, you could use a BlockingQueue in order to transfer some sort of file-transfer-finished token from the producer to the consumer such as for example the file's name once a file is fully written and its stream closed","label":{"api":{"BlockingQueue":[[76,88]]}}},{"text":"Use the Clipboard and ClipboardContent, e.g","label":{"api":{"Clipboard":[[8,16]],"ClipboardContent":[[22,37]]}}},{"text":"Use String.split() in regards to explode","label":{"api":{"String.split()":[[4,17]]}}},{"text":"Use NavigableMap.pollLastEntry -removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty","label":{"api":{"NavigableMap.pollLastEntry":[[4,29]]}}},{"text":"If long-term accuracy of scheduling is what you are after, then you should use the Timer#scheduleAtFixedRate method","label":{"api":{"Timer#scheduleAtFixedRate":[[83,107]]}}},{"text":"I would suggest that you take a look at Strings's startsWith() and endsWith() methods","label":{"api":{"String":[[40,45]],"startsWith()":[[50,61]],"endsWith()":[[67,76]]}}},{"text":"As The Guy with The Hat says, there are enough functions for strings such as startsWith and endsWith to achieve your goals","label":{"api":{"startsWith":[[77,86]],"endsWith":[[92,99]]}}},{"text":"You can use indexOf and lastIndexOf to find the positions of <s- and -e> in the string and use substring to extract the proper substring without any \"noise\"","label":{"api":{"indexOf":[[12,18]],"lastIndexOf":[[24,34]],"substring":[[95,103],[127,135]]}}},{"text":"Alternatively, you can possibly rely on response.isCommitted() (see doc) as a committed response would typically be closed, however this isn't definite - it could be closed but not committed","label":{"api":{"response.isCommitted()":[[40,61]]}}},{"text":"Note that getComponent() \"Returns the originator of the event.\" In general, your program should not rely on anomalous, platform-specific results","label":{"api":{"getComponent()":[[10,23]]}}},{"text":"Also, you might want to consider using setFetchSize()","label":{"api":{"setFetchSize()":[[39,52]]}}},{"text":"It will print the class of the TableColumn returned by JTable.getColumn() method, not the column class of the table model","label":{"api":{"TableColumn":[[31,41]],"JTable.getColumn()":[[55,72]],"column":[[90,95]]}}},{"text":"Based on a quick bit of testing, I achieved the desired results by calling the setComparator method on the TableRowSorter instance","label":{"api":{"setComparator":[[79,91]],"TableRowSorter":[[107,120]]}}},{"text":"A similar problem exists in Object, with the equals(Object) and hashCode() methods","label":{"api":{"Object":[[28,33]],"equals(Object)":[[45,58]],"hashCode()":[[64,73]]}}},{"text":"However, if your case is more like the one in Object, where they dont' need to be overridden, but just satisfy a very specific contract, then clear documentation on what that contract is will work better, allowing developers to satisfy the contract the way they determine is best","label":{"api":{"Object":[[46,51]]}}},{"text":"Have you tried http://docs.oracle.com/javase/7/docs/api/java/lang/Process.html#getInputStream()","label":{"api":{}}},{"text":"This is the ResultSet documentation, for more information on how it works and what you can do with it","label":{"api":{"ResultSet":[[12,20]]}}},{"text":"For splitting up the String I would make use of the method toCharArray()","label":{"api":{"String":[[21,26]],"toCharArray()":[[59,71]]}}},{"text":"Really its simple you override another method paintComponents() but you need paintComponent()","label":{"api":{"paintComponents()":[[46,62]],"paintComponent()":[[77,92]]}}},{"text":"You might want to take a look at Java Arrays API","label":{"api":{"Arrays":[[38,43]]}}},{"text":"Scanner has a constructor taking a File as argument","label":{"api":{"Scanner":[[0,6]]}}},{"text":"You can open an InputStream for a class path resource using Class.getResourceAsStream() or ClassLoader.getResourceAsStream()","label":{"api":{"InputStream":[[16,26]],"Class.getResourceAsStream()":[[60,86]],"ClassLoader.getResourceAsStream()":[[91,123]]}}},{"text":"I am using http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html to process different tasks in my app","label":{"api":{}}},{"text":"One can scale the images with Graphics.drawImage(x, y, w, h, null)","label":{"api":{"Graphics.drawImage(x, y, w, h, null)":[[30,65]]}}},{"text":"From this (http://docs.oracle.com/javase/7/docs/api/constant-values.html#java.awt.event.KeyEvent.VK_E) we see that the ASCII binding for VK_E is 69","label":{"api":{}}},{"text":"When you need to append to a string in a loop, use StringBuilder","label":{"api":{"StringBuilder":[[51,63]]}}},{"text":"It is common to use a MessageDigest to accomplish this, by applying a one way cryptographic hash function to the user's password (e.g","label":{"api":{"MessageDigest":[[22,34]]}}},{"text":"You can use Rectangle method intersects()","label":{"api":{"Rectangle":[[12,20]],"intersects()":[[29,40]]}}},{"text":"The trick is to only suppress ClientAbortException while allowing every other IOException to be handled as errors or logged, without introducing a compile/runtime dependency on your container API","label":{"api":{"ClientAbortException":[[30,49]],"IOException":[[78,88]]}}},{"text":"Checking for null and using Java's Pattern class is another solution","label":{"api":{"Pattern":[[35,41]]}}},{"text":"You can only write instances which implement the Serializable interface, otherwise you will get a rather self-explaining NotSerializableException","label":{"api":{"Serializable":[[49,60]],"NotSerializableException":[[121,144]]}}},{"text":"The InputStream class does indeed not implement the Serializable interface","label":{"api":{"InputStream":[[4,14]],"Serializable":[[52,63]]}}},{"text":"If you want items in the sorted order, you can use TreeSet from which you can retrieve the first element using TreeSet#first()","label":{"api":{"TreeSet":[[51,57]],"TreeSet#first()":[[111,125]]}}},{"text":"If you need to have predictable ordering, you need to use the LinkedHashSet implementation","label":{"api":{"LinkedHashSet":[[62,74]]}}},{"text":"When you iterate over a LinkedHashSet, you will get the elements in the order you inserted","label":{"api":{"LinkedHashSet":[[24,36]]}}},{"text":"You still need to use an iterator, because having a get method in LinkedHashSet would need you to use the concrete class everywhere","label":{"api":{"iterator":[[25,32]],"get":[[52,54]],"LinkedHashSet":[[66,78]]}}},{"text":"From the Oracle docs","label":{"api":{}}},{"text":"You can use any desired number of Threads that can each take on parts of the workload; you can also schedule batches of smaller tasks to run on a fixed number of threads with a ThreadPoolExecutor, which can be provided with any number of tasks that will then be executed whenever possible by a specific number of threads","label":{"api":{"Thread":[[34,39]],"ThreadPoolExecutor":[[177,194]]}}},{"text":"If you actually need to schedule / delay these tasks, you can also use some other variant of ExecutorService, such as a ScheduledThreadPoolExecutor, which can execute and even re-execute various commands at pre-determined delays with a limited pool of threads","label":{"api":{"ExecutorService":[[93,107]],"ScheduledThreadPoolExecutor":[[120,146]]}}},{"text":"Notice the use of StringBuilder, much more faster and consuming less memory than a classical string concatenation","label":{"api":{"StringBuilder":[[18,30]]}}},{"text":"For that purpose you can use FocusListener for example","label":{"api":{"FocusListener":[[29,41]]}}},{"text":"Have a look at the BitSet class, it's a much more convenient way of setting bit flags","label":{"api":{"BitSet":[[19,24]]}}},{"text":"I'd suggest you use BitSet, as it makes your code much more readable, and it can support many more flags than a simple bit mask","label":{"api":{"BitSet":[[20,25]]}}},{"text":"You can use a listener ServletContextListener","label":{"api":{"ServletContextListener":[[23,44]]}}},{"text":"A Map is an object that maps keys to values.Use HashMap Here is the example of hashmap","label":{"api":{"Map":[[2,4]],"HashMap":[[48,54]]}}},{"text":"However, if you are using org.springframework.http just for the http status, why don't you use native Java Status","label":{"api":{"org.springframework.http":[[26,49]],"Status":[[107,112]]}}},{"text":"Usually the choice is between String and StringBuilder, not StringWriter","label":{"api":{"String":[[30,35]],"StringBuilder":[[41,53]],"StringWriter":[[60,71]]}}},{"text":"StringWriter is a character output stream and I suppose is not what you need","label":{"api":{"StringWriter":[[0,11]],"output stream":[[28,40]]}}},{"text":"String is an immutable type, so once created its value can't be modified","label":{"api":{"String":[[0,5]]}}},{"text":"StringBuffer is more useful when you need to do many manipulations on the characters sequence","label":{"api":{"StringBuffer":[[0,11]]}}},{"text":"So if you need, for example, to concatenate a large amount of strings, then I'll go for StringBuffer","label":{"api":{"StringBuffer":[[88,99]]}}},{"text":"You are looking for the retainAll method to find entries in all lists","label":{"api":{"retainAll":[[24,32]]}}},{"text":"Increasing the underlying network buffer size with a call to setReceiveBufferSize will give you some margin and greatly improve the behavior","label":{"api":{"setReceiveBufferSize":[[61,80]]}}},{"text":"The join method doesn't affect the order of execution of any currently executing Threads","label":{"api":{"join":[[4,7]],"Thread":[[81,86]]}}},{"text":"You need to URL-encode each parameter","label":{"api":{}}},{"text":"Alternatively, you may be able to pass the entire original query string","label":{"api":{}}},{"text":"If you're using Java 7, the clearest way to achieve this is to use Paths and Files as follows","label":{"api":{"Paths":[[67,71]],"Files":[[77,81]]}}},{"text":"According to the Javadoc for RuntimePermission, the createClassLoader permission is a risky one to grant","label":{"api":{"RuntimePermission":[[29,45]],"createClassLoader":[[52,68]]}}},{"text":"Apparently you have extended the the class Unmarshaller#Listener which has only the methods afterUnmarshal  and beforeUnmarshal which explains why only those two are called","label":{"api":{"Unmarshaller#Listener":[[43,63]],"afterUnmarshal":[[92,105]],"beforeUnmarshal":[[112,126]]}}},{"text":"In order to Listen to marshaling events you need to have another Listener class extending Marshaller#Listener which in its turn has the methods you need and which you have to override","label":{"api":{"Listener":[[65,72]],"Marshaller#Listener":[[90,108]]}}},{"text":"Having done that in your class you should have got errors saying that the class Unmarshaller#Listener does not have any methods beforeMarshal or afterMarshal","label":{"api":{"Unmarshaller#Listener":[[80,100]],"beforeMarshal":[[128,140]],"afterMarshal":[[145,156]]}}},{"text":"After an object is garbage collected, JVM calls its finalize method","label":{"api":{"finalize":[[52,59]]}}},{"text":"Because of my background, I had always assumed in languages like Java when I call compile for Pattern it produced a DFA or Transducer in the background","label":{"api":{"Pattern":[[94,100]],"DFA":[[116,118]],"Transducer":[[123,132]]}}},{"text":"As a result, I had always assumed no matter how ugly my regex, no matter how long my regex, Pattern.matches or similar methods would run in linear time","label":{"api":{"Pattern.matches":[[92,106]]}}},{"text":"java.util.LinkedList<E> is already a doubly-linked list","label":{"api":{"java.util.LinkedList<E>":[[0,22]]}}},{"text":"You can make your Student class implement the Comparable interface and then use the PriorityQueue","label":{"api":{"Student":[[18,24]],"Comparable":[[46,55]],"PriorityQueue":[[84,96]]}}},{"text":"I'd like to check if a Path (introduced in Java 7) ends with a  certain extension","label":{"api":{"Path":[[23,26]]}}},{"text":"So how can I check the file extension of a Path","label":{"api":{"Path":[[43,46]]}}},{"text":"Java NIO's PathMatcher provides FileSystem.getPathMatcher(String syntaxAndPattern)","label":{"api":{"PathMatcher":[[11,21]],"FileSystem.getPathMatcher(String syntaxAndPattern)":[[32,81]]}}},{"text":"The checkedList method will ensure that  your list will receive only instances of the class of instance variable","label":{"api":{"checkedList":[[4,14]]}}},{"text":"here, the nextsetBit would give you the next turned on bit at or after a specified index","label":{"api":{"nextsetBit":[[10,19]]}}},{"text":"The best way to do this is a servlet filter","label":{"api":{"servlet filter":[[29,42]]}}},{"text":"Or alternatively, use System.arraycopy()","label":{"api":{"System.arraycopy()":[[22,39]]}}},{"text":"You could use System.arraycopy to achieve the same result..","label":{"api":{"System.arraycopy":[[14,29]]}}},{"text":"First, I would add a class level field of type Random","label":{"api":{"Random":[[47,52]]}}},{"text":"setText does just that, sets the current text value to what ever you specify","label":{"api":{"setText":[[0,6]]}}},{"text":"Instead, you could try using append, which will append the text you supply to the end of the JTextArea's Document, for example..","label":{"api":{"append":[[29,34],[48,53]],"JTextArea":[[93,101]],"Document":[[105,112]]}}},{"text":"In such situations, you can get the the integer part of the decimal number using split and parse","label":{"api":{"split":[[81,85]],"parse":[[91,95]]}}},{"text":"Each key in a HashMap must be unique","label":{"api":{"HashMap":[[14,20]]}}},{"text":"When \"adding a duplicate key\" the old value (for the same key, as keys must be unique) is simply replaced; see HashMap.put","label":{"api":{"HashMap.put":[[111,121]]}}}]