[{"text":"a single null key is allowed (as keys must be unique) but the HashMap can have any number of null values, and a null key need not have a null value","label":{"api":{"HashMap":[[62,68]]}}},{"text":"HashMap] permits null values and [a] null key","label":{"api":{"HashMap":[[0,6]]}}},{"text":"It overrides the value at key null","label":{"api":{}}},{"text":"If you need them to be in order you could use a LinkedHashSet","label":{"api":{"LinkedHashSet":[[48,60]]}}},{"text":"If you need to separate threads then you will want something like a BlockingQueue, have one thread read and push to the queue - the other read pull from the queue and write","label":{"api":{"BlockingQueue":[[68,80]]}}},{"text":"To make sure the ArrayList is sent  a second time, you need to call reset() on the ObjectOutputStream","label":{"api":{"ArrayList":[[17,25]],"reset()":[[68,74]],"ObjectOutputStream":[[83,100]]}}},{"text":"You can format the result from the Integer.toBinaryString(int i) method with the String.format(String pattern, Object ..","label":{"api":{"Integer.toBinaryString(int i)":[[35,63]],"String.format(String pattern, Object ..":[[81,119]]}}},{"text":"To reverse the process, use a KeyFactory with a PKCS8EncodedKeySpec as follows","label":{"api":{"KeyFactory":[[30,39]],"PKCS8EncodedKeySpec":[[48,66]]}}},{"text":"The class BasicFileAttributes, for examining the properties of a file in the file system, has the method isRegularFile()","label":{"api":{"BasicFileAttributes":[[10,28]],"isRegularFile()":[[105,119]]}}},{"text":"However, there apparently is some type of \"irregular file\" because a method exists called isOther(), which returns true if it's not a directory, symbolic link, or \"regular file\"","label":{"api":{"isOther()":[[90,98]]}}},{"text":"I found nothing helpful in http://docs.oracle.com/javase/7/docs/api/java/io/FileDescriptor.html#sync..","label":{"api":{}}},{"text":"You can use the java.text.DecimalFormat class to format decimal numbers","label":{"api":{"java.text.DecimalFormat":[[16,38]]}}},{"text":"To understand how to do this you should really read the documentation for regular expressions in the Java API - particularly at the section \"Special constructs (named-capturing and non-capturing)\"","label":{"api":{}}},{"text":"In Addition, if you are not already aware of java has a Point2D class which has a distance(double px, double py) function","label":{"api":{"Point2D":[[56,62]],"distance(double px, double py)":[[82,111]]}}},{"text":"hasNext doesn't consume the input","label":{"api":{"hasNext":[[0,6]]}}},{"text":"Have a look at CountDownLatch","label":{"api":{"CountDownLatch":[[15,28]]}}},{"text":"The java.util.Calendar class has support for daylight savings","label":{"api":{"java.util.Calendar":[[4,21]]}}},{"text":"When using String.replaceAll or any of the applicable Matcher replacers, pay attention to the replacement string and how it is handled","label":{"api":{"String.replaceAll":[[11,27]],"Matcher":[[54,60]]}}},{"text":"As pointed out by isnot2bad in a comment, Matcher.quoteReplacement may be useful here","label":{"api":{"Matcher.quoteReplacement":[[42,65]]}}},{"text":"Or, if you are already on the JavaFX application thread, you could use a Service","label":{"api":{"Service":[[73,79]]}}},{"text":"Usually, this is done using the java.beans.Introspector and getPropertyDescriptors()","label":{"api":{"java.beans.Introspector":[[32,54]],"getPropertyDescriptors()":[[60,83]]}}},{"text":"Date doesn't have a format at all","label":{"api":{"Date":[[0,3]]}}},{"text":"You can only get a String representation of the Date in the format required using the SimpleDateFormat","label":{"api":{"Date":[[48,51]],"SimpleDateFormat":[[86,101]]}}},{"text":"Also, parse() method of SDF parses the String representation of the Date to a Date object","label":{"api":{"parse()":[[6,12]],"String":[[39,44]],"Date":[[68,71],[78,81]]}}},{"text":"format() is the method which gives the formatted String representation of the Date object","label":{"api":{"format()":[[0,7]],"Date":[[78,81]]}}},{"text":"You need to use setText() method of JTextField","label":{"api":{"setText()":[[16,24]],"JTextField":[[36,45]]}}},{"text":"Use split as shown below","label":{"api":{"split":[[4,8]]}}},{"text":"If you opt for the first option, you can wrap a CipherInputStream around it","label":{"api":{"CipherInputStream":[[48,64]]}}},{"text":"You can have a @Schedule annotation in an EJB, which instructs the application server to call it every N seconds/minutes/..","label":{"api":{"@Schedule":[[15,23]]}}},{"text":"Take a look at the Socket's javadoc for instructions on how to set a timeout","label":{"api":{"Socket's":[[19,26]]}}},{"text":"Otherwise use a CountDownLatch, Semaphore, .","label":{"api":{"CountDownLatch":[[16,29]],"Semaphore":[[32,40]]}}},{"text":"from the java.util.concurrent package","label":{"api":{"java.util.concurrent":[[9,28]]}}},{"text":"You could also use containsKey() method","label":{"api":{"containsKey()":[[19,31]]}}},{"text":"Use a ReentrantReadWriteLock to protect modification with the write lock and reading with the read lock","label":{"api":{"ReentrantReadWriteLock":[[6,27]]}}},{"text":"there are set of methods implemented in API that created undecorated JButton, e.g","label":{"api":{}}},{"text":"If your question is just how to create a temporary file without caring about how to name it and where to create it without overwriting existing files, then you can simply use File.createTempFile","label":{"api":{"File.createTempFile":[[175,193]]}}},{"text":"You might also want to have a look at File.deleteOnExit","label":{"api":{"File.deleteOnExit":[[38,54]]}}},{"text":"Later on, I would like to recover the selected value using JOptionPane#getValue() method","label":{"api":{"JOptionPane#getValue()":[[59,80]]}}},{"text":"Your idea about interrupting the threads is pretty much the right thing to do, except I'd avoid interruption and instead post an event to, say, a LinkedBlockingQueue which you poll at the end of the test to see if it is empty or not","label":{"api":{"LinkedBlockingQueue":[[146,164]]}}},{"text":"Use JEditorPane.read(InputStream,Object) - much easier","label":{"api":{"JEditorPane.read(InputStream,Object)":[[4,39]]}}},{"text":"Use the String.split(String) method to split the sentence by spaces","label":{"api":{"String.split(String)":[[8,27]]}}},{"text":"This is a result of the object's default toString() method which prints out the class name and the hash code","label":{"api":{"toString()":[[41,50]]}}},{"text":"You can actually change this by overriding the toString() method in the class of the object that you want to print out","label":{"api":{"toString()":[[47,56]]}}},{"text":"However, instead of printing the object itself, you'd have to call toString() on the object","label":{"api":{"toString()":[[67,76]]}}},{"text":"What you are seeing output by your program is the String returned by the default implementation of toString()","label":{"api":{"toString()":[[99,108]]}}},{"text":"When you call PrintStream.println(Object), which is what System.out.println(demo) is doing, the PrimeStream needs to convert the object passed, in this case your Demo object to a String, which it does by simply calling its toString() method","label":{"api":{"PrintStream.println(Object)":[[14,40]],"System.out.println(demo)":[[57,80]],"PrimeStream":[[96,106]],"Demo":[[162,165]],"String":[[179,184]],"toString()":[[223,232]]}}},{"text":"If you haven't overridden toString() in you class then you get the default behavior","label":{"api":{"toString()":[[26,35]]}}},{"text":"You can use String.indexOf(int) to check if a specific character is in your string or not (it will return -1 if it's not in it)","label":{"api":{"String.indexOf(int)":[[12,30]]}}},{"text":"You can use String.toCharArray() to get an array of all the characters you don't want and iterate this array per character","label":{"api":{"String.toCharArray()":[[12,31]]}}},{"text":"Supply a converter to the combo box, to convert from a string to your ListGroupsObj type and back","label":{"api":{"converter":[[9,17]],"string":[[55,60]],"ListGroupsObj":[[70,82]]}}},{"text":"Use an XMLOutputer with a FileOutputStream","label":{"api":{"XMLOutputer":[[7,17]],"FileOutputStream":[[26,41]]}}},{"text":"Use Character.isWhitespace(ch), e.g","label":{"api":{"Character.isWhitespace(ch)":[[4,29]]}}},{"text":"Arrays.toString(char[] a) will do that for you","label":{"api":{"Arrays.toString(char[] a)":[[0,24]]}}},{"text":"Use an appropriate TreeCellRenderer","label":{"api":{"TreeCellRenderer":[[19,34]]}}},{"text":"See Comparator#compare for a description of how that works but that's basically it to sort","label":{"api":{"Comparator#compare":[[4,21]]}}},{"text":"You'd need to implement the built in interface java.util.List","label":{"api":{"java.util.List":[[47,60]]}}},{"text":"It would need to define all the methods listed in the interface java.util.List","label":{"api":{"java.util.List":[[64,77]]}}},{"text":"To answer the question in the comment, \"How would I go about writing my own Comparator for a Linked List?\"","label":{"api":{"Comparator":[[76,85]],"Linked List":[[93,103]]}}},{"text":"See the javadoc for Comparator, especially the text at the top","label":{"api":{"Comparator":[[20,29]]}}},{"text":"You could define more than one class that implements Comparator<Person>","label":{"api":{"Comparator<Person>":[[53,70]]}}},{"text":"StreamSource has a constructor taking a Reader as argument","label":{"api":{"StreamSource":[[0,11]],"Reader":[[40,45]]}}},{"text":"Similarly, the StreamResult constructor the example uses takes an OutputStream as argument","label":{"api":{"StreamResult":[[15,26]],"OutputStream":[[66,77]]}}},{"text":"Then iterate on the created array and set the text","label":{"api":{}}},{"text":"Rather than implement the interface, consider extending HttpServletRequestWrapper","label":{"api":{"HttpServletRequestWrapper":[[56,80]]}}},{"text":"If you need to be able to implement different, incompatible interface versions, consider creating a proxy","label":{"api":{}}},{"text":"I suppose what you actually want to use is the WeakHashMap (http://docs.oracle.com/javase/6/docs/api/java/util/WeakHashMap.html)","label":{"api":{"WeakHashMap":[[47,57]]}}},{"text":"Since you're attempting to see if a value is larger than, greater than, or equal to another, then consider using Comparable instead","label":{"api":{"Comparable":[[113,122]]}}},{"text":"An Integer is a Comparable entity, so you can simply do this","label":{"api":{"Integer":[[3,9]],"Comparable":[[16,25]]}}},{"text":"To achieve what you want, use Character.getNumericValue(char ch)","label":{"api":{"Character.getNumericValue(char ch)":[[30,63]]}}},{"text":"If you use Java 8, you can set the WebView user agent string directly on the WebEngine, so you probably don't need a custom URLConnection if that is all you want to achieve","label":{"api":{"WebView":[[35,41]],"WebEngine":[[77,85]],"URLConnection":[[124,136]]}}},{"text":"Read this javadoc","label":{"api":{}}},{"text":"Use Desktop.browse(URI), which.","label":{"api":{"Desktop.browse(URI)":[[4,22]]}}},{"text":"While I generally try not to mix model and view, your requirement has me thinking of a writeableraster","label":{"api":{"writeableraster":[[87,101]]}}},{"text":"A writeableraster is a 1d array of pixels, but it starts at the upper left hand corner of the window and iterates rows and columns until it gets to the lower right hand corner","label":{"api":{"writeableraster":[[2,16]]}}},{"text":"I would do something like this (note you can have as many digits of precision as you like) utilizing BigDecimal","label":{"api":{"BigDecimal":[[101,110]]}}},{"text":"You could also make it threadsafe by using an java.util.concurrent.atomic.AtomicInteger with getAndIncrement()","label":{"api":{"java.util.concurrent.atomic.AtomicInteger":[[46,86]],"getAndIncrement()":[[93,109]]}}},{"text":"You can use Math.toRadians() to convert degrees to radians","label":{"api":{"Math.toRadians()":[[12,27]]}}},{"text":"Starting with Java 7, you can do it in a single line of code","label":{"api":{}}},{"text":"The docs [MidiDevice.open()] for player.open()  says","label":{"api":{"MidiDevice.open()":[[10,26]],"player.open()":[[33,45]]}}},{"text":"When you create a TransferHandler using the constructor that takes a String, you create a TransferHandler that can only perform transfers within the same JVM","label":{"api":{"TransferHandler":[[18,32],[90,104]],"String":[[69,74]]}}},{"text":"A java.awt.Image, represented by DataFlavor.imageFlavor","label":{"api":{"java.awt.Image":[[2,15]],"DataFlavor.imageFlavor":[[33,54]]}}},{"text":"A List of Files (List<File>), represented by DataFlavor.javaFileListFlavor","label":{"api":{"List":[[2,5]],"Files":[[10,14]],"List<File>":[[17,26]],"DataFlavor.javaFileListFlavor":[[45,73]]}}},{"text":"In order to add items to the map, you can use Map#put(K, V)","label":{"api":{"Map#put(K, V)":[[46,58]]}}},{"text":"In order to get a value, you can use Map#get(Object)","label":{"api":{"Map#get(Object)":[[37,51]]}}},{"text":"See JDK 1.7 Map documentation for more information about maps","label":{"api":{"map":[[57,59]]}}},{"text":"You can use the java.util.Collections for that","label":{"api":{"java.util.Collections":[[16,36]]}}},{"text":"By default, iterators of a LinkedHashMap will return its key and entries in insertion order","label":{"api":{"LinkedHashMap":[[27,39]]}}},{"text":"I would really recommend ConcurrentHashMap, or making the entire method (or most of it) synchronized","label":{"api":{"ConcurrentHashMap":[[25,41]]}}},{"text":"According to String.split(String) javadoc \"trailing empty strings are not included in the resulting array\"","label":{"api":{"String.split(String)":[[13,32]]}}},{"text":"In your case, you may want to use a Timer, which handles a background thread for you automatically","label":{"api":{"Timer":[[36,40]]}}},{"text":"If instead you want to retrieve a particular object at any time, look into a Map instead","label":{"api":{"Map":[[77,79]]}}},{"text":"As mentioned, you have to use Math.pow in Java for exponentiation","label":{"api":{"Math.pow":[[30,37]]}}},{"text":"You should use System.getenv(), for example","label":{"api":{"System.getenv()":[[15,29]]}}},{"text":"In case anyone is coming here and wondering how to get a specific environment variable without looping through all of your system variables you can use getenv(String name)","label":{"api":{"getenv(String name)":[[152,170]]}}},{"text":"You can use Process#waitFor()","label":{"api":{"Process#waitFor()":[[12,28]]}}},{"text":"The above PrintStream will perform a (potentially lossy) transcoding operation","label":{"api":{"PrintStream":[[10,20]]}}},{"text":"All characters printed by a PrintStream are converted into bytes using the platform's default character encoding","label":{"api":{"PrintStream":[[28,38]]}}},{"text":"String.replace(CharSequence first, CharSequence second) returns a new String reference and this is why the output is different","label":{"api":{"String.replace(CharSequence first, CharSequence second)":[[0,54]],"String":[[70,75]]}}},{"text":"Use replaceItem to change the item","label":{"api":{"replaceItem":[[4,14]]}}},{"text":"Use Process.getOutputStream() and write your input data there","label":{"api":{"Process.getOutputStream()":[[4,28]]}}},{"text":"I think you need ArrayList.addAll()","label":{"api":{"ArrayList.addAll()":[[17,34]]}}},{"text":"I would go for a ExecutorService with a fixed thread pool size","label":{"api":{"ExecutorService":[[17,31]]}}},{"text":"Your master thread can either feed directly to the executor service or you can disconnect them via a BlockingQueue","label":{"api":{"executor service":[[51,66]],"BlockingQueue":[[101,113]]}}},{"text":"To go the other way and read the Blob from the database as a stream in chunks, you could call the Blob's getBinaryStream method, giving you the InputStream and allowing you to set the buffer size later if needed","label":{"api":{"Blob":[[33,36],[98,101]],"getBinaryStream":[[105,119]],"InputStream":[[144,154]]}}},{"text":"You can use lastIndexOf(' ') with the substring method","label":{"api":{"lastIndexOf(' ')":[[12,27]],"substring":[[38,46]]}}},{"text":"Comparing the two docs for Java 6 and 7 I see no mention in the first one whether 0L might be returned \"because of an I/O exception\" (quite a broad description), as well","label":{"api":{}}},{"text":"Additionally, if Java 6 behaves the same, I expect there would be a way to check for this distinction (java.nio.file.Files), which again seems to lack","label":{"api":{"java.nio.file.Files":[[103,121]]}}},{"text":"I am wondering about the intended usage of the Types.NULL  constant in the JDBC","label":{"api":{"Types.NULL":[[47,56]]}}},{"text":"I am guessing from the javadoc that a literal value in a SQL statement can have the type Types.NULL","label":{"api":{"SQL statement":[[57,69]],"Types.NULL":[[89,98]]}}},{"text":"For example, the null literal in this statement, could have the type Types.NULL","label":{"api":{"Types.NULL":[[69,78]]}}},{"text":"I am also guessing that you cannot have a column that is the type Types.NULL because it is not a 'SQL Type'","label":{"api":{"Types.NULL":[[66,75]]}}},{"text":"Use equalsIgnoreCase instead of equals","label":{"api":{"equalsIgnoreCase":[[4,19]],"equals":[[32,37]]}}},{"text":"The Java Executor framework offers the DefaultThreadFactory for creating threads","label":{"api":{"DefaultThreadFactory":[[39,58]]}}},{"text":"Is DefaultThreadFactory itself safe for concurrent use by multiple threads","label":{"api":{"DefaultThreadFactory":[[3,22]]}}},{"text":"Or must I take care to have only one DefaultThreadFactory per thread","label":{"api":{"DefaultThreadFactory":[[37,56]]}}},{"text":"It would be great if the answer included a short explanation of why you are sure that DefaultThreadFactory is thread-safe or not","label":{"api":{"DefaultThreadFactory":[[86,105]]}}},{"text":"I know the documentation http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html has an Iterator, but how is that actually implemented","label":{"api":{}}},{"text":"Use Arrays#deepToString instead","label":{"api":{"Arrays#deepToString":[[4,22]]}}},{"text":"Have a look at SimpleDateFormat, you should be able to figure out the rest on your own","label":{"api":{"SimpleDateFormat":[[15,30]]}}},{"text":"If you can't count on java being run from the same location every time, you can use an environment variable to point to the location that your files are sitting in","label":{"api":{}}},{"text":"You can register the filter in the client via a Feature","label":{"api":{"Feature":[[48,54]]}}},{"text":"the Feature (you can extract it in a class of its own)","label":{"api":{"Feature":[[4,10]]}}},{"text":"You can use Timer as shown below","label":{"api":{"Timer":[[12,16]]}}},{"text":"As per JPQL specification, there is no way to create new tables or entities","label":{"api":{"JPQL":[[7,10]]}}},{"text":"From Java Docs","label":{"api":{}}},{"text":"If you want asynchronous I/O, you need to use an AsynchronousSocketChannel","label":{"api":{"AsynchronousSocketChannel":[[49,73]]}}},{"text":"You can just give the relative or absolute file path when specifying the file name in the FileOutputStream","label":{"api":{"FileOutputStream":[[90,105]]}}},{"text":"The java.beans package already provides such a feature","label":{"api":{"java.beans":[[4,13]]}}},{"text":"Then I just added a @Timeout annotation to my method, and used the TimerService#createTimer() method to add a new trigger","label":{"api":{"@Timeout":[[20,27]],"TimerService#createTimer()":[[67,92]]}}},{"text":"I never needed it, but I think the way to go is to get the JDBC connection and find in its properties that piece of information","label":{"api":{"JDBC connection":[[59,73]]}}},{"text":"In particular getClientInfo() and getMetaData() might be interesting","label":{"api":{"getClientInfo()":[[14,28]],"getMetaData()":[[34,46]]}}},{"text":"I recommend you to use StringBuilder instead of +","label":{"api":{"StringBuilder":[[23,35]]}}},{"text":"The value of an Element node is always null by design","label":{"api":{"Element":[[16,22]]}}},{"text":"See the Node documentation for a list of expected values","label":{"api":{"Node":[[8,11]]}}},{"text":"FileHandler throws OverlappingFileLockException","label":{"api":{"FileHandler":[[0,10]],"OverlappingFileLockException":[[19,46]]}}},{"text":"The FileHandler documentation doesn't declare that OverlappingFileLockException can be thrown from the constructor","label":{"api":{"FileHandler":[[4,14]],"OverlappingFileLockException":[[51,78]]}}},{"text":"Reading the FileChannel.tryLock documentation it appears that failure to acquire a lock can be indicated by returning null or throwing an OverlappingFileLockException","label":{"api":{"FileChannel.tryLock":[[12,30]],"OverlappingFileLockException":[[138,165]]}}},{"text":"The FileHandler.openFiles method doesn't seem to handle the case of OverlappingFileLockException being thrown since it extends IllegalStateException","label":{"api":{"FileHandler.openFiles":[[4,24]],"OverlappingFileLockException":[[68,95]],"IllegalStateException":[[127,147]]}}},{"text":"Having said that, from the NIO FileLock documentation, \"In general, great care should be taken when locking files that reside on network filesystems.\"  So even if this bug is fixed it still may not be possible to what you are trying to do per contract of the Java API","label":{"api":{"FileLock":[[31,38]]}}},{"text":"You want Math.round() or - if you always want to round up - Math.ceil()","label":{"api":{"Math.round()":[[9,20]],"Math.ceil()":[[60,70]]}}},{"text":"Add a WindowListner to your JFrame and override windowClosing method and do a pop-up with JOptionPane warning user","label":{"api":{"WindowListner":[[6,18]],"windowClosing":[[48,60]],"JOptionPane":[[90,100]]}}},{"text":"When you need a boxed type which is mutable, you can use the Atomic*-variants of them, like AtomicInteger","label":{"api":{"AtomicInteger":[[92,104]]}}},{"text":"This is done by calling the FileWriter(File, boolean) constructor","label":{"api":{"FileWriter(File, boolean)":[[28,52]]}}},{"text":"BTW, if all you want to do is delete a file upon JVM shut down, you can ask the runtime to do so using File.deleteOnExit","label":{"api":{"File.deleteOnExit":[[103,119]]}}},{"text":"You can use System.setOut to install your own OutputStream","label":{"api":{"System.setOut":[[12,24]],"OutputStream":[[46,57]]}}},{"text":"Wrap the OutputStream  with a ByteArrayOutputStream, then use toByteArray()","label":{"api":{"OutputStream":[[9,20]],"ByteArrayOutputStream":[[30,50]],"toByteArray()":[[62,74]]}}},{"text":"You can use the Date#after(Date when) and Date#before(Date otherDate) methods to compare dates and achive some order","label":{"api":{"Date#after(Date when)":[[16,36]],"Date#before(Date otherDate)":[[42,68]]}}},{"text":"Use a Calendar object instead","label":{"api":{"Calendar":[[6,13]]}}},{"text":"FacesContext.addMessage requires the component's clientId, not the message id","label":{"api":{"FacesContext.addMessage":[[0,22]],"clientId":[[49,56]],"message id":[[67,76]]}}},{"text":"If you want to use the IN JPQL operator, then use @EmbeddedId","label":{"api":{"@EmbeddedId":[[50,60]]}}},{"text":"For more information, pay a visit to the java.text.NumberFormat documentation","label":{"api":{"the java.text.NumberFormat":[[37,62]]}}},{"text":"You can get selected object(getSelectedItem() method) and convert it to Float like next","label":{"api":{"getSelectedItem()":[[28,44]]}}},{"text":"If you look at the docs for AudioInputStream#read and SourceDataLine#write, you'll see that the number of bytes to read/write must be an integral number of sample frames","label":{"api":{"AudioInputStream#read":[[28,48]],"SourceDataLine#write":[[54,73]]}}},{"text":"The \"memory address\" printed is part of Object's toString() method, and you haven't overridden toString()","label":{"api":{"Object's toString()":[[40,58]],"toString()":[[95,104]]}}},{"text":"You must use this expression (+1) as the sole argument to the substring method","label":{"api":{"substring":[[62,70]]}}},{"text":"You could use String.replaceAll(String, String) to find the = sign and replace everything afterwards","label":{"api":{"String.replaceAll(String, String)":[[14,46]]}}},{"text":"Or you could use String.substring(int, int) to create a substring from the first character up to and including the = sign","label":{"api":{"String.substring(int, int)":[[17,42]]}}},{"text":"Create a new Calendar object (GregorianCalendar is most probable) and use getTimeInMillis()","label":{"api":{"Calendar":[[13,20]],"getTimeInMillis()":[[74,90]]}}},{"text":"I see that addActionListener() implementation is using EventListenerList so I've tried to do something like in example but seems that example can't produce full working issue","label":{"api":{"addActionListener()":[[11,29]],"EventListenerList":[[55,71]]}}},{"text":"You should use StringBuilder instead of +=","label":{"api":{"StringBuilder":[[15,27]]}}},{"text":"Since TreeMap is a NavigableMap, it is computationally cheap to iterate the map starting from a given key","label":{"api":{"TreeMap":[[6,12]],"NavigableMap":[[19,30]]}}},{"text":"If not, you could/should use the Collections.sort(List) or Collections.sort(List, Comparator) method","label":{"api":{"Collections.sort(List)":[[33,54]],"Collections.sort(List, Comparator)":[[59,92]]}}},{"text":"What about using Arrays.toString()","label":{"api":{"Arrays.toString()":[[17,33]]}}},{"text":"Seems like CyclicBarrier is what you need","label":{"api":{"CyclicBarrier":[[11,23]]}}},{"text":"There is also Phaser which is an advanced version of CyclicBarrier and it requires JDK 7 to run","label":{"api":{"Phaser":[[14,19]],"CyclicBarrier":[[53,65]]}}},{"text":"Is it possible to get this constructor of A via the A.class.getDeclaredConstructor(...) method and how does the call look like","label":{"api":{"A.class.getDeclaredConstructor(...)":[[52,86]]}}},{"text":"If you're looking for a different solution than Regexp you could use a StringTokenizer to separate them using the space/tab","label":{"api":{"StringTokenizer":[[71,85]]}}},{"text":"In the substring method, the first index is inclusive, and the second index is exclusive","label":{"api":{"substring":[[7,15]]}}},{"text":"Also, note that counting starts with 0, so to get GG from RRGGBB you have to call substring(2, 4)","label":{"api":{"substring(2, 4)":[[82,96]]}}},{"text":"You might want to use String.format instead for formatting the hex string","label":{"api":{"String.format":[[22,34]]}}},{"text":"executeQuery() is for quires (usually SELECT) that return a ResultSet","label":{"api":{"executeQuery()":[[0,13]],"ResultSet":[[60,68]]}}},{"text":"With DML (and DDL) queries you need to use executeUpdate() method","label":{"api":{"executeUpdate()":[[43,57]]}}},{"text":"This mechanism is described -- albeit very briefly -- in the class documentation for RMISocketFactory","label":{"api":{"RMISocketFactory":[[85,100]]}}},{"text":"However, if you don't add, then the println method that takes a char is called, and '2' is printed","label":{"api":{"println":[[36,42]]}}},{"text":"The REST endpoint is essentially an implementation of StreamingOutput, wrapped it a Response object that is handed off to the container when a client requests","label":{"api":{"StreamingOutput":[[54,68]],"Response":[[84,91]]}}},{"text":"I would like the data to be sent to the client as soon as I invoke flush on the OutputStream which the container hands off to my implementation of StreamingOutput","label":{"api":{"OutputStream":[[80,91]],"StreamingOutput":[[147,161]]}}},{"text":"In the filter I grabbed the HttpServletResponse and the OutputStream implementation that CXF used (the one that wouldn't let me flush) from the Message implementation, wrapping them in a FilteredOutputStream","label":{"api":{"HttpServletResponse":[[28,46]],"OutputStream":[[56,67]],"Message":[[144,150]],"FilteredOutputStream":[[187,206]]}}},{"text":"Whenever flush is invoked I explicitly invoke flush on the HttpServletResponse","label":{"api":{"flush":[[9,13],[46,50]],"HttpServletResponse":[[59,77]]}}},{"text":"This sample relies heavily on the utils in the Arrays class, but you can certainly build your version with optimized hashCode() and equals() that better suite your needs","label":{"api":{"Arrays":[[47,52]],"hashCode()":[[117,126]],"equals()":[[132,139]]}}},{"text":"If you simply want to add IDs to the end of the file, use the following FileWriter constructor","label":{"api":{"FileWriter":[[72,81]]}}},{"text":"This opens the FileWriter in append mode, allowing you to write output to a pre-existing file","label":{"api":{"FileWriter":[[15,24]]}}},{"text":"For more information, see the JavaDoc for FileWriter","label":{"api":{"FileWriter":[[42,51]]}}},{"text":"@Deprecated is an annotation that is read by the compiler, used to mark a method as deprecated to the compiler and will generate a deprecation compile-time warning if the method is used","label":{"api":{"@Deprecated":[[0,10]]}}},{"text":"It only makes sense to use this tag in conjunction to the @Deprecated annotation","label":{"api":{"@Deprecated":[[58,68]]}}},{"text":"To answer your question more specifically, you should use either @Deprecated or both because it makes no sense that you would want this information to be restricted to the documentation while withholding it from the compiler","label":{"api":{"@Deprecated":[[65,75]]}}},{"text":"@Deprecated marks your method as deprecated to any tool that cares about it (such as IDEs), as it is available at runtime and compile-time","label":{"api":{"@Deprecated":[[0,10]]}}},{"text":"Additionally, the javadoc tool does take notice of @Deprecated even if you didn't add any information regarding the deprecation by using @deprecated","label":{"api":{"@Deprecated":[[51,61]],"@deprecated":[[137,147]]}}},{"text":"In this case, findbugs is most likely referring to your call to File.renameTo()","label":{"api":{"File.renameTo()":[[64,78]]}}},{"text":"You're using getAttribute, but I suspect you wanted getParameter (if you're trying to get information submitted as part of a GET or POST request)","label":{"api":{"getAttribute":[[13,24]],"getParameter":[[52,63]]}}},{"text":"Here's what getAttribute works with","label":{"api":{"getAttribute":[[12,23]]}}},{"text":"Here's what getParameter works with","label":{"api":{"getParameter":[[12,23]]}}},{"text":"It's good to have a look at Pattern#quote that returns a literal pattern String","label":{"api":{"Pattern#quote":[[28,40]]}}},{"text":"You can use a combination of replaceAll() calls like this","label":{"api":{"replaceAll()":[[29,40]]}}},{"text":"Well, as documentation for writeBytes states, it simply writes the sequence of bytes (in your case regular ASCII symbols","label":{"api":{"writeBytes":[[27,36]]}}},{"text":"From the Java API URLDecoder","label":{"api":{"URLDecoder":[[18,27]]}}},{"text":"You can use Collections#sort with a Comparator to sort the time intervals and use Interval#gap to check for gaps","label":{"api":{"Collections#sort":[[12,27]],"Comparator":[[36,45]],"Interval#gap":[[82,93]]}}},{"text":"I think java.util.EnumMap may be what you're looking for","label":{"api":{"java.util.EnumMap":[[8,24]]}}},{"text":"You can use Enum#valueOf to look up the enum value from the given String, like Sam Yonnou mentioned","label":{"api":{"Enum#valueOf":[[12,23]],"String":[[66,71]]}}},{"text":"System#currentTimeMillis returns long and not double","label":{"api":{"System#currentTimeMillis":[[0,23]]}}},{"text":"You want to do a precise measurements time, it's better to use System#nanoTime, since it gives time in nano seconds","label":{"api":{"System#nanoTime":[[63,77]]}}},{"text":"By default JPanel has a FlowLayout as layout manager and this one doesn't honor the components preferred size","label":{"api":{"JPanel":[[11,16]],"FlowLayout":[[24,33]]}}},{"text":"There is one ServerSocket","label":{"api":{"ServerSocket":[[13,24]]}}},{"text":"It accepts incoming connections through the accept() method","label":{"api":{"accept()":[[44,51]]}}},{"text":"This returns a Socket which you use on the server side to handle the connection to a particular client","label":{"api":{"Socket":[[15,20]]}}},{"text":"By definition, they are all different to one another","label":{"api":{}}},{"text":"This AtomicEnum is simply a thin wrapper around an AtomicReference, which makes sense since a n enum value is simply an object (reference)","label":{"api":{"AtomicEnum":[[5,14]],"AtomicReference":[[51,65]]}}},{"text":"So if AtomicReference works correctly (and I think we can assume that), the AtomicEnum will work as well","label":{"api":{"AtomicReference":[[6,20]],"AtomicEnum":[[76,85]]}}},{"text":"You're using replaceAll(), which takes a regular expression","label":{"api":{"replaceAll()":[[13,24]]}}},{"text":"Use replace() instead, which works with literal strings","label":{"api":{"replace()":[[4,12]]}}},{"text":"The first parameter of replaceAll() is a REGEX, and '.' means any character in REGEX area","label":{"api":{"replaceAll()":[[23,34]]}}},{"text":"Consider using a java.awt.TexturePaint, illustrated here and here, constructed using a BufferedImage containing your Logo.png","label":{"api":{"java.awt.TexturePaint":[[17,37]],"BufferedImage":[[87,99]]}}},{"text":"Get the model, and use the DefaultTableModel#getValueAt() method","label":{"api":{"DefaultTableModel#getValueAt()":[[27,56]]}}},{"text":"hasNext() doesn't consume any input","label":{"api":{"hasNext()":[[0,8]]}}},{"text":"Add a call to next() inside the while loop to consume the input","label":{"api":{"next()":[[14,19]]}}},{"text":"You may be interested in the Java Tools API","label":{"api":{"Tools":[[34,38]]}}},{"text":"This API gives you programmatic control over the Java compiler and you can pretty much write a program to read and analyze a Java program","label":{"api":{"compiler":[[54,61]]}}},{"text":"String API, consider using split() to split the name string","label":{"api":{"String":[[0,5]],"split()":[[27,33]]}}},{"text":"see the WindowAdapter interface for methods that can be implemented","label":{"api":{"WindowAdapter":[[8,20]]}}},{"text":"You can use CountDownLatch","label":{"api":{"CountDownLatch":[[12,25]]}}},{"text":"A scenario where I have used Selector and IO multiplexing is","label":{"api":{"Selector":[[29,36]]}}},{"text":"But as we want to support more secondary servers, I changed the design to use Selectors so that one thread does the IO multiplexing (selector.select()) and send the SelectionKey to the worker threadPool (Fixed thread pool of size 50)","label":{"api":{"Selector":[[78,85]],"selector.select()":[[133,149]],"SelectionKey":[[165,176]],"Fixed thread pool":[[204,220]]}}},{"text":"ResultSet is an interface (not a class)","label":{"api":{"ResultSet":[[0,8]]}}},{"text":"In DefaultTreeModel, you can insert a node using the insertNodeInto() methods","label":{"api":{"DefaultTreeModel":[[3,18]],"insertNodeInto()":[[53,68]]}}},{"text":"So could someone please explain if it is necessary to call nodesWereInserted() and similar methods in DefaultTreeModel","label":{"api":{"nodesWereInserted()":[[59,77]],"DefaultTreeModel":[[102,117]]}}},{"text":"The set of supported CSS attributes for JavaFX is defined in the JavaFX CSS Reference Guide","label":{"api":{"JavaFX CSS":[[65,74]]}}},{"text":"You can catch every uncaught exception via Thread.UncaughtExceptionHandler","label":{"api":{"Thread.UncaughtExceptionHandler":[[43,73]]}}},{"text":"DateFormat.getDateInstance(int style, Locale aLocale)This displays the current date in a locale-specific way","label":{"api":{"DateFormat.getDateInstance(int style, Locale aLocale)":[[0,52]]}}},{"text":"(You could replace it with System.arraycopy.) Note that the name is misleading, though; you're overwriting Arrlist, not adding to it","label":{"api":{"System.arraycopy":[[27,42]]}}},{"text":"You can run Pattern.quote on the delimiter before feeding it in","label":{"api":{"Pattern.quote":[[12,24]]}}},{"text":"Add that cell to a Stack","label":{"api":{"Stack":[[19,23]]}}},{"text":"You can benefit from an AtomicReference in cases where multiple threads access (common) configuration data that can be refreshed at any given moment","label":{"api":{"AtomicReference":[[24,38]]}}},{"text":"But you'll need that anyway to work with the AtomicReference","label":{"api":{"AtomicReference":[[45,59]]}}},{"text":"The following code example should give you an idea about how to use an AtomicReference","label":{"api":{"AtomicReference":[[71,85]]}}},{"text":"getGraphics will return null if the component is not visible","label":{"api":{"getGraphics":[[0,10]]}}},{"text":"To make your Window visible you have to call setVisible(bool)","label":{"api":{"setVisible(bool)":[[45,60]]}}},{"text":"You also have to be careful using threads with Swing","label":{"api":{"threads":[[34,40]]}}},{"text":"You can use containsKey method like this","label":{"api":{"containsKey":[[12,22]]}}},{"text":"Does the canDisplay() method do what you're looking for","label":{"api":{"canDisplay()":[[9,20]]}}},{"text":"If the canDisplay() method is not what you're looking for - you'll need to give a bit more info about what you're doing - platform, JDK version, font you've selected (or none?), example code (SSCCE would be best)","label":{"api":{"canDisplay()":[[7,18]]}}},{"text":"String.replaceAll() is your friend","label":{"api":{"String.replaceAll()":[[0,18]]}}},{"text":"Have a look at DateFormat, more specifically SimpleDateFormat","label":{"api":{"DateFormat":[[15,24]],"SimpleDateFormat":[[45,60]]}}},{"text":"Or you could use String#matches","label":{"api":{"String#matches":[[17,30]]}}},{"text":"Wrap it in a DataInputStream and use readFully(byte[])","label":{"api":{"DataInputStream":[[13,27]],"readFully(byte[])":[[37,53]]}}},{"text":"See the method's Javadoc page","label":{"api":{}}},{"text":"Have a look at the Timer class, specifically the schedule methods","label":{"api":{"Timer":[[19,23]],"schedule":[[49,56]]}}},{"text":"One sensible approach might be to use a fixed thread pool to make sure the number of threads doesn't grow too ridiculously large, and then spawn threads off there as required","label":{"api":{"fixed thread pool":[[40,56]]}}},{"text":"Replace subtraction with the implementation from Integer to fix this problem","label":{"api":{"Integer":[[49,55]]}}},{"text":"In this case you can use  HashMap#containsKey(java.lang.Object) or if you want to find if the value is in the HashMap, you can use HashMap#containsValue(java.lang.Object)","label":{"api":{"HashMap#containsKey(java.lang.Object)":[[26,62]],"HashMap":[[110,116]],"HashMap#containsValue(java.lang.Object)":[[131,169]]}}},{"text":"JTextField has built in callbacks for text changes with DocumentListener","label":{"api":{"JTextField":[[0,9]],"DocumentListener":[[56,71]]}}},{"text":"If you want to only respond on Enter presses, you can use an ActionListener which is called on Enter presses","label":{"api":{"ActionListener":[[61,74]],"on Enter presses":[[92,107]]}}},{"text":"The main difference is that System.out is a PrintStream and the other one is a PrintWriter","label":{"api":{"System.out":[[28,37]],"PrintStream":[[44,54]],"PrintWriter":[[79,89]]}}},{"text":"Essentially, PrintStream should be used to write a stream of bytes, while PrintWriter should be used to write a stream of characters (and thus it deals with character encodings and such)","label":{"api":{"PrintStream":[[13,23]],"PrintWriter":[[74,84]]}}},{"text":"This process takes a while so I implemented Callable interface to do the task in another thread and get the result back","label":{"api":{"Callable":[[44,51]]}}},{"text":"This approach can be seen in many java APIs, one example would be the java.util.Collections.unmodifiableList method that becomes one list as parameter and gives other as result","label":{"api":{"java.util.Collections.unmodifiableList":[[70,107]]}}},{"text":"See String.format and Format String Syntax for more information","label":{"api":{"String.format":[[4,16]]}}},{"text":"What's wrong with using indexOf","label":{"api":{"indexOf":[[24,30]]}}},{"text":"If you have no other @XmlElement annotated properties in your class, you can use @XmlValue","label":{"api":{"@XmlElement":[[21,31]],"@XmlValue":[[81,89]]}}},{"text":"Use a shutdown hook","label":{"api":{"shutdown hook":[[6,18]]}}},{"text":"Use Integer.toString(), one of the options is able to use alphabetic characters as well as numerical to represent the String","label":{"api":{"Integer.toString()":[[4,21]]}}},{"text":"You need to use some of the Map implementations","label":{"api":{"Map":[[28,30]]}}},{"text":"Note that if performance matters, you'd use a StringBuffer","label":{"api":{"StringBuffer":[[46,57]]}}},{"text":"In the case you don't actually want to learn how binary trees work and just use them, just use TreeSet which is an already working binary-tree implementation","label":{"api":{"TreeSet":[[95,101]]}}},{"text":"Various docs (e.g.) refer to creating a customized CookieHandler and setting the default \"system wide\" but are ambiguous or non-committal about the consequences -- so while I  can create my own  CookieHandler or CookieManager, it seems this inevitably gets caught up in the \"system wide default\" which may be accessible by other processes","label":{"api":{"CookieHandler":[[51,63],[195,207]],"CookieManager":[[212,224]]}}},{"text":"Now take a look at IndexOutOfBoundsException documentation and you will see that it extends RuntimeException which means you don't need to (but you can) catch it","label":{"api":{"IndexOutOfBoundsException":[[19,43]],"RuntimeException":[[92,107]]}}},{"text":"Also, you should use the String.trim() method, to ensure that there are no leading or trailing spaces in your strings","label":{"api":{"String.trim()":[[25,37]]}}},{"text":"There are, however, special classes like BitSet that provide special functionality for big collections of booleans","label":{"api":{"BitSet":[[41,46]]}}},{"text":"You need to implement a TableCellEditor as well","label":{"api":{"TableCellEditor":[[24,38]]}}},{"text":"System.out is of type PrintStream","label":{"api":{"System.out":[[0,9]],"PrintStream":[[22,32]]}}},{"text":"The javadoc of PrintStream.println(Object) says","label":{"api":{"PrintStream.println(Object)":[[15,41]]}}},{"text":"The javadoc of String.valueOf(Object) says","label":{"api":{"String.valueOf(Object)":[[15,36]]}}},{"text":"And the javadoc of Object.toString() says","label":{"api":{"Object.toString()":[[19,35]]}}},{"text":"If you look at the JavaDoc for Integer you'll note that it implements the Comparable interface, so you are able to call your sort as","label":{"api":{"Integer":[[31,37]],"Comparable":[[74,83]]}}},{"text":"You need to use a PreparedStatement - specifically, with its setBlob() method","label":{"api":{"PreparedStatement":[[18,34]],"setBlob()":[[61,69]]}}},{"text":"And really you should always use PreparedStatements","label":{"api":{"PreparedStatement":[[33,49]]}}},{"text":"Collections gives you an easy way to do this","label":{"api":{"Collections":[[0,10]]}}},{"text":"From the SimpleDateFormat documentation","label":{"api":{"SimpleDateFormat":[[9,24]]}}},{"text":"Move scan.close(); to outside the while loop","label":{"api":{"scan.close()":[[5,16]]}}},{"text":"When close the Scanner, this closes the System.in input stream","label":{"api":{"Scanner":[[15,21]],"System.in":[[40,48]],"input stream":[[50,61]]}}},{"text":"Use StringBuilder instead","label":{"api":{"StringBuilder":[[4,16]]}}},{"text":"This is the expected exception when calling setLocationByPlatform(true) after having already called setVisible(true)","label":{"api":{"setLocationByPlatform(true)":[[44,70]],"setVisible(true)":[[100,115]]}}},{"text":"Use Process#getErrorStream() and getOutputStream(), in a fashion like this","label":{"api":{"Process#getErrorStream()":[[4,27]],"getOutputStream()":[[33,49]]}}},{"text":"Additionally, you may need to wait for the subprocess to terminate, using Process#waitFor, because otherwise your Java program might be finishing execution even though the spawned subprocess is still running in the background (unless this is what you want)","label":{"api":{"Process#waitFor":[[74,88]]}}},{"text":"http://docs.oracle.com/javase/6/docs/api/java/io/Console.html#readPassword() instead of Scanner","label":{"api":{"Scanner":[[88,94]]}}},{"text":"Using a JScrollBar, you can add a class with myScrollBar.addAdjustmentListener(this) so it will call your AdjustmentListener's adjustmentValueChanged(AdjustmentEvent e) method","label":{"api":{"JScrollBar":[[8,17]],"myScrollBar.addAdjustmentListener(this)":[[45,83]],"AdjustmentListener":[[106,123]],"adjustmentValueChanged(AdjustmentEvent e)":[[127,167]]}}},{"text":"For more, read up a tutorial on JScrollBar's","label":{"api":{"JScrollBar":[[32,41]]}}},{"text":"You can use String replace() method","label":{"api":{"String replace()":[[12,27]]}}},{"text":"You probably forgot to specify RUNTIME as the RetentionPolicy of your annotation","label":{"api":{"RetentionPolicy":[[46,60]]}}},{"text":"You could write your own loop that check both at once using a compiled regex Pattern that looks for either name at the same time","label":{"api":{"compiled regex Pattern":[[62,83]]}}},{"text":"Please check the Java doc for resultset","label":{"api":{"resultset":[[30,38]]}}},{"text":"To get just the name and not the package name, use Class.getSimpleName()","label":{"api":{"Class.getSimpleName()":[[51,71]]}}},{"text":"If you want to do a background task and show progress you should use a SwingWorker","label":{"api":{"SwingWorker":[[71,81]]}}},{"text":"The SwingWorker has a progress property that you can listen on","label":{"api":{"SwingWorker":[[4,14]]}}},{"text":"The complete example code is in the javadoc of SwingWorker","label":{"api":{"SwingWorker":[[47,57]]}}},{"text":"One way to find out is to only reference the String using a WeakReference then force a garbage collection and see if the WeakReference has been cleared","label":{"api":{"String":[[45,50]],"WeakReference":[[60,72],[121,133]]}}},{"text":"You can use toString(radix) for that","label":{"api":{"toString(radix)":[[12,26]]}}},{"text":"From your edit, there really isn't a reason as to why you would specifically need the file rather than just using the input stream available from the openRawResource(int id) method...just use an existing java class http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#Scanner%28java.io.InputStream,%20java.lang.String%29","label":{"api":{"openRawResource(int id)":[[150,172]]}}},{"text":"You can use List for unknown size of data (probably ArrayList will be the best solution for you)","label":{"api":{"List":[[12,15]],"ArrayList":[[52,60]]}}},{"text":"Try the API canDisplay() method for figuring out if a specific font \"knows\" how to display a specific character","label":{"api":{"canDisplay()":[[12,23]]}}},{"text":"Luckily java.awt.Component has a getGraphicsConfiguration method that gives us the necessary information","label":{"api":{"java.awt.Component":[[8,25]],"getGraphicsConfiguration":[[33,56]]}}},{"text":"Java 9 exposes the necessary information directly via the graphics device’s default transform","label":{"api":{}}},{"text":"You can combine a simple counter and Timer.scheduleAtFixedRate for this","label":{"api":{"Timer.scheduleAtFixedRate":[[37,61]]}}},{"text":"Java does include such a container class with exactly the methods you want","label":{"api":{"container":[[25,33]]}}},{"text":"Also take a look at the thread-safe variant ConcurrentLinkedQueue","label":{"api":{"ConcurrentLinkedQueue":[[44,64]]}}},{"text":"You should use a Java Queue A FIFO data container","label":{"api":{"Queue":[[22,26]]}}},{"text":"According to my understanding of JavaCompiler.getTask(..) I'd suggest adding a DiagnosticListener","label":{"api":{"JavaCompiler.getTask(..)":[[33,56]],"DiagnosticListener":[[79,96]]}}},{"text":"You could confirm it by adding @Override annotation to f() method in derived class and see that it won't compile","label":{"api":{"@Override":[[31,39]],"f()":[[55,57]]}}},{"text":"Take a look at java BigInteger","label":{"api":{"BigInteger":[[20,29]]}}},{"text":"Calling newInstace invokes the default constructor","label":{"api":{"newInstace":[[8,17]]}}},{"text":"Double does not have one","label":{"api":{"Double":[[0,5]]}}},{"text":"If you want to instantiate using reflection then you have to get one of the Contructors of the class using Class.#getConstructor by passing it the appropriate argument types and then call its method Constructor#newInstance by passing it the appropriate arguments","label":{"api":{"Class.#getConstructor":[[107,127]],"Constructor#newInstance":[[199,221]]}}},{"text":"use Sorted Set collection like TreeSet<E> with supporting cost of O(log n) for operations","label":{"api":{"Sorted Set":[[4,13]],"TreeSet<E>":[[31,40]]}}},{"text":"LinkedHashSet<E> But beware unlike HashSet<E>, LinkedHashSet can have O(1) expected performance for operations","label":{"api":{"LinkedHashSet<E>":[[0,15]],"HashSet<E>":[[35,44]],"LinkedHashSet":[[47,59]]}}},{"text":"Use library functions for this operation (in ByteBuffer class)","label":{"api":{"ByteBuffer":[[45,54]]}}},{"text":"Wrap your input stream with an InputStreamReader to handle it as a character-based input stream","label":{"api":{"input stream":[[10,21],[83,94]],"InputStreamReader":[[31,47]]}}},{"text":"Then wrap this one in a BufferedReader","label":{"api":{"BufferedReader":[[24,37]]}}},{"text":"Use the readLine method, which reads data until a newline is found","label":{"api":{"readLine":[[8,15]]}}},{"text":"For text-based output of newline-terminated messages back to the client, you should use the output analogue of the BufferedReader, which is the PrintWriter","label":{"api":{"BufferedReader":[[115,128]],"PrintWriter":[[144,154]]}}},{"text":"Since you're using executor service you can call it's shutdownNow method that is going to actively shut down threads without waiting","label":{"api":{"executor service":[[19,34]],"shutdownNow":[[54,64]]}}},{"text":"For custom paintings you need to use paintComponent(...) method of JComponent, for example of JPanel, instead of paint() method and custom update()","label":{"api":{"paintComponent(...)":[[37,55]],"JComponent":[[67,76]],"JPanel":[[94,99]],"paint()":[[113,119]],"update()":[[139,146]]}}},{"text":"Use next for your JFrame frame.setAlwaysOnTop(false);","label":{"api":{"JFrame":[[18,23]],"frame.setAlwaysOnTop(false);":[[25,52]]}}},{"text":"Use that format with a SimpleDateFormat to create a Date object out of it","label":{"api":{"SimpleDateFormat":[[23,38]],"Date":[[52,55]]}}},{"text":"If you don't want to deal with NIO you can use http://docs.oracle.com/javase/7/docs/api/java/io/RandomAccessFile.html instead","label":{"api":{}}},{"text":"The algorithm for forming the client identifier is described by the javadoc of UIComponent.getClientId()","label":{"api":{"UIComponent.getClientId()":[[79,103]]}}},{"text":"You seem to be looking for JComponent.setBorder(null)","label":{"api":{"JComponent.setBorder(null)":[[27,52]]}}},{"text":"You could throw a subclass of IOException (as you're dealing with input), the (arguably) potential downside is that IOException is not a RuntimeException so anyone calling your code would be forced to either handle the exception or rethrow it","label":{"api":{"IOException":[[30,40],[116,126]],"RuntimeException":[[137,152]]}}},{"text":"Use Color.getHSBColor() to find a gamut of saturations or values for a given hue, as shown here for saturation","label":{"api":{"Color.getHSBColor()":[[4,22]]}}},{"text":"The library you're trying to use seems to rely heavily on java.beans reflection","label":{"api":{"java.beans":[[58,67]]}}},{"text":"However, on Android only parts of java.beans package are available","label":{"api":{"java.beans":[[34,43]]}}},{"text":"Following the example from the Oracle Nashorn Docs","label":{"api":{}}},{"text":"Added in 1.8u40, you can use the ClassFilter to restrict what classes the engine can use","label":{"api":{"ClassFilter":[[33,43]]}}},{"text":"Here is an example from the Oracle documentation","label":{"api":{}}},{"text":"The angle-bracket characters can technically be used for lookahead and lookbehind captures, so it can make sense to quote them defensively if the pattern is adding any segments that are provided at runtime","label":{"api":{}}},{"text":"Since you are using Instrumentation, you already have access to an API that tells you the object sizes","label":{"api":{"Instrumentation":[[20,34]]}}},{"text":"The very same Instrumentation class that you use to modify the byte code of the classes provides the method getObjectSize(Object)","label":{"api":{"Instrumentation":[[14,28]],"getObjectSize(Object)":[[108,128]]}}},{"text":"Just put the objects into WeakReferences","label":{"api":{"WeakReference":[[26,38]]}}},{"text":"Then you can use a ReferenceQueue to learn when the object has been garbage collected which is an important feature when you want to track the heap usage","label":{"api":{"ReferenceQueue":[[19,32]]}}},{"text":"This can be done using the MXBean with the name \"com.sun.management:type=HotSpotDiagnostic\" sending the method invocation dumpHeap(String outputFile, boolean live)","label":{"api":{"MXBean":[[27,32]],"dumpHeap(String outputFile, boolean live)":[[122,162]]}}},{"text":"From the Javadocs for CountDownLatch.await()","label":{"api":{"CountDownLatch.await()":[[22,43]]}}},{"text":"You can use CopyOnWriteArrayList and CopyOnWriteArraySet","label":{"api":{"CopyOnWriteArrayList":[[12,31]],"CopyOnWriteArraySet":[[37,55]]}}},{"text":"Seems you need to use JToggleButton","label":{"api":{"JToggleButton":[[22,34]]}}},{"text":"More information on this service can be found in regular Javadocs and other Java tutorials","label":{"api":{}}},{"text":"You can use a Calendar object","label":{"api":{"Calendar":[[14,21]]}}},{"text":"Your values in binary are equals to (you can use Integer.toBinaryString(int i))","label":{"api":{"Integer.toBinaryString(int i)":[[49,77]]}}},{"text":"However, you can change the way it's displayed, use String#format","label":{"api":{"String#format":[[52,64]]}}},{"text":"You have to use Pattern#quote because \\ is a special character in RegEx","label":{"api":{"Pattern#quote":[[16,28]]}}},{"text":"You can encounter the same kind of problems in the replacement String as well, in this case use Matcher#quoteReplacement","label":{"api":{"Matcher#quoteReplacement":[[96,119]]}}},{"text":"For years there's been a consensus to use Joda-Time or at least to not use the JDK classes (Date, Calendar, etc.) when working with dates and times, because the JDK components are broken","label":{"api":{"Date":[[92,95]],"Calendar":[[98,105]]}}},{"text":"According to the Java 7 API, most of Date's constructors and methods are Deprecated.","label":{"api":{"Date":[[37,40]]}}},{"text":"If you, for some obscure reason, need the coordinates in a situation when mouse events are not available (in which case, take a look at the other answers), you can use SwingUtilities.convertPointFromScreen() to convert the coordinates from MouseInfo to the coordinate system of a Component","label":{"api":{"SwingUtilities.convertPointFromScreen()":[[168,206]],"MouseInfo":[[240,248]],"Component":[[280,288]]}}},{"text":"Read the documentation on matches","label":{"api":{"matches":[[26,32]]}}},{"text":"MessageDigest.getInstance() takes a string parameter that is the algorithm you wish to use on that message digest, SHA-256 for example","label":{"api":{"MessageDigest.getInstance()":[[0,26]]}}},{"text":"As of Java 9, the correct way to prevent the JIT from discarding unwrapped is to use Reference.reachabilityFence","label":{"api":{"Reference.reachabilityFence":[[85,111]]}}},{"text":"The File class has built-in methods isFile() and isDirectory()","label":{"api":{"File":[[4,7]],"isFile()":[[36,43]],"isDirectory()":[[49,61]]}}},{"text":"An example from the JDK is HttpServet, which has methods to handle each of the four http methods (get, post, put and delete) whose default implementations throw a ServletException , forcing the subclass to override those methods they want to implement, but only those","label":{"api":{"HttpServet":[[27,36]],"ServletException":[[163,178]]}}},{"text":"Beware that under the hood JAX-WS RI uses HttpURLConnection so please don't reply with something related to Apache's HttpClient","label":{"api":{"HttpURLConnection":[[42,58]],"HttpClient":[[117,126]]}}},{"text":"Another thing (if you still want to use keyListeners) you may want to extends KeyAdapter that provide default implementation of KeyListener methods (empty methods) therefore you don't need to override methods that you don't use like keyReleased or keyTyped","label":{"api":{"keyListeners":[[40,51]],"KeyAdapter":[[78,87]],"KeyListener":[[128,138]],"keyReleased":[[233,243]],"keyTyped":[[248,255]]}}},{"text":"Client.send() serializes the message and writes to the DataOutputStream","label":{"api":{"Client.send()":[[0,12]],"DataOutputStream":[[55,70]]}}},{"text":"Profiling client and server with JVM Monitor, showed CPU time was dominated by reading from the InputStreamReader and writing to the DataOutputStream","label":{"api":{"InputStreamReader":[[96,112]],"DataOutputStream":[[133,148]]}}},{"text":"Instead of the suggested flag, I suggest you to use CompilationMXBean which allows you to check the amount of time a JVM still spends with compilation","label":{"api":{"CompilationMXBean":[[52,68]]}}},{"text":"You get a java.io.NotSerializableException with the message java.util.WeakHashMap meaning that the WeakHashMap is not serializable","label":{"api":{"java.io.NotSerializableException":[[10,41]],"java.util.WeakHashMap":[[60,80]],"WeakHashMap":[[99,109]]}}},{"text":"That suggests that some attribute of your session is a WeakHashMap","label":{"api":{"WeakHashMap":[[55,65]]}}},{"text":"Either turn of session serialization, if you don't need it, or find out which attribute is the WeakHashMap (simply iterate over all of them and print the names of all WeakHashMap values)","label":{"api":{"WeakHashMap":[[95,105],[167,177]]}}},{"text":"I would use Arrays's binarySearch(Object[] a, Object key) method in conjunction with its sort(Object[] a) method","label":{"api":{"Arrays":[[12,17]],"binarySearch(Object[] a, Object key)":[[21,56]],"sort(Object[] a)":[[89,104]]}}},{"text":"Package java.util.concurrent has ready-made BlockingQueues and TransferQueues which are designed for exactly this","label":{"api":{"java.util.concurrent":[[8,27]],"BlockingQueue":[[44,56]],"TransferQueue":[[63,75]]}}},{"text":"Here's an example of how to write your program using an ArrayBlockingQueue","label":{"api":{"ArrayBlockingQueue":[[56,73]]}}},{"text":"This is why it's probably always better to, when finished writing to a file, add a new line at the end of the file using BufferedWriter.newLine()","label":{"api":{"BufferedWriter.newLine()":[[121,144]]}}},{"text":"As you said that you are using netbeans, when main method it's generated wraps object creation with SwingUtilities#invokeLater that means this code will happen after all pending AWT events have been processed","label":{"api":{"SwingUtilities#invokeLater":[[100,125]]}}},{"text":"Using String comparison with equals() instead of switch on Strings (which is available in Java 7) could look like this","label":{"api":{"equals()":[[29,36]],"String":[[59,64]]}}},{"text":"In Downloads class you grab references for read and write lock from two different ReentrantReadWriteLock objects","label":{"api":{"ReentrantReadWriteLock":[[82,103]]}}},{"text":"You should create one ReentrantReadWriteLock instance for Download object and obtain references for readLock and writeLock lock from it","label":{"api":{"ReentrantReadWriteLock":[[22,43]],"readLock":[[100,107]],"writeLock":[[113,121]]}}},{"text":"Pleas read more about ReadWriteLock and you can look at example of using ReentrantReadWriteLock in mbassador EventBus","label":{"api":{"ReadWriteLock":[[22,34]],"ReentrantReadWriteLock":[[73,94]]}}},{"text":"You must implement toString() in your Student class","label":{"api":{"toString()":[[19,28]],"Student":[[38,44]]}}},{"text":"I urge you to use a java.util.Scanner, and to remember to check that there's a line to read with hasNextLine() before calling nextLine() (also, you should always clean up after yourself)","label":{"api":{"java.util.Scanner":[[20,36]],"hasNextLine()":[[97,109]],"nextLine()":[[126,135]]}}},{"text":"To resolve this, you could use the javax.swing.Timer to schedule the updates so that they would be run in the same UI thread, but only when needed, i.e","label":{"api":{"javax.swing.Timer":[[35,51]]}}},{"text":"The entry point of any Servlet is the service(ServletRequest, ServletResponse) method","label":{"api":{"Servlet":[[23,29]],"service(ServletRequest, ServletResponse)":[[38,77]]}}},{"text":"HttpServlet implements this method and delegates to one of its doGet, doPost, etc","label":{"api":{"HttpServlet":[[0,10]],"doGet":[[63,67]],"doPost":[[70,75]]}}},{"text":"You can use .toArray(T[]) for this","label":{"api":{".toArray(T[])":[[12,24]]}}},{"text":"A table model object must implement the TableModel interface","label":{"api":{"TableModel":[[40,49]]}}},{"text":"If the programmer does not provide a table model object, JTable automatically creates an instance of DefaultTableModel","label":{"api":{"table model":[[37,47]],"JTable":[[57,62]],"DefaultTableModel":[[101,117]]}}},{"text":"Listeners are instances of TableModelListener","label":{"api":{"TableModelListener":[[27,44]]}}},{"text":"Because you're using the legacy Dictionary interface, this gets a bit annoying, but it's possible to do this","label":{"api":{"legacy Dictionary":[[25,41]]}}},{"text":"Iterating over the elements of a Map becomes a call to Map#entrySet() with a little more work","label":{"api":{"Map":[[33,35]],"Map#entrySet()":[[55,68]]}}},{"text":"Construct an ArrayList<Integer>, iterate on the array of bits, as long as you have 1's, increment a counter and as soon as you have 0, add the counter to the ArrayList","label":{"api":{"ArrayList<Integer>":[[13,30]],"ArrayList":[[158,166]]}}},{"text":"If you want to print it in a specific format, you need to use another SimpleDateFormat and call format method","label":{"api":{"SimpleDateFormat":[[70,85]],"format":[[96,101]]}}},{"text":"You can use the same DateFormat and its SimpleDateFromat.format() to get the desired output","label":{"api":{"DateFormat":[[21,30]],"SimpleDateFromat.format()":[[40,64]]}}},{"text":"Since Java 1.8, there is a setUseCipherSuitesOrder method on the SSLParameters class","label":{"api":{"setUseCipherSuitesOrder":[[27,49]],"SSLParameters":[[65,77]]}}},{"text":"The enhanced for-loop iterates over all elements of the the given iterator, since your twoArray is empty there's nothing to iterate","label":{"api":{"iterator":[[66,73]]}}},{"text":"Just use single thread executor, it guarantees that the Runnable's you post to it will be executed sequentially","label":{"api":{"single thread executor":[[9,30]],"Runnable":[[56,63]]}}},{"text":"The new cookie can either be created in the backend using the servlet API addCookie method, on in the frontend using the Javascript cookie APIs","label":{"api":{"servlet":[[62,68]],"addCookie":[[74,82]]}}},{"text":"What is the difference from Locale.ITALY and Locale.ITALIAN","label":{"api":{"Locale.ITALY":[[28,39]],"Locale.ITALIAN":[[45,58]]}}},{"text":"JFrame.EXIT_ON_CLOSE  is a Constant used to control the window-closing operation","label":{"api":{"JFrame.EXIT_ON_CLOSE":[[0,19]]}}},{"text":"In Java 7 (using officially released java.lang.management.ManagementFactory) you may want to try the combination of getMemoryMXBean() with getHeapMemoryUsage() as following","label":{"api":{"java.lang.management.ManagementFactory":[[37,74]],"getMemoryMXBean()":[[116,132]],"getHeapMemoryUsage()":[[139,158]]}}},{"text":"You could also use a Lock for that","label":{"api":{"Lock":[[21,24]]}}},{"text":"In order to get milliseconds value you can use TimeUnit","label":{"api":{"TimeUnit":[[47,54]]}}},{"text":"In the String#compare JavaDoc it states Returns true if and only if this string contains the specified sequence of char values","label":{"api":{"String#compare JavaDoc":[[7,28]]}}},{"text":"You can use the newer ProcessBuilder class, which has more options than the Runtime.exec method","label":{"api":{"ProcessBuilder":[[22,35]],"Runtime.exec":[[76,87]]}}},{"text":"You could use IdentityHashMap and just ignore the values (the keys will form a set)","label":{"api":{"IdentityHashMap":[[14,28]]}}},{"text":"The class implements the KeyListener interface but does not provide an implementation for the keyReleased, keyPressed and keyTyped methods specified on the interface","label":{"api":{"KeyListener":[[25,35]],"keyReleased":[[94,104]],"keyPressed":[[107,116]],"keyTyped":[[122,129]]}}},{"text":"according to the SocketChannel documentation you'll get a ClosedChannelException","label":{"api":{"SocketChannel":[[17,29]],"ClosedChannelException":[[58,79]]}}},{"text":"The unqualified use of Scanner will then point to the correct class","label":{"api":{"Scanner":[[23,29]]}}},{"text":"Given how the JDK documentation refers to Throwable.getSuppressed(), should this code be doing something akin to the following","label":{"api":{"Throwable.getSuppressed()":[[42,66]]}}},{"text":"Here's a recursive solution using Class.isArray","label":{"api":{"Class.isArray":[[34,46]]}}},{"text":"addAll elements, then removeAll elements that appears in a","label":{"api":{"addAll":[[0,5]],"removeAll":[[22,30]]}}},{"text":"getScreenResolution() return dots-per-inch (DPI)","label":{"api":{"getScreenResolution()":[[0,20]]}}},{"text":"If you want the size of the screen, just use getScreenSize()","label":{"api":{"getScreenSize()":[[45,59]]}}},{"text":"I think the database should use a class that extends the class java.util.prefs.Preferences","label":{"api":{"java.util.prefs.Preferences":[[63,89]]}}},{"text":"Use keyboard.next(); or keyboard.nextLine() in the catch clause to consume invalid token that was left from nextInt","label":{"api":{"keyboard.next()":[[4,18]],"keyboard.nextLine()":[[24,42]],"nextInt":[[108,114]]}}},{"text":"Without it invalid token will not be consumed and in another iteration nextInt() will again try to handle same data throwing again InputMismatchException, causing the infinite loop","label":{"api":{"nextInt()":[[71,79]],"InputMismatchException":[[131,152]]}}},{"text":"You may want to use Runtime.addShutdownHook","label":{"api":{"Runtime.addShutdownHook":[[20,42]]}}},{"text":"The Arrays class has many utility methods for creating string representations of arrays","label":{"api":{"Arrays":[[4,9]]}}},{"text":"If you need a sorted map then you will have to look into a TreeMap which supplies the same interface as a HashMap but it's inherently sorted on keys according to their natural ordering (or a custom Comparator)","label":{"api":{"TreeMap":[[59,65]],"HashMap":[[106,112]],"Comparator":[[198,207]]}}},{"text":"Mind that a TreeMap doesn't allow ordering on values, so if you need to sort your data by value then you will have to build your own sorted collection","label":{"api":{"TreeMap":[[12,18]]}}},{"text":"I know that the String can be converted to a long using Long.parseLong(String) method and Long(String) constructor","label":{"api":{"String":[[16,21]],"Long.parseLong(String)":[[56,77]],"Long(String)":[[90,101]]}}},{"text":"Define a ColumnConstraints object, and use it in the grid pane","label":{"api":{"ColumnConstraints":[[9,25]]}}},{"text":"Refer System.arrayCopy for more details","label":{"api":{"System.arrayCopy":[[6,21]]}}},{"text":"Unfortunately the SpringJUnit4ClassRunner can't resolve the @Value expression, even though a default value is supplied (a NumberFormatException is thrown)","label":{"api":{"SpringJUnit4ClassRunner":[[18,40]],"NumberFormatException":[[122,142]]}}},{"text":"Character.isLetter determines if a character is a letter or not","label":{"api":{"Character.isLetter":[[0,17]]}}},{"text":"createNamedQuery() expects the name of a named query as its first argument","label":{"api":{"createNamedQuery()":[[0,17]]}}},{"text":"Use createQuery() instead","label":{"api":{"createQuery()":[[4,16]]}}},{"text":"A DataSource has 2 methods to get a Connection","label":{"api":{"DataSource":[[2,11]],"Connection":[[36,45]]}}},{"text":"It seems that your jpa implementation uses DataSource.getConnection(String username, String password) if you provide the credentials via properties","label":{"api":{"DataSource.getConnection(String username, String password)":[[43,100]]}}},{"text":"In java, if you try to read from a stream that's at end-of-file, then you'll get an EOFException","label":{"api":{"EOFException":[[84,95]]}}},{"text":"Having said that, if you're reading from a stream connected to a running program, then you won't get an EOFException just because the other program is idle","label":{"api":{"EOFException":[[104,115]]}}},{"text":"You would only get an EOFException if the other program has exited, or if it explicitly closes its output stream (that you are reading from)","label":{"api":{"EOFException":[[22,33]]}}},{"text":"You should consider using ScheduledExecutorService method schedule to delay execution of task to specific point in time","label":{"api":{"ScheduledExecutorService":[[26,49]]}}},{"text":"You have a wrong format for a year in a SimpleDateFormat","label":{"api":{"SimpleDateFormat":[[40,55]]}}},{"text":"Add a PreparedStatement.executeQuery() call","label":{"api":{"PreparedStatement.executeQuery()":[[6,37]]}}},{"text":"And fetch the results from the returned ResultSet","label":{"api":{"ResultSet":[[40,48]]}}},{"text":"As @Jon Skeet pointed out, the declaration of ResultSet in Java 7 is updated to","label":{"api":{"ResultSet":[[46,54]]}}},{"text":"And this comes from the DatagramSocket.receive() JavaDoc","label":{"api":{"DatagramSocket.receive()":[[24,47]]}}},{"text":"You need to create an instance of XPathVariableResolver and attach it to your XPath instance","label":{"api":{"XPathVariableResolver":[[34,54]],"XPath":[[78,82]]}}},{"text":"Only Android1 and Javacard API use a blank IV, which is non-conforming to the Java Crypto spec, which states","label":{"api":{"Crypto":[[83,88]]}}},{"text":"Look up the documentation of the AffineTransform class as well as any number of sources on Wolfram MathWorld or Wikipedia (e.g","label":{"api":{"AffineTransform":[[33,47]]}}},{"text":"In Java, your sprite will probably be rendered in a rotated frame using the AffineTransform class, so if you apply your transformations carefully, you may not even have to do any extra math yourself to get the position of the trailing point","label":{"api":{"AffineTransform":[[76,90]]}}},{"text":"According to this http://docs.oracle.com/javase/7/docs/api/java/io/PrintWriter.html the PrintWriter method print(int i) prints an integer so I'm confused","label":{"api":{"PrintWriter":[[88,98]],"print(int i)":[[107,118]]}}},{"text":"In Java the SocketFactory creates Sockets (http://docs.oracle.com/javase/7/docs/api/javax/net/SocketFactory.html)","label":{"api":{"SocketFactory":[[12,24]],"Sockets":[[34,40]]}}},{"text":"Have a look at these characters","label":{"api":{}}},{"text":"You need single quotes around a to make it a character constant, and charAt to get the specific character of the string, like this","label":{"api":{"charAt":[[69,74]]}}},{"text":"Most of Date is actually deprecated, it has been superseded by Calendar","label":{"api":{"Date":[[8,11]],"Calendar":[[63,70]]}}},{"text":"Please read the renameTo java doc carefully","label":{"api":{"renameTo":[[16,23]]}}},{"text":"It is just a indicator to the renameTo() method about the destination file on your system","label":{"api":{"renameTo()":[[30,39]]}}},{"text":"File documentation clearly says that the file object is abstract representation of the file or directory (the actual file may or may not exist)","label":{"api":{"File":[[0,3]],"file":[[41,44]]}}},{"text":"String.replaceFirst will do the job","label":{"api":{"String.replaceFirst":[[0,18]]}}},{"text":"I would go for an ScheduledExecutorService","label":{"api":{"ScheduledExecutorService":[[18,41]]}}},{"text":"See the Java docs for regular expression patterns","label":{"api":{}}},{"text":"You can cast the component returned by getTableCellRendererComponent() call as JComponent and then set the border as you wish","label":{"api":{"getTableCellRendererComponent()":[[39,69]],"JComponent":[[79,88]]}}},{"text":"If you want to wait for the updater.jar process to finish (or kill it after a timeout), have a look at Process.waitFor()","label":{"api":{"Process.waitFor()":[[103,119]]}}},{"text":"Note that now we are using String#contains","label":{"api":{"String#contains":[[27,41]]}}},{"text":"You can send key events by using the Robot class","label":{"api":{"Robot":[[37,41]]}}},{"text":"You could use a List in the first place, which provides an indexOf() method","label":{"api":{"List":[[16,19]],"indexOf()":[[59,67]]}}},{"text":"You could keep the array sorted and use Arrays.binarySearch() (although perhaps this is overkill)","label":{"api":{"Arrays.binarySearch()":[[40,60]]}}},{"text":"Guava, for example, has Chars.indexOf()","label":{"api":{"Chars.indexOf()":[[24,38]]}}},{"text":"Apache has ArrayUtils.indexOf() (which apparently deals better with null inputs)","label":{"api":{"ArrayUtils.indexOf()":[[11,30]]}}},{"text":"If you want to convert a byte array to an array of 16-bit values, use ByteBuffer to convert it to a short array","label":{"api":{"ByteBuffer":[[70,79]]}}},{"text":"In general, if you want to append bytes to a byte array, you should use a ByteBuffer","label":{"api":{"ByteBuffer":[[74,83]]}}},{"text":"launched using JWS, specifically the DownloadServiceListener","label":{"api":{"JWS":[[15,17]],"DownloadServiceListener":[[37,59]]}}},{"text":"You can easily use String.contains method to check if a string contains the patter","label":{"api":{"String.contains":[[19,33]]}}},{"text":"If I understand you correctly, you can use Integer.toHexString(i), or, for a more generic solution, Integer.toString(i, radix)","label":{"api":{"Integer.toHexString(i)":[[43,64]],"Integer.toString(i, radix)":[[100,125]]}}},{"text":"By using the class ObjectOutputStream, you can write objects to a file","label":{"api":{"ObjectOutputStream":[[19,36]]}}},{"text":"It converts the objects into a format which can then later be read with the class ObjectInputStream","label":{"api":{"ObjectInputStream":[[82,98]]}}},{"text":"You will want to use the FileInputStream.skip method to seek to the point you want and then begin reading from that point","label":{"api":{"FileInputStream.skip":[[25,44]]}}},{"text":"If you do this in Java, you might consider composing your data points to a Path2D","label":{"api":{"Path2D":[[75,80]]}}},{"text":"You might have to disable stroke control, though","label":{"api":{}}},{"text":"If you don't want to replace anything, you can use Number and NumberFormat with Locale#GERMAN","label":{"api":{"Number":[[51,56]],"NumberFormat":[[62,73]],"Locale#GERMAN":[[80,92]]}}},{"text":"You should use the appropriate NumberFormat according to your locale","label":{"api":{"NumberFormat":[[31,42]]}}},{"text":"You can send/receive any kind of object with the ObjectInputStream/ObjectOutputStream as long as it is serializable","label":{"api":{"ObjectInputStream":[[49,65]],"ObjectOutputStream":[[67,84]],"serializable":[[103,114]]}}},{"text":"Lists and Maps are already serializable","label":{"api":{"List":[[0,3]],"Map":[[10,12]],"serializable":[[27,38]]}}},{"text":"You could save the instance to file using ObjectOutputStream and then read and instatiate it with ObjectInputStream","label":{"api":{"ObjectOutputStream":[[42,59]],"ObjectInputStream":[[98,114]]}}},{"text":"I would choose the more general ObjectOutputStream which allows you to send objects implementing the Serializable interface (your scenario already satisfy this constraint)","label":{"api":{"ObjectOutputStream":[[32,49]],"Serializable":[[101,112]]}}},{"text":"Otherwise it will call the Object#toString() method","label":{"api":{"Object#toString()":[[27,43]]}}},{"text":"You should consider using Calendar to parse such time strings","label":{"api":{"Calendar":[[26,33]]}}},{"text":"If you worry about performance, ThreadLocal is your friend","label":{"api":{"ThreadLocal":[[32,42]]}}},{"text":"Usually you would do that in a Filter and wrap the request in a HttpServletRequestWrapper","label":{"api":{"Filter":[[31,36]],"HttpServletRequestWrapper":[[64,88]]}}},{"text":"In particular, foreach syntax makes use of an iterator via ArrayList#iterator(), and the docs for ArrayList say","label":{"api":{"iterator":[[46,53]],"ArrayList#iterator()":[[59,78]],"ArrayList":[[98,106]]}}},{"text":"The iterators returned by this class's iterator and listIterator methods are fail-fast","label":{"api":{"iterator":[[4,11],[39,46]],"listIterator":[[52,63]]}}},{"text":"if the list is structurally modified at any time after the iterator is created, in any way except through the iterator's own remove or add methods, the iterator will throw a ConcurrentModificationException","label":{"api":{"iterator":[[59,66],[110,117],[152,159]],"remove":[[125,130]],"add":[[135,137]],"ConcurrentModificationException":[[174,204]]}}},{"text":"Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future","label":{"api":{"iterator":[[50,57]]}}},{"text":"Instead of using a FlowLayout, which lays out items left to right and wraps appropriately, you can use a BoxLayout, which allows you to specify laying out items either horizontally or vertically","label":{"api":{"FlowLayout":[[19,28]],"BoxLayout":[[105,113]]}}},{"text":"You need compare String with help of method equals()","label":{"api":{"String":[[17,22]],"equals()":[[44,51]]}}},{"text":"From the Serializable documentation","label":{"api":{"Serializable":[[9,20]]}}},{"text":"When traversing a graph, an object may be encountered that does not support the Serializable interface","label":{"api":{"Serializable":[[80,91]]}}},{"text":"In this case the NotSerializableException will be thrown and will identify the class of the non-serializable object","label":{"api":{"NotSerializableException":[[17,40]]}}},{"text":"So yes, all objects referenced by the vector, directly and indirectly, will need to be Serializable, unless of course they're marked as transient","label":{"api":{"Serializable":[[87,98]]}}},{"text":"Anything being serialized, including all classes referred to by fields (instance variables), must implement Serializable, or the field must be transient","label":{"api":{"Serializable":[[108,119]]}}},{"text":"In your case, the user defined class must implement Serializable, and have fields whose type is Serializable","label":{"api":{"Serializable":[[52,63],[96,107]]}}},{"text":"This applies recursively, so fields of the class of the fields must also be Serializable, etc","label":{"api":{"Serializable":[[76,87]]}}},{"text":"From the documentation of LinkedList","label":{"api":{"LinkedList":[[26,35]]}}},{"text":"The HashSet class has an add(Object o) method, which is not inherited from another class","label":{"api":{"HashSet":[[4,10]],"add(Object o)":[[25,37]]}}},{"text":"In other words, if two objects are equal, then the second object will not be added and the HashSet will remain the same","label":{"api":{"HashSet":[[91,97]]}}},{"text":"As the example above clearly shows, HashSet was able to add two elements where e.equals(e2)","label":{"api":{"HashSet":[[36,42]],"e.equals(e2)":[[79,90]]}}},{"text":"getType returns a class so you must compare it with a Class","label":{"api":{"getType":[[0,6]],"Class":[[54,58]]}}},{"text":"If the HttpOnly cookies aren't there, you may have to read the contents of the URL directly (e.g., via URLConnection or similar) before passing them on to JSoup.parse, and look for the cookie headers in that stream","label":{"api":{"URLConnection":[[103,115]],"JSoup.parse":[[155,165]]}}},{"text":"My guess is that you are running your executeScript call before your document is loaded","label":{"api":{"executeScript":[[38,50]]}}},{"text":"To know when a document is loaded, you can add a listener on the document property or the WebEngine loadworker state property (for a SUCCEEDED state), you can see an example of the loadworker solution in the WebEngine javadoc","label":{"api":{"WebEngine":[[90,98],[208,216]],"SUCCEEDED":[[133,141]]}}},{"text":"In this case, you can simply use Scanner with regular expressions that matches all the strings literals..","label":{"api":{"Scanner":[[33,39]]}}},{"text":"String has a toCharArray() method that will give you what you want","label":{"api":{"String":[[0,5]],"toCharArray()":[[13,25]]}}},{"text":"If you don't mind to use 3rd party libraries, i recommend to use JXErrorPane by swingX otherwise you can use a simple JOptionPane that is very powerful and customizable","label":{"api":{"JXErrorPane":[[65,75]],"swingX":[[80,85]],"JOptionPane":[[118,128]]}}},{"text":"See APIs for reference","label":{"api":{}}},{"text":"write writes the content only to the InputStream","label":{"api":{"write":[[0,4]],"InputStream":[[37,47]]}}},{"text":"Use println to send an additional newline character to correspond to the readLine statement on the server","label":{"api":{"println":[[4,10]],"readLine":[[73,80]]}}},{"text":"The Thread class defines an interrupt method","label":{"api":{"Thread":[[4,9]],"interrupt":[[28,36]]}}}]