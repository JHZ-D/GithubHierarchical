[{"text":"It contains the sequence field of type JAXBElement","label":{"api":{"JAXBElement":[[39,49]]}}},{"text":"JAXBElement is a third-party class (standard API, actually), which is in essence a pure value class, but it for some reason does not implement hashCode and equals methods","label":{"api":{"JAXBElement":[[0,10]],"hashCode":[[143,150]],"equals":[[156,161]]}}},{"text":"But JAXBElement stands in the way","label":{"api":{"JAXBElement":[[4,14]]}}},{"text":"Since I can't extend JAXBElement, my idea was to integrate hashCode and equals into the aggregating class (SingleElementRefType here)","label":{"api":{"JAXBElement":[[21,31]],"hashCode":[[59,66]],"equals":[[72,77]],"SingleElementRefType":[[107,126]]}}},{"text":"If so, you may want to use an ArrayList","label":{"api":{"ArrayList":[[30,38]]}}},{"text":"For Java 7, you can call entrySet() to get a Set<Map.Entry<String,ArrayList<Integer>>> - which you can then use to populate something like an ArrayList<Map.Entry<String,ArrayList<Integer>>> which you can sort with a custom comparator","label":{"api":{"entrySet()":[[25,34]],"Set<Map.Entry<String,ArrayList<Integer>>>":[[45,85]],"ArrayList<Map.Entry<String,ArrayList<Integer>>>":[[142,188]]}}},{"text":"Create an implementation of Comparator that compares two players by comparing the scores present in the map","label":{"api":{"Comparator":[[28,37]]}}},{"text":"(Integer.compare() might be helpful for this.) Then, create a new list of all the players you want to sort","label":{"api":{"Integer.compare()":[[1,17]]}}},{"text":"Finally, use Collections.sort() to sort this list","label":{"api":{"Collections.sort()":[[13,30]]}}},{"text":"Alternatively, use a mutable integer type, like AtomicInteger (or write your own)","label":{"api":{"AtomicInteger":[[48,60]]}}},{"text":"Or you could use Scanner.hasNextInt() to detect whether valid int was entered instead of using try-catch","label":{"api":{"Scanner.hasNextInt()":[[17,36]]}}},{"text":"Every Java class is a subclass of Object class","label":{"api":{"Object":[[34,39]]}}},{"text":"Thus, by inheritance, all the operations available in Object class are available in every Java class","label":{"api":{"Object":[[54,59]]}}},{"text":"You can use Robot.createScreenCapture() to take a screenshot","label":{"api":{"Robot.createScreenCapture()":[[12,38]]}}},{"text":"First, your understanding is correct; no amount of Thread.sleep() (and by the way, since Java 5 you should really be using TimeUnit instead, as in TimeUnit.SECONDS.sleep(2L)) will guarantee in-order execution; you cannot guarantee when the OS will schedule this or that thread","label":{"api":{"Thread.sleep()":[[51,64]],"TimeUnit":[[123,130]],"TimeUnit.SECONDS.sleep(2L)":[[147,172]]}}},{"text":"Another example is a Semaphore","label":{"api":{"Semaphore":[[21,29]]}}},{"text":"The closest you can get is to use reflection; if your method takes an instance of type Field, it can both examine the declared type of the field, and set the field to a value of its choosing","label":{"api":{"Field":[[87,91]]}}},{"text":"According to the documentation of SafeVarargs, the @SafeVarargs annotation can be applied only to constructors or variable arity methods that are either static or final","label":{"api":{"SafeVarargs":[[34,44]],"@SafeVarargs":[[51,62]]}}},{"text":"The best way to do this is by implementing the Comparator interface","label":{"api":{"Comparator":[[47,56]]}}},{"text":"When you decide how you plan to compare the strings, you can use the utility methods in Arrays class","label":{"api":{"Arrays":[[88,93]]}}},{"text":"It's much easier to create a data type, say Player which holds the name and score and then implement the Comparable interface and sort based on that (or just use your custom sort to sort on the score values of the Player object)","label":{"api":{"Player":[[44,49],[214,219]],"Comparable":[[105,114]]}}},{"text":"And this is a possible scenario, because as noted here https://docs.oracle.com/javase/7/docs/api/java/util/Hashtable.html \"The exact details as to when and whether the rehash method is invoked are implementation-dependent\"","label":{"api":{}}},{"text":"According to the documentation on polygon you create a polygon with Polygon(double..","label":{"api":{"polygon":[[34,40],[55,61]],"Polygon(double..":[[68,83]]}}},{"text":"javax.ws.rs.core.UriBuilder or org.apache.http.client.utils.URIBuilder or something similar","label":{"api":{"javax.ws.rs.core.UriBuilder":[[0,26]],"org.apache.http.client.utils.URIBuilder":[[31,69]]}}},{"text":"java.net.URL provides a constructor wherein you can append a String to a URL","label":{"api":{"java.net.URL":[[0,11]],"String":[[61,66]],"URL":[[73,75]]}}},{"text":"You can store the connection details using java.util.prefs.Preferences, as suggested here, or a javax.jnlp.PersistenceService, as suggested here","label":{"api":{"java.util.prefs.Preferences":[[43,69]],"javax.jnlp.PersistenceService":[[96,124]]}}},{"text":"The javadoc of the TreeMap.entrySet method states","label":{"api":{"TreeMap.entrySet":[[19,34]]}}},{"text":"NIO ByteBuffers have a limit and a capacity","label":{"api":{"ByteBuffers":[[4,14]]}}},{"text":"You can try with DecimalFormat","label":{"api":{"DecimalFormat":[[17,29]]}}},{"text":"The method getRequestedSessionId (and isRequestedSessionIdValid) is declared on the HttpServletRequest interface","label":{"api":{"getRequestedSessionId":[[11,31]],"isRequestedSessionIdValid":[[38,62]],"HttpServletRequest":[[84,101]]}}},{"text":"You're trying to invoke the method on a reference of type ServletRequest","label":{"api":{"ServletRequest":[[58,71]]}}},{"text":"If you know the referenced object will really be a HttpServletRequest, cast it in order to invoke the method","label":{"api":{"HttpServletRequest":[[51,68]]}}},{"text":"( http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameterMap() )","label":{"api":{}}},{"text":"If you use a J2EE 7 compliant application server, then this should be relatively easy using the Java EE concurrency API, otherwise you should be able to use the \"traditional\" java.util.concurrent APIs, even though the J2EE spec doesn't encourage it","label":{"api":{"concurrency":[[104,114]],"java.util.concurrent":[[175,194]]}}},{"text":"Or as a cleaner alternative, get an array of all characters with String.toCharArray()","label":{"api":{"String.toCharArray()":[[65,84]]}}},{"text":"The clone method on Object, which creates an exact copy of an object, is declared as","label":{"api":{"clone":[[4,8]]}}},{"text":"You should use BigInteger or BigDecimal for this purpose","label":{"api":{"BigInteger":[[15,24]],"BigDecimal":[[29,38]]}}},{"text":"Don't use Statement it can lead to SQLInjection, instead use PreparedStatement as follows","label":{"api":{"Statement":[[10,18]],"PreparedStatement":[[61,77]]}}},{"text":"Have a look at the declaration of the @Resource annotation","label":{"api":{"@Resource":[[38,46]]}}},{"text":"It includes a shareable attribute that allows you to specify connection sharing behaviour","label":{"api":{"shareable":[[14,22]]}}},{"text":"On Java 9 or later, Map.entry can be used, so long as you know that neither the key nor value will be null","label":{"api":{"Map.entry":[[20,28]]}}},{"text":"If either value could legitimately be null, AbstractMap.SimpleEntry (as suggested in another answer) or AbstractMap.SimpleImmutableEntry would be the way to go","label":{"api":{"AbstractMap.SimpleEntry":[[44,66]],"AbstractMap.SimpleImmutableEntry":[[104,135]]}}},{"text":"You can use getHSBColor() instead and hard-code the saturation and brightness to keep them all the same, just randomizing the color","label":{"api":{"getHSBColor()":[[12,24]]}}},{"text":"What you are looking for is java.lang.Class.isInstance","label":{"api":{"java.lang.Class.isInstance":[[28,53]]}}},{"text":"An easy way to achieve what you want is to use a BufferedReader to read lines from a file","label":{"api":{"BufferedReader":[[49,62]]}}},{"text":"You could also make a new random number generator, and call nextInt(52) on it","label":{"api":{"nextInt(52)":[[60,70]]}}},{"text":"If you want to use one connection per message, effectively signalling the end of the message via close(), you should use setSoLinger() on that side which is closing the connection","label":{"api":{"close()":[[97,103]],"setSoLinger()":[[121,133]]}}},{"text":"If you just want your object lifetime to be managed to references to it other than as a listener then you could change your collection of listeners to be a 'Weak' collection like WeakHashMap","label":{"api":{"WeakHashMap":[[179,189]]}}},{"text":"Such a collection uses Weak References to avoid keeping objects alive after all other references have been cleared","label":{"api":{"Weak References":[[23,37]]}}},{"text":"A Vector  may contain objects of different types","label":{"api":{"Vector":[[2,7]]}}},{"text":"Does calling the toArray() method return an Object[] array or an array of specific objects (Eg","label":{"api":{"toArray()":[[17,25]],"Object[]":[[44,51]]}}},{"text":"I would then consider embedding the JavaFX aspects in Swing using a JFXPanel, and basically make it a Swing/AWT application with some JavaFX embedded","label":{"api":{"JFXPanel":[[68,75]]}}},{"text":"Have you implemented Comparable interface in SortingUser class","label":{"api":{"Comparable":[[21,30]],"SortingUser":[[45,55]]}}},{"text":"Collections.sort() will not sort the objects, if you haven't implemented Comparable in your class","label":{"api":{"Collections.sort()":[[0,17]],"Comparable":[[73,82]]}}},{"text":"ListIterator<T> interface provides a set(T) method, but it locks you into using a List<T>, for which you already have a solution","label":{"api":{"ListIterator<T> interface":[[0,24]],"set(T)":[[37,42]],"List<T>":[[82,88]]}}},{"text":"I think you can use Integer.parseInt(String)","label":{"api":{"Integer.parseInt(String)":[[20,43]]}}},{"text":"You may be looking for replaceRange(), which \"Simply does a delete if the new string is null or empty.\" Then you can insert() the new text at position 0","label":{"api":{"replaceRange()":[[23,36]],"insert()":[[117,124]]}}},{"text":"Both replaceRange() and setText() correctly clear the text area when supplied with a null or empty String","label":{"api":{"replaceRange()":[[5,18]],"setText()":[[24,32]]}}},{"text":"HH is the date format for 24-hour dates, and you haven't passed an am/pm marker placeholder in the date format string","label":{"api":{}}},{"text":"Java String Class does have a contains method","label":{"api":{"String":[[5,10]],"contains":[[30,37]]}}},{"text":"https://docs.oracle.com/javase/7/docs/api/java/nio/Buffer.html ) to assure that your float array sizes are BASED on your phone's cpu architecture(native order) and not on jvm fixed primitive sizes","label":{"api":{}}},{"text":"Maybe here it becomes more obvious that you are returning the same stream instance each time you call get on your supplier (and hence the exception thrown on the second call because findFirst is a short-circuiting terminal operation)","label":{"api":{"stream":[[67,72]]}}},{"text":"Also, in Java you should use DatatypeConverter.parseHexBinary(), or similar, to convert hex into bytes","label":{"api":{"DatatypeConverter.parseHexBinary()":[[29,62]]}}},{"text":"The ArrayList has a constructor to do this","label":{"api":{"ArrayList":[[4,12]]}}},{"text":"Have a look at the ThreadLocalRandom class from Java","label":{"api":{"ThreadLocalRandom":[[19,35]]}}},{"text":"This is what the Desktop class and the Runtime class are meant for","label":{"api":{"Desktop":[[17,23]],"Runtime":[[39,45]]}}},{"text":"Runtime class is more to open an application and passing parameters to this application","label":{"api":{"Runtime":[[0,6]]}}},{"text":"You can use a @NamedNativeQuery to uniquely identify an SQLQuery","label":{"api":{"@NamedNativeQuery":[[14,30]]}}},{"text":"There is a good chance that your Spring Data generated JPQL query is not working because your column definition is missing the @Temporal annotation","label":{"api":{"@Temporal":[[127,135]]}}},{"text":"Alternatively, the column has been specified as a java.sql.Date","label":{"api":{"java.sql.Date":[[50,62]]}}},{"text":"Should I implements Runnable and use Thread#sleep() in parallel with math based on System#nanoTime() or should I extends Thread and use an ScheduledExecutorService","label":{"api":{"Runnable":[[20,27]],"Thread#sleep()":[[37,50]],"System#nanoTime()":[[83,99]],"Thread":[[121,126]],"ScheduledExecutorService":[[139,162]]}}},{"text":"This would mean that just using Thread#sleep() by itself would not be a proper solution, I know I can get pretty close to this effect by calculating the amount of milliseconds to sleep() using a start/end/elapsed variable and using nanoTime() for reference, but is this the \"Correct\" way to do it","label":{"api":{"Thread#sleep()":[[32,45]],"sleep()":[[179,185]],"nanoTime()":[[232,241]]}}},{"text":"new ArrayList(49) will only set the initial capacity of your ArrayList before it has to resize","label":{"api":{"ArrayList(49)":[[4,16]],"ArrayList":[[61,69]]}}},{"text":"The explanation is given by the class documentation for java.util.Scanner","label":{"api":{"java.util.Scanner":[[56,72]]}}},{"text":"The most recent IOException thrown by the underlying readable can be retrieved via the ioException() method","label":{"api":{"IOException":[[16,26]],"ioException()":[[87,99]]}}},{"text":"The ioException() method makes that exception available if you want/need it","label":{"api":{"ioException()":[[4,16]]}}},{"text":"The getClass() is a method defined in java.lang.Object, and methods can only be called on instances","label":{"api":{"getClass()":[[4,13]],"java.lang.Object":[[38,53]]}}},{"text":"And finally qutoing from the javadoc of Class.forName()","label":{"api":{"Class.forName()":[[40,54]]}}},{"text":"So Class.forName() only works for classes and interfaces and not for primitive types","label":{"api":{"Class.forName()":[[3,17]]}}},{"text":"Using javax.ws.rs.core.UriBuilder from JAX-RS 2.0","label":{"api":{"javax.ws.rs.core.UriBuilder":[[6,32]]}}},{"text":"See also Integer.numberOfLeadingZeros(int), which would reduce the code to a one-liner","label":{"api":{"Integer.numberOfLeadingZeros(int)":[[9,41]]}}},{"text":"Check SimpleDateFormat JavaDoc for details","label":{"api":{"SimpleDateFormat":[[6,21]]}}},{"text":"Thread.join can fit this","label":{"api":{"Thread.join":[[0,10]]}}},{"text":"Javadoc of getDeclaredMethod (emphasis mine)","label":{"api":{"getDeclaredMethod":[[11,27]]}}},{"text":"Javadoc of invoke","label":{"api":{"invoke":[[11,16]]}}},{"text":"Javadoc of setAccessible (emphasis mine)","label":{"api":{"setAccessible":[[11,23]]}}},{"text":"If you want to implement code for cleaning up a resource, when client code has forgotten to call close or dispose or whatever you provide for explicit resource management (which you should if there are associated native resources) can be done using a PhantomReference to the instance and a ReferenceQueue","label":{"api":{"PhantomReference":[[251,266]],"ReferenceQueue":[[290,303]]}}},{"text":"The advantage is that you have control over when to poll the queue and perform the cleanup and you may even opt-out the post-mortem cleanup by letting the PhantomReference go out of scope (it will be ordinarily collected and not enqueued) in the case that the client code did not forget to call close (it’s strongly recommended to implemented AutoClosable to allow using “try with resources”)","label":{"api":{"PhantomReference":[[155,170]],"AutoClosable":[[343,354]]}}},{"text":"There is a class called EntityManagerFactoryUtils from where you can obtain the current transaction's entity manager based on the EntityManagerFactory you configured in your JpaTransactionManager","label":{"api":{"EntityManagerFactoryUtils":[[24,48]],"EntityManagerFactory":[[130,149]],"JpaTransactionManager":[[174,194]]}}},{"text":"If you use the overload of split that takes an int parameter and pass a negative value, trailing blank items would not be removed from the resultant array","label":{"api":{"split":[[27,31]]}}},{"text":"For a full reference of the modifiers that are allowed in the date pattern, have a look at this web site","label":{"api":{}}},{"text":"If you want to get the JFrame, call getTopLevelAncestor","label":{"api":{"JFrame":[[23,28]],"getTopLevelAncestor":[[36,54]]}}},{"text":"If you wish to implement Future<V> you must implement the complete contract - including","label":{"api":{"Future<V>":[[25,33]]}}},{"text":"You can use Pattern#CASE_INSENSITIVE and implement your own method","label":{"api":{"Pattern#CASE_INSENSITIVE":[[12,35]]}}},{"text":"The replaceFirst() method will let you do this if you use it in a loop","label":{"api":{"replaceFirst()":[[4,17]]}}},{"text":"If you loop over the this statement, each invocation of replaceFirst() will replace the first group of digits with whatever you provide as a second argument","label":{"api":{"replaceFirst()":[[56,69]]}}},{"text":"TreeMap has a constructor that takes a Comparator as an argument","label":{"api":{"TreeMap":[[0,6]],"Comparator":[[39,48]]}}},{"text":"You could use a List","label":{"api":{"List":[[16,19]]}}},{"text":"Use this Swing Timer instead","label":{"api":{"Timer":[[15,19]]}}},{"text":"@XmlNS you already mentioned","label":{"api":{"@XmlNS":[[0,5]]}}},{"text":"For example, Console and JPasswordField return character arrays from password input, and PBEKey and KeyStore require a char[] for password-based encryption","label":{"api":{"Console":[[13,19]],"JPasswordField":[[25,38]],"PBEKey":[[89,94]],"KeyStore":[[100,107]]}}},{"text":"Use a char[] to store passwords, and write '\\0' to the array as soon as the password is no longer necessary","label":{"api":{}}},{"text":"java.util.List boolean add(E e)","label":{"api":{"java.util.List":[[0,13]],"add(E e)":[[23,30]]}}},{"text":"Use Files.createTempFile() to create a temporary JAR file somewhere","label":{"api":{"Files.createTempFile()":[[4,25]]}}},{"text":"Use Files.copy() to copy from the resource stream to the temporary file","label":{"api":{"Files.copy()":[[4,15]]}}},{"text":"Use File.deleteOnExit() to make sure that the temporary file will get cleaned up when the main (host) application terminates","label":{"api":{"File.deleteOnExit()":[[4,22]]}}},{"text":"params in your case is not a JSONObject, but it is a JSONArray","label":{"api":{"JSONObject":[[29,38]],"JSONArray":[[53,61]]}}},{"text":"So all you need to do is first fetch the JSONArray and then fetch the first element of that array as the JSONObject","label":{"api":{"JSONArray":[[41,49]],"JSONObject":[[105,114]]}}},{"text":"You should use the intValue() or method (or any of its other versions, if you want e.g","label":{"api":{"intValue()":[[19,28]]}}},{"text":"JFileChooser will return you the selected File, which will the folder that the user selected, you need to use something like File#listFiles which will return an array of all the Files within the selected folder","label":{"api":{"JFileChooser":[[0,11]],"File#listFiles":[[125,138]]}}},{"text":"Oracle documentation says \"You must specify the parameter's SQL type.\" for setNull","label":{"api":{"setNull":[[75,81]]}}},{"text":"The formatter has a withZone() method that can be called to provide the missing time-zone","label":{"api":{"withZone()":[[20,29]]}}},{"text":"String#replaceAll accepts a regex, if I understood you correctly, you can use","label":{"api":{"String#replaceAll":[[0,16]]}}},{"text":"There are Charset constants in StandardCharsets, but only for those standard charsets that are available with every JavaSE installation (StandardCharsets.UTF_8 and ISO_8859_1 for instance)","label":{"api":{"Charset":[[10,16]],"StandardCharsets":[[31,46]],"StandardCharsets.UTF_8":[[137,158]],"ISO_8859_1":[[164,173]]}}},{"text":"But you can test the availability of a Charset","label":{"api":{"Charset":[[39,45]]}}},{"text":"you might considering using the Calendar class, as most Date methods seem to be deprecated","label":{"api":{"Calendar":[[32,39]],"Date":[[56,59]]}}},{"text":"Ordering implements the java.util.Comparator interface so you can use it like","label":{"api":{"java.util.Comparator":[[24,43]]}}},{"text":"Take a look at the docs for Pattern, in the section about escaping characters","label":{"api":{"Pattern":[[28,34]]}}},{"text":"Behind the curtains, split uses Pattern","label":{"api":{"split":[[21,25]],"Pattern":[[32,38]]}}},{"text":"The database layer worked just fine; the problem occured when the system attempted to re-insert the same value into the database by using a ByteArrayInputStream","label":{"api":{"ByteArrayInputStream":[[140,159]]}}},{"text":"The ByteArrayInputStream was being populated by performing a getBytes() in the String that contained the foo_name","label":{"api":{"ByteArrayInputStream":[[4,23]],"getBytes()":[[61,70]]}}},{"text":"A PriorityQueue is always sorted, by the way","label":{"api":{"PriorityQueue":[[2,14]]}}},{"text":"In Java write a document tree traversal routine to search for things","label":{"api":{}}},{"text":"See if you can do something like inject some JQuery/JavaScript code into the document which makes the document text searchable, possibly communicating with the modified document over the WebView Java/JavaScript bridge (this is probably a fairly fragile solution)","label":{"api":{"WebView":[[187,193]]}}},{"text":"If you use something like a StringBuilder, you can see all the output","label":{"api":{"StringBuilder":[[28,40]]}}},{"text":"The usage of Connection#createClob method and similars should be used by your dao layer only","label":{"api":{"Connection#createClob":[[13,33]]}}},{"text":"For the JComboBox, you've provided an Array of Strings","label":{"api":{"JComboBox":[[8,16]]}}},{"text":"For the JSpinner, since you've stored it as a SpinnerDateModel, it's up to you whether you want a Date out or a String out","label":{"api":{"JSpinner":[[8,15]],"SpinnerDateModel":[[46,61]],"Date":[[98,101]],"String":[[112,117]]}}},{"text":"Connection itself is an interface (javadoc) that all of the concrete connection classes implement","label":{"api":{"Connection":[[0,9]],"connection":[[69,78]]}}},{"text":"The Driver classes register themselves with the Driver when they are loaded by the class loader","label":{"api":{"Driver":[[4,9],[48,53]]}}},{"text":"When the driver goes through asking \"who responds to this URL\" it invokes the acceptsURL method in each driver and the one that responds gives it a connection back when called with connect","label":{"api":{"acceptsURL":[[78,87]],"connection":[[148,157]],"connect":[[181,187]]}}},{"text":"All of the ResultSets and Statements and Connections (and Drivers) work the same way from your point of view, though how they connect to the cursor and database behind the scenes may be different","label":{"api":{"ResultSets":[[11,20]],"Statements":[[26,35]],"Connections":[[41,51]],"Drivers":[[58,64]]}}},{"text":"If you're using Java 8, you can use the new Stream API","label":{"api":{"Stream":[[44,49]]}}},{"text":"You don't assign a Random to an int -- you need to call nextInt, passing a int that gives the range between 0 and that bound minus 1","label":{"api":{"Random":[[19,24]],"nextInt":[[56,62]]}}},{"text":"Automatic line flushing is disabled with the constructor you used, so you need to call out.flush() to flush the stream to the file","label":{"api":{"out.flush()":[[87,97]]}}},{"text":"The documentation of the SwingWorker.done() method seems to be a bit wrong","label":{"api":{"SwingWorker.done()":[[25,42]]}}},{"text":"You can use CountDownLatch","label":{"api":{"CountDownLatch":[[12,25]]}}},{"text":"You can call join method on your thread with this call no other thread can execute until this thread completes its execution refer join method doc, I have written a sample code, in your case Thread1 can be from calculation1 and Thread2 can be in calculation2 method","label":{"api":{"join":[[13,16],[131,134]],"Thread1":[[191,197]],"calculation1":[[211,222]],"Thread2":[[228,234]],"calculation2":[[246,257]]}}},{"text":"Because hello() doesn't return a String, Object or any of the other types accepted by the various println methods defined in PrintStream","label":{"api":{"hello()":[[8,14]],"String":[[33,38]],"Object":[[41,46]],"println":[[98,104]],"PrintStream":[[125,135]]}}},{"text":"Now paintIcon has x, y parameters not width/height, which seems to be the error","label":{"api":{"paintIcon":[[4,12]]}}},{"text":"In general I somewhat dislike the paintIcon method, and would store the Image and do","label":{"api":{"paintIcon":[[34,42]],"Image":[[72,76]]}}},{"text":"However, if you want to do anything with the output or to know that it has completed, you'll have to add more code to check its state (check out the Process.waitFor() API) or to capture its output in Java (e.g","label":{"api":{"Process.waitFor()":[[149,165]]}}},{"text":"by capturing Standard out in a BufferedReader) - check Process.getInputStream() API","label":{"api":{"Process.getInputStream()":[[55,78]]}}},{"text":"After querying the table (which you have done), you need to extract the data from the ResultSet","label":{"api":{"ResultSet":[[86,94]]}}},{"text":"You can use Arrays.fill.Take a look at this response","label":{"api":{"Arrays.fill":[[12,22]]}}},{"text":"Executors.newSceduledThreadPool(int) is a factory method that returns a class that implements the ScheduledExecutorService interface","label":{"api":{"Executors.newSceduledThreadPool(int)":[[0,35]],"ScheduledExecutorService":[[98,121]]}}},{"text":"nextInt() (or most other nextXYZ methods, for that matter), throw an InputMismatchException if they encounter input that doesn't match their call (e.g., a letter in a nextInt call)","label":{"api":{"nextInt()":[[0,8]],"InputMismatchException":[[69,90]]}}},{"text":"You can use the Class object's isInstance method instead, for a runtime solution","label":{"api":{"Class":[[16,20]],"isInstance":[[31,40]]}}},{"text":"You can do this with java.lang.System.arraycopy()","label":{"api":{"java.lang.System.arraycopy()":[[21,48]]}}},{"text":"You should read up on the definition of deprecation","label":{"api":{}}},{"text":"Instead, loop through the character values and create the String with String#valueOf","label":{"api":{"String":[[58,63]],"String#valueOf":[[70,83]]}}},{"text":"Implement Iterable<Map.Entry<K, V>>","label":{"api":{"Iterable<Map.Entry<K, V>>":[[10,34]]}}},{"text":"This works because implementing Iterable allows the type to be used in a for-each loop","label":{"api":{"Iterable":[[32,39]]}}},{"text":"Try this using split api of String object as below","label":{"api":{"split":[[15,19]],"String":[[28,33]]}}},{"text":"Basically doubles are signed and 0/-1 will be evaluated as -0.0 instead of 0.0 by x1 or x2","label":{"api":{}}},{"text":"When using Collections.sort(List<T> list), the compiler requires that the type T must be comparable (<T extends Comparable<","label":{"api":{"Collections.sort(List<T> list)":[[11,40]],"comparable":[[89,98]]}}},{"text":"Either make the Person class be comparable (by implementing the Comparable interface), or provide a custom comparator using the overloaded sort method","label":{"api":{"Comparable":[[64,73]],"sort":[[139,142]]}}},{"text":"Use a Semaphore, they are very practical for these kind of things","label":{"api":{"Semaphore":[[6,14]]}}},{"text":"The example below shows how you can limit the number of requests running at the same time using a Semaphore","label":{"api":{"Semaphore":[[98,106]]}}},{"text":"For identifying characters you can use the following (Java Character)","label":{"api":{"Character":[[59,67]]}}},{"text":"The queryForObject(String, Class) method takes Class instance as its second parameter","label":{"api":{"queryForObject(String, Class)":[[4,32]],"Class":[[47,51]]}}},{"text":"One way to solve this is to reuse Character.compare to compare two chars","label":{"api":{"Character.compare":[[34,50]]}}},{"text":"Use a LookupOp, as shown in the examples cited here","label":{"api":{"LookupOp":[[6,13]]}}},{"text":"Use a PauseTransition","label":{"api":{"PauseTransition":[[6,20]]}}},{"text":"You can use Semaphore for these purposes","label":{"api":{"Semaphore":[[12,20]]}}},{"text":"JLabel has a setIcon method which you can use to set the image, pass it an ImageIcon, which can be created from an URL","label":{"api":{"JLabel":[[0,5]],"setIcon":[[13,19]],"ImageIcon":[[75,83]],"URL":[[115,117]]}}},{"text":"splitis a method in the String class, and inputs is an array of strings","label":{"api":{"split":[[0,4]],"String":[[24,29]],"strings":[[64,70]]}}},{"text":"Also, since you are splitting a string in a loop, you are creating a 2D array of strings, which means sep should be a String[][]","label":{"api":{"String[][]":[[118,127]]}}},{"text":"In more details, a Reader will use a CharsetDecoder; this decoder is configured so that unknown byte sequences are replaced; and the encoding used here likely replaces unknown byte sequences with character 0x00fd, hence your result","label":{"api":{"CharsetDecoder":[[37,50]]}}},{"text":"The Hash digest need to be done just once (see the doc)","label":{"api":{}}},{"text":"You may also want to take a look at the translate method of the Graphics object and see if that helps","label":{"api":{"translate":[[40,48]],"Graphics":[[64,71]]}}}]