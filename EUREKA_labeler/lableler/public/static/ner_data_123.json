[{"text":"Use, for instance, a ScheduledExecutorService","label":{"api":{"ScheduledExecutorService":[[21,44]]}}},{"text":"The Executors class is probably what you want to create one","label":{"api":{"Executors":[[4,12]]}}},{"text":"You would be better off using a Deque which is a double-ended queue so you can add/remove at either end and it will grow to fit your needs","label":{"api":{"Deque":[[32,36]]}}},{"text":"According to the javadoc, Map.values() returns a Collection<V>, which means that there is no guarantee that it will be List","label":{"api":{"Map.values()":[[26,37]],"Collection<V>":[[49,61]],"List":[[119,122]]}}},{"text":"Map.values() is supposed return a Collection","label":{"api":{"Map.values()":[[0,11]],"Collection":[[34,43]]}}},{"text":"You could for example use an implementation of javax.ws.rs.core.UriInfo","label":{"api":{"javax.ws.rs.core.UriInfo":[[47,70]]}}},{"text":"There are useful methods Math.nextUp() and Math.nextDown() which can help you to investigate this issue","label":{"api":{"Math.nextUp()":[[25,37]],"Math.nextDown()":[[43,57]]}}},{"text":"Ensure you access the database only via a javax.sql.DataSource definition from JNDI, and you are golden, as both sides, both the Application and the WebApp will have the same access patterns, techniques, rules, etc ..","label":{"api":{"javax.sql.DataSource":[[42,61]],"JNDI":[[79,82]]}}},{"text":"Your best option is probably to split your list into three sublists, iterate over the middle one, and merge the lists after you're done","label":{"api":{}}},{"text":"For a Hashtable (and HashMap) to store and retrieve keys properly, the key type must override hashCode and equals properly","label":{"api":{"Hashtable":[[6,14]],"HashMap":[[21,27]],"hashCode":[[94,101]],"equals":[[107,112]]}}},{"text":"You haven't overridden those methods, so the Hashtable can't find your keys","label":{"api":{"Hashtable":[[45,53]]}}},{"text":"As long as you match the requirements of the Comparator interface (http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html) your array will come out sorted correctly","label":{"api":{"Comparator":[[45,54]]}}},{"text":"The Predicate interface was introduced in Java 8, so you need to re-create it yourself","label":{"api":{"Predicate":[[4,12]]}}},{"text":"Such a thing doesn't exist in Java, but Java does contain the Void class","label":{"api":{"Void":[[62,65]]}}},{"text":"To compare minutes, though, you should use Calendar.MINUTE, too","label":{"api":{"Calendar.MINUTE":[[43,57]]}}},{"text":"You can use Class.asSubclass to do this","label":{"api":{"Class.asSubclass":[[12,27]]}}},{"text":"You can use JInternalFrame in place of jframe","label":{"api":{"JInternalFrame":[[12,25]]}}},{"text":"Why do not you use the Manifest class to process a MANIFEST file","label":{"api":{"Manifest":[[23,30]]}}},{"text":"After the Manifest is parsed, you can get the specific attributes you need (I guess Export-Package in your case)","label":{"api":{}}},{"text":"Consider using BigDecimal class, if you need precision","label":{"api":{"BigDecimal":[[15,24]]}}},{"text":"I have a problem with Polygon#contains(Point)","label":{"api":{"Polygon#contains(Point)":[[22,44]]}}},{"text":"Instead try directly getting the bytes with URL.openStream and then just convert the downloaded bytes to base64","label":{"api":{"URL.openStream":[[44,57]]}}},{"text":"As a side note, you can utilize existing Line2D class to draw lines","label":{"api":{"Line2D":[[41,46]]}}},{"text":"Why don't the treeMap.entrySet() and treeMap.keySet() methods return SortedSet","label":{"api":{"treeMap.entrySet()":[[14,31]],"treeMap.keySet()":[[37,52]],"SortedSet":[[69,77]]}}},{"text":"As per the API, a Set is defined as not having a particular ordering","label":{"api":{"Set":[[18,20]]}}},{"text":"You need to use a @MapKeyJoinColumn for that","label":{"api":{"@MapKeyJoinColumn":[[18,34]]}}},{"text":"The gist of what I am trying to do is, am trying to write tests for a class which down the stack makes a database call by creating a java Connection object","label":{"api":{"Connection":[[138,147]]}}},{"text":"I was wondering if I could use Guice or something else to somehow trick Class Four's method getConnection() to return a different connection (am creating an in-memory database using H2 just for testing)","label":{"api":{"Guice":[[31,35]],"Four":[[78,81]],"getConnection()":[[92,106]]}}},{"text":"The getConnection() is a private method","label":{"api":{"getConnection()":[[4,18]]}}},{"text":"The sorted list requirement is in order to feed the data into UI components (JSF) which take List as input and the values always need to be displayed in the same order (alphabetical order of description)","label":{"api":{"UI components (JSF)":[[62,80]],"List":[[93,96]]}}},{"text":"The first thing that came to mind was a TreeMap","label":{"api":{"TreeMap":[[40,46]]}}},{"text":"The map is declared as a SortedMap and implemented as a TreeMap","label":{"api":{"SortedMap":[[25,33]],"TreeMap":[[56,62]]}}},{"text":"I used to use just a List and that work fine with respect to ordering but a List does not provide an efficient interface for looking up a value by key and I now do have that requirement","label":{"api":{"List":[[21,24],[76,79]]}}},{"text":"If TreeMap is supposed to be a map in the ordered of item addition, why isn's TreeMap.values() in the same order","label":{"api":{"TreeMap":[[3,9]],"map":[[31,33]],"TreeMap.values()":[[78,93]]}}},{"text":"Will TreeMap do it for me if I use it differently or do I need an altogether different approach","label":{"api":{"TreeMap":[[5,11]]}}},{"text":"If you want insertion order, as davide said, you can use LinkedHashMap","label":{"api":{"LinkedHashMap":[[57,69]]}}},{"text":"Inside of EJBs you have to use the EJBContext (or the SessionContext)","label":{"api":{"EJBContext":[[35,44]],"SessionContext":[[54,67]]}}},{"text":"Take a look at java.sql.Timestamp","label":{"api":{"java.sql.Timestamp":[[15,32]]}}},{"text":"Follow the Scanner approach","label":{"api":{"Scanner":[[11,17]]}}},{"text":"An example of how Scanner works (applied to your question)","label":{"api":{"Scanner":[[18,24]]}}},{"text":"If in doubt, read the javadocs of the class in question","label":{"api":{}}},{"text":"The API documentation is very clear about this","label":{"api":{}}},{"text":"But if for a x/y raison you really want to use a JTextField you could use Integer's method to obtain the numeric value and then check (value > 0 && value <= 100) this value","label":{"api":{"JTextField":[[49,58]],"Integer":[[74,80]]}}},{"text":"According to the javadocs, truncatedTo() will try to preserve the time zone in the case of overlap, but atStartOfDay() will find the first occurrence of midnight","label":{"api":{"truncatedTo()":[[27,39]],"atStartOfDay()":[[104,117]]}}},{"text":"If you begin with a time after that transition, atStartOfDay() will return the first occurence of 12am, while truncatedTo() will return the second occurence","label":{"api":{"atStartOfDay()":[[48,61]],"truncatedTo()":[[110,122]]}}},{"text":"java.net.URI is a type in Java SE7","label":{"api":{"java.net.URI":[[0,11]]}}},{"text":"See also the Thread javadoc javadoc","label":{"api":{"Thread":[[13,18]]}}},{"text":"Using withoutPadding yields a new Encoder not writing = pad chars at the end of file","label":{"api":{"withoutPadding":[[6,19]],"Encoder":[[34,40]]}}},{"text":"A ScheduledExecutorService can help you with this","label":{"api":{"ScheduledExecutorService":[[2,25]]}}},{"text":"Java provides something similar which is not able to provide progress per se but is able to manage an asynchronous task which is the Future<T> class","label":{"api":{"Future<T>":[[133,141]]}}},{"text":"Since you need to provide to the user a feedback of the current operating task you would need at least two threads (the Future<T> thread and the reporting one), something like","label":{"api":{"Future<T>":[[120,128]]}}},{"text":"It should be possible to use a ScheduledExecutorService to schedule either your computing operation (with a delay of 0 and no fixed rate) either your reporting task (with a initial delay and a fixed rate) so that you can wait while getting the result of the first to then cancel the second","label":{"api":{"ScheduledExecutorService":[[31,54]]}}},{"text":"The closest thing I found was the Location class...but it still does not contain the information I'm after","label":{"api":{"Location":[[34,41]]}}},{"text":"If you needed to do something more complicated, you might want to look at Lock and it's subclasses","label":{"api":{"Lock":[[74,77]]}}},{"text":"For example, with a ReadWriteLock, multiple readers can hold the lock at the same time, but only one writer can","label":{"api":{"ReadWriteLock":[[20,32]]}}},{"text":"If possible, I would create an unmodifiable view of a map EnumMap<Test, String>","label":{"api":{"map":[[54,56]],"EnumMap<Test, String>":[[58,78]]}}},{"text":"In order to have another thread modify a Swing component like a JFrame it needs to submit the change on the event dispatch thread, for example having the worker thread use SwingUtilities#invokeLater","label":{"api":{"JFrame":[[64,69]],"SwingUtilities#invokeLater":[[172,197]]}}},{"text":"The API does not provide a way to do that","label":{"api":{}}},{"text":"You could use a GridBagLayout for your hBox2 to better adjust with GridBagConstraints and use constraints to force the 1/3rd feel","label":{"api":{"GridBagLayout":[[16,28]],"Box2":[[40,43]],"GridBagConstraints":[[67,84]]}}},{"text":"If you can use Java 8, a clean way to do it is to use the new Collection's removeIf method","label":{"api":{"Collection":[[62,71]],"removeIf":[[75,82]]}}},{"text":"After reading Locale's JavaDoc carefully, I was able to produce the required locale","label":{"api":{"Locale":[[14,19]]}}},{"text":"There is that peculiar interface which is documented as such (extracts only)","label":{"api":{"peculiar":[[14,21]]}}},{"text":"Please see Files.lines(), Multimaps.index() and Multimaps.transformValues() docs for further reference","label":{"api":{"Files.lines()":[[11,23]],"Multimaps.index()":[[26,42]],"Multimaps.transformValues()":[[48,74]]}}},{"text":"Take a look at BigInteger","label":{"api":{"BigInteger":[[15,24]]}}},{"text":"A simple example is FileNotFoundException, which means that the method that invoked this particular exception could not find a file","label":{"api":{"FileNotFoundException":[[20,40]]}}},{"text":"With synchronized in Java this is not possible, so you need something like ReentrantLock.tryLock()","label":{"api":{"ReentrantLock.tryLock()":[[75,97]]}}},{"text":"You also need to be able to directly access the transaction queue from each thread, so I guess you cannot use ExecutorService here but need to implement transaction handling yourself (using a LinkedBlockingQueue)","label":{"api":{"ExecutorService":[[110,124]],"LinkedBlockingQueue":[[192,210]]}}},{"text":"The Map returned from Collections.unmodifiableMap(Map) will be a thin proxy to the real underlying map with some methods disabled (put etc.)","label":{"api":{"Collections.unmodifiableMap(Map)":[[22,53]],"map":[[99,101]]}}},{"text":"See Character.toLowerCase() for how to convert a character into a lowercase one, because the correct answer would probably treat \"T\" and \"t\" as the same","label":{"api":{"Character.toLowerCase()":[[4,26]]}}},{"text":"To obtain real path to a resource you can use ServletContext.getRealPath(String path)","label":{"api":{"ServletContext.getRealPath(String path)":[[46,84]]}}},{"text":"You could consider to submit a Runnable to an ExecutorService to start the find operation in another thread and use the returned Future object to specify the maximum time to wait","label":{"api":{"Runnable":[[31,38]],"ExecutorService":[[46,60]],"Future":[[129,134]]}}},{"text":"You can use the Executors class to create an ExecutorService","label":{"api":{"Executors":[[16,24]],"ExecutorService":[[45,59]]}}},{"text":"Group and Pane","label":{"api":{"Group":[[0,4]],"Pane":[[10,13]]}}},{"text":"No, the close() method, which is called when leaving the try-with-resources block, calls finish(), so you do not need to do this manually","label":{"api":{"close()":[[8,14]],"finish()":[[89,96]]}}},{"text":"Also the JavaDoc of close() states that it \"Writes remaining compressed data to the output stream\", which is the same as finish() is documented to do","label":{"api":{"close()":[[20,26]],"finish()":[[121,128]]}}},{"text":"Construct a Shape that encloses the image, and use the AffineTransform method createTransformedShape() to rotate the Shape along with the image","label":{"api":{"Shape":[[12,16],[117,121]],"AffineTransform":[[55,69]],"createTransformedShape()":[[78,101]]}}},{"text":"The Shape method contains() will allow for position testing in Component relative coordinates","label":{"api":{"Shape":[[4,8]],"contains()":[[17,26]],"Component":[[63,71]]}}},{"text":"Have a look at HttpSessionBindingListener and the HttpSessionAttributeListener","label":{"api":{"HttpSessionBindingListener":[[15,40]],"HttpSessionAttributeListener":[[50,77]]}}},{"text":"If SomeObject is a class that you control, you can implement HttpSessionBindingListener otherwise you will likely need HttpSessionAttributeListener","label":{"api":{"SomeObject":[[3,12]],"HttpSessionBindingListener":[[61,86]],"HttpSessionAttributeListener":[[119,146]]}}},{"text":"In fact, my initial guess from the comments (or things like JTable#setFillsViewportHeight) don't help here","label":{"api":{"JTable#setFillsViewportHeight":[[60,88]]}}},{"text":"You can use a KeyEvent listener to listen to when key is pressed, release, typed or any of them","label":{"api":{"KeyEvent listener":[[14,30]],"pressed":[[57,63]],"release":[[66,72]],"typed":[[75,79]],"any":[[84,86]]}}},{"text":"It does matter whether you have some infinite loop running on another thread, if the user presses a button, the listener will be called","label":{"api":{"listener":[[112,119]]}}},{"text":"You just need to add a listener to the scene and the key event which you want to listen to","label":{"api":{}}},{"text":"Using Comparable.compareTo(T) is the only option (or Comparator)","label":{"api":{"Comparable.compareTo(T)":[[6,28]],"Comparator":[[53,62]]}}},{"text":"The interface only defines that one method (while Comparator adds equals), and it compares this object with the specified object for order","label":{"api":{"Comparator":[[50,59]]}}},{"text":"You need to pass your Runnable object to the constructor of the Thread class (java.lang.Thread), as described in the official docs","label":{"api":{"Runnable":[[22,29]],"Thread":[[64,69]],"java.lang.Thread":[[78,93]]}}},{"text":"The easiest way is to use a PauseTransition","label":{"api":{"PauseTransition":[[28,42]]}}},{"text":"You can do this using just the String.replaceAll(String regex, String replacement) method but if you're going to do this more than once then it's worth creating a Pattern object just once and then using that each time","label":{"api":{"String.replaceAll(String regex, String replacement)":[[31,81]],"Pattern":[[163,169]]}}},{"text":"For non-String columns, you'd use setNull; you may need a branch if setString isn't happy to do it, e.g.","label":{"api":{"setNull":[[34,40]],"setString":[[68,76]]}}},{"text":"The enhanced for statement can loop through arrays and any kind of Iterable object, so the answer depends on whether getMinions returns an array or an Iterable object","label":{"api":{"Iterable":[[67,74],[151,158]],"getMinions":[[117,126]]}}},{"text":"If it returns an Iterable, then","label":{"api":{"Iterable":[[17,24]]}}},{"text":"Collection.sort does not exist, while Collections.sort does","label":{"api":{"Collection.sort":[[0,14]],"Collections.sort":[[38,53]]}}},{"text":"Then before adding to the file you can check if the list of strings contains the string you want to add (just make sure that the strings share the same format such that a match will be found)","label":{"api":{"contains":[[68,75]]}}},{"text":"You can make use of the contains method","label":{"api":{"contains":[[24,31]]}}},{"text":"You can use Class.getResourceAsStream(...) to get an InputStream for that resource (which can be inside a .jar on the classpath or outside) and then write it to somewhere else","label":{"api":{"Class.getResourceAsStream(...)":[[12,41]],"InputStream":[[53,63]]}}},{"text":"You might want to look into the Timer class","label":{"api":{"Timer":[[32,36]]}}},{"text":"Then use the Timer(String name) constructor to create a Timer for the thread","label":{"api":{"Timer(String name)":[[13,30]],"Timer":[[56,60]]}}},{"text":"CellRendererPane is not a subclass of JComponent but you can still attach a swing event listener to it","label":{"api":{"CellRendererPane":[[0,15]],"JComponent":[[38,47]],"swing event listener":[[76,95]]}}},{"text":"If you want to do it manually, you can use the snapshot function to create a snapshot image, blur it and apply it to the child every time the parent is resized","label":{"api":{"snapshot":[[47,54]]}}},{"text":"However, invoking snapshot all the time will cause performance loss","label":{"api":{"snapshot":[[18,25]]}}},{"text":"I rather suggest you create 2 images, one normal and one blurred, and display a viewport of the blurred one","label":{"api":{}}},{"text":"Here's a more \"complex\" example with a circle where the viewport isn't sufficient","label":{"api":{}}},{"text":"You could simply read the file linewise and starting from the third line apply string.split() using \"$\" as delimiter","label":{"api":{"string.split()":[[79,92]]}}},{"text":"The WatchService API allows you to detect when your .txt file is changed, but detecting which line is changed is something that you'll need to implement yourself","label":{"api":{"WatchService":[[4,15]]}}},{"text":"You need to use BigInteger to have arbitrary-precision integers http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html","label":{"api":{"BigInteger":[[16,25]]}}},{"text":"You are using  == to compare registration value, you should use .equalsIgnoreCase(str)reference to be sure that user's input will be positively compared if he/she uses small letters instead of capital","label":{"api":{".equalsIgnoreCase(str)":[[64,85]]}}},{"text":"However, calling toFile() should not cause this, as the documentation says","label":{"api":{"toFile()":[[17,24]]}}},{"text":"Otherwise, this is a misunderstanding, and the toFile() method is correctly returning a File object referring to C:","label":{"api":{"toFile()":[[47,54]],"File":[[88,91]]}}},{"text":"In multi Threaded environment while multiple threads are accessing same List it is safe to use CopyOnWriteArrayList","label":{"api":{"List":[[72,75]],"CopyOnWriteArrayList":[[95,114]]}}},{"text":"Java 5 improves on the synchronized collections by providing several concurrent collection classes in java.util.concurrent package","label":{"api":{"java.util.concurrent":[[102,121]]}}},{"text":"I have never seen a case when an IOError is thrown","label":{"api":{"IOError":[[33,39]]}}},{"text":"The only thing that the docs say about IOError it this","label":{"api":{"IOError":[[39,45]]}}},{"text":"Is there ever a case when IOError would be thrown in java","label":{"api":{"IOError":[[26,32]]}}},{"text":"(This is not to be confused with IOException -- IOException is thrown in a wide range of cases, and is commonly used; I know that","label":{"api":{"IOException":[[33,43],[48,58]]}}},{"text":"I'm wondering about the less common IOError)","label":{"api":{"IOError":[[36,42]]}}},{"text":"Console,  Path#toAbsolutePath, and Path#toUri declare this particular exception to be thrown","label":{"api":{"Console":[[0,6]],"Path#toAbsolutePath":[[10,28]],"Path#toUri":[[35,44]]}}},{"text":"From what it looks like in code, Console#readLine and Console#readPassword catch an IOException that results through its normal operation, then propagate that to an IOError","label":{"api":{"Console#readLine":[[33,48]],"Console#readPassword":[[54,73]],"IOException":[[84,94]],"IOError":[[165,171]]}}},{"text":"If you have the file in you web root (I assume that you are) then you have to use ServletContext.html#getRealPath(java.lang.String) this will give you the actual path of the file","label":{"api":{"ServletContext.html#getRealPath(java.lang.String)":[[82,130]]}}},{"text":"Should main not exist, a runtime error ensues - specifically, NoSuchMethodError (and it will complain about not finding main)","label":{"api":{"NoSuchMethodError":[[62,78]]}}},{"text":"The Javadoc for java.lang.Double#valueOf(String) gives a detailed but well-documented regular expression for how it parses numbers","label":{"api":{"java.lang.Double#valueOf(String)":[[16,47]]}}},{"text":"We use MM for month while mm for minutes in Java simpelDateFormat","label":{"api":{"simpelDateFormat":[[49,64]]}}},{"text":"You probably want the getPart method","label":{"api":{"getPart":[[22,28]]}}},{"text":"Yes, use java.io.Console.readPassword()","label":{"api":{"java.io.Console.readPassword()":[[9,38]]}}},{"text":"the javadoc of ByteBuffer.allocateDirect() states that","label":{"api":{"ByteBuffer.allocateDirect()":[[15,41]]}}},{"text":"Is the only way to accomplish the task is to enumerate all constructor manually with getConstructors()","label":{"api":{"getConstructors()":[[85,101]]}}},{"text":"Another comment is that I'd recommend to avoid polling for available task, but rather use a BlockingQueue instead of ArrayList and sleeping","label":{"api":{"BlockingQueue":[[92,104]],"ArrayList":[[117,125]]}}},{"text":"If your thread is waiting for a BlockingQueue, it won't be scheduled until there's something in the queue, so you don't have the unpredictable wake-up checks","label":{"api":{"BlockingQueue":[[32,44]]}}},{"text":"As for the range operations there is a method more suited for your needs - subMap","label":{"api":{"subMap":[[75,80]]}}},{"text":"An alternative custom-class approach which tries to avoid multiple boolean flags by using an EnumSet (or Guava's Sets.immutableEnumSet())","label":{"api":{"EnumSet":[[93,99]],"Guava's Sets":[[105,116]],"immutableEnumSet()":[[118,135]]}}},{"text":"Socket, PrintWriter, BufferedReader, implement AutoCloseable and based on the fact, that you want to close socket right after you invoke sendContentOverSocket(String content) try to use the following code","label":{"api":{"Socket":[[0,5]],"PrintWriter":[[8,18]],"BufferedReader":[[21,34]],"AutoCloseable":[[47,59]],"sendContentOverSocket(String content)":[[137,173]]}}},{"text":"Then you can just use the standard TextFieldListCell which has exactly the functionality you describe","label":{"api":{"TextFieldListCell":[[35,51]]}}},{"text":"Since you want a graphic in the standard cell display, just subclass TextFieldListCell and override the appropriate methods to include the graphic when the text field is not displayed","label":{"api":{"TextFieldListCell":[[69,85]],"text field":[[156,165]]}}},{"text":"This can be done using an AtomicInteger","label":{"api":{"AtomicInteger":[[26,38]]}}},{"text":"You should also look at File.mkdirs()","label":{"api":{"File.mkdirs()":[[24,36]]}}},{"text":"You should use a ConcurrentHashMap","label":{"api":{"ConcurrentHashMap":[[17,33]]}}},{"text":"But rather than use an Integer type as the value stored in the map, you should use an AtomicInteger, which will ensure that multiple threads attempting to modify the value associated with the same key will be thread safe","label":{"api":{"Integer":[[23,29]],"AtomicInteger":[[86,98]]}}},{"text":"java.util.Date objects are not IN a time zone","label":{"api":{"java.util.Date":[[0,13]]}}},{"text":"Use an AnimationTimer as your (game) loop","label":{"api":{"AnimationTimer":[[7,20]]}}},{"text":"You can try making MyBean an Embeddable to use that as an EmbeddedId, something like this","label":{"api":{"MyBean":[[19,24]],"Embeddable":[[29,38]],"EmbeddedId":[[58,67]]}}},{"text":"In your entity, MyBean will be an EmbeddedId and will look like this","label":{"api":{"MyBean":[[16,21]],"EmbeddedId":[[34,43]]}}},{"text":"If so I recommend using HashSet instead or ArrayList","label":{"api":{"HashSet":[[24,30]],"ArrayList":[[43,51]]}}},{"text":"trimToSize() is a method of the ArrayList class, not the List interface","label":{"api":{"trimToSize()":[[0,11]],"ArrayList":[[32,40]],"List":[[57,60]]}}},{"text":"Since you're storing your variables as List<Integer>, you can only use methods that are part of the List interface","label":{"api":{"List<Integer>":[[39,51]],"List":[[100,103]]}}},{"text":"You can't trim linked at all, because it's nonsensical to trim a LinkedList; they do not allocate additional buffer space past their capacity as appending to a LinkedList is always O(1), where as appending to a full ArrayList is O(n)","label":{"api":{"LinkedList":[[65,74],[160,169]],"ArrayList":[[216,224]]}}},{"text":"Use format like this","label":{"api":{"format":[[4,9]]}}},{"text":"java.util.Base64 was added in Java 8","label":{"api":{"java.util.Base64":[[0,15]]}}},{"text":"One way of doing this is to use WatchService then act when the file is being written and the size is greater than the threshold","label":{"api":{"WatchService":[[32,43]]}}},{"text":"You rarely need to specify the capacity of an ArrayList, it can improve the performance only if you know how many elements your ArrayList will hold","label":{"api":{"ArrayList":[[46,54],[128,136]]}}},{"text":"ArrayList is simply a List that can automatically be grown or shrink","label":{"api":{"ArrayList":[[0,8]],"List":[[22,25]]}}},{"text":"Using List, you never need to add an element in the place n if the list is empty, you simply link it to the previous node (unless it's the head of course) - that's the idea of ArrayList except the fact that it can be grown/shrink automatically","label":{"api":{"List":[[6,9]],"ArrayList":[[176,184]]}}},{"text":"One option can be to use the afterExecute method and change the behavior of the shutdown method","label":{"api":{"afterExecute":[[29,40]],"shutdown":[[80,87]]}}},{"text":"What does Part stand for","label":{"api":{"Part":[[10,13]]}}},{"text":"And which http request will reduce Parts that can be fetched by HttpServletRequest#getParts() method","label":{"api":{"Parts":[[35,39]],"HttpServletRequest#getParts()":[[64,92]]}}},{"text":"It uses the default encoding which on Windows will be an obsolete \"ANSI\" encoding","label":{"api":{}}},{"text":"You can also call System.setOut to provide your own mechanism","label":{"api":{"System.setOut":[[18,30]]}}},{"text":"You need Optional.isPresent() and orElse()","label":{"api":{"Optional.isPresent()":[[9,28]],"orElse()":[[34,41]]}}},{"text":"With Java 9 or higher, ifPresentOrElse is most likely what you want","label":{"api":{"ifPresentOrElse":[[23,37]]}}},{"text":"First, all Objects in that array must implement the Comparable interface, which they do, but they themselves are not comparable with respect to each other","label":{"api":{"Objects":[[11,17]],"Comparable":[[52,61]]}}},{"text":"In Java HashMap breaks when used concurrently without sufficient locking","label":{"api":{"HashMap":[[8,14]]}}},{"text":"See Is a HashMap thread-safe for different keys","label":{"api":{"HashMap":[[9,15]]}}},{"text":"In Java a ConcurrentSkipListSet uses the Skip List data structure and so can be updated and iterated by multiple threads concurrently without breaking without using locks","label":{"api":{"ConcurrentSkipListSet":[[10,30]]}}},{"text":"notifyAll() isn't remotely close to notifyDataSetChanged()","label":{"api":{"notifyAll()":[[0,10]],"notifyDataSetChanged()":[[36,57]]}}},{"text":"A good option is a TreeSet, which is likely functionally equivalent to how you were using an array, if you simply need to keep track of a set of sorted numbers","label":{"api":{"TreeSet":[[19,25]]}}},{"text":"You could use something like ConcurrentLinkedQueue","label":{"api":{"ConcurrentLinkedQueue":[[29,49]]}}},{"text":"Take advantage of Java's Executor implementations and use a producer/consumer model","label":{"api":{"Executor":[[25,32]]}}},{"text":"If you need the ability to stop a pending costly operation, the thread that removes Things can use an ExecutorService instead of Executor","label":{"api":{"ExecutorService":[[102,116]],"Executor":[[129,136]]}}},{"text":"You are falling for a very common trap with the Thread API","label":{"api":{"Thread":[[48,53]]}}},{"text":"the failure to distinguish a thread from an instance of the Thread class","label":{"api":{"Thread":[[60,65]]}}},{"text":"A Thread, on the other hand, is just a plain Java object, which happens to have some magic methods, the most magical being start()","label":{"api":{"Thread":[[2,7]],"start()":[[123,129]]}}},{"text":"Many others are just plain old Java methods, and they pertain to that particular Thread instance","label":{"api":{"Thread":[[81,86]]}}},{"text":"getName() is just such a method and it returns the name of this instance on which it was called","label":{"api":{"getName()":[[0,8]]}}},{"text":"currentThread(), on the other hand, is a static method which returns the instance of Thread responsible for the current thread","label":{"api":{"currentThread()":[[0,14]],"Thread":[[85,90]]}}},{"text":"This is the instance on which you want to invoke getName()","label":{"api":{"getName()":[[49,57]]}}},{"text":"The easiest way is to return a StreamingOutput object","label":{"api":{"StreamingOutput":[[31,45]]}}},{"text":"use the class Random (http://docs.oracle.com/javase/7/docs/api/java/util/Random.html) to generate randomnumbers","label":{"api":{"Random":[[14,19]]}}},{"text":"I am now reading the documentation and see there is a function called Collectors.toConcurrentMap()","label":{"api":{"Collectors.toConcurrentMap()":[[70,97]]}}},{"text":"There was once a time where I needed to hook a custom properties file and ask Maven to filter it with project properties then read input that file content within the source code as a java.util.Properties","label":{"api":{"java.util.Properties":[[183,202]]}}},{"text":"Assuming yours is a Swing GUI (you don't tell us), JFrame has a setLocation(...) method, a method that JFrame API will readily show you","label":{"api":{"Swing":[[20,24]],"JFrame":[[51,56],[103,108]],"setLocation(...)":[[64,79]]}}},{"text":"It turns out that although TransformerFactory lets you use a Source implementation for your stylesheet, if you happen (unknowingly, of course) to use a DOMSource that was constructed by a caller who did not declare his associated DocumentBuilderFactory as namespace-aware then you'll get the output of the stylesheet as your transformation (!)","label":{"api":{"TransformerFactory":[[27,44]],"Source":[[61,66]],"DOMSource":[[152,160]],"DocumentBuilderFactory":[[230,251]]}}},{"text":"tell your callers what to do (?!) or—if you have any control over the transformation process itself—make sure you don't ever accept a Source that is in fact a DOMSource","label":{"api":{"Source":[[134,139]],"DOMSource":[[159,167]]}}},{"text":"The concurrent collections are quite performant","label":{"api":{}}},{"text":"you can catch PrivilegedActionException, and call getCause to get SocketTimeoutException","label":{"api":{"PrivilegedActionException":[[14,38]],"getCause":[[50,57]],"SocketTimeoutException":[[66,87]]}}},{"text":"is too big to fit in a long you will encounter the following behaviour, quoting the BigInteger#longValue method in the JDK","label":{"api":{"BigInteger#longValue":[[84,103]]}}},{"text":"You can use .flatMap() the nested nodes","label":{"api":{".flatMap()":[[12,21]]}}},{"text":"Not to use inheritance, reflection through ServerEndpointConfig.Configurator.getEndpointInstance might work","label":{"api":{"ServerEndpointConfig.Configurator.getEndpointInstance":[[43,95]]}}},{"text":"If the fields are limited, for example if you only need various combinations of fields, you could create an interface for each field (getter and setter) and then creaty a Proxy object for all of them, handling the data, for example, with an internal HashMap","label":{"api":{"Proxy":[[171,175]],"HashMap":[[250,256]]}}},{"text":"ColorAdjust based sample which converts a color image to monochrome by desaturating it when you mouse-over the image","label":{"api":{"ColorAdjust":[[0,10]]}}},{"text":"Given appropriate hardware (which is available to most systems JavaFX runs on), the JavaFX runtime may perform some of the implementation of the color adjustment in hardware, which might lead to a more efficient implementation than manipulating pixels using a PixelWriter","label":{"api":{"JavaFX":[[63,68],[84,89]],"PixelWriter":[[260,270]]}}},{"text":"For this type of requirements, I'd ditch the JFormattedTextField (you don't want to format but to filter) and use a normal JTextField, with a custom DocumentFilter on its document","label":{"api":{"JFormattedTextField":[[45,63]],"JTextField":[[123,132]],"DocumentFilter":[[149,162]]}}},{"text":"The 'Person:' output shows the hash code for the Map.Entry object (entry.hashCode()), and has no bearing on p1/p2","label":{"api":{"Map.Entry":[[49,57]],"entry.hashCode()":[[67,82]]}}},{"text":"You can use toString() method of Arrays class, like this","label":{"api":{"toString()":[[12,21]],"Arrays":[[33,38]]}}},{"text":"a ThreadPoolExecutor as an argument, whereas for sequential processing you could pass in a fake Executor, i.e","label":{"api":{"ThreadPoolExecutor":[[2,19]],"Executor":[[96,103]]}}},{"text":"You can use the KeyFrame constructor that takes an event handler to perform an action at that key frame (in this case, establishing the additional binding)","label":{"api":{"KeyFrame":[[16,23]]}}},{"text":"I would recommend using a CountDownLatch initialized with a count of 1, instead of a condition","label":{"api":{"CountDownLatch":[[26,39]]}}},{"text":"Given the y axis parameter, it will naturally flow in the direction you require, and not expand the child components to fit the parent","label":{"api":{}}},{"text":"Use SwingUtilites.invokeLater() and pass it a Runnable that will make the necessary UI changes","label":{"api":{"SwingUtilites.invokeLater()":[[4,30]],"Runnable":[[46,53]]}}},{"text":"This is also mentioned in the Javadocs of DriverManager","label":{"api":{"DriverManager":[[42,54]]}}},{"text":"When the method getConnection is called, the DriverManager will attempt to locate a suitable driver from amongst those loaded at initialization and those loaded explicitly using the same classloader as the current applet or application","label":{"api":{"getConnection":[[16,28]],"DriverManager":[[45,57]]}}},{"text":"One aspect of the behavior of the one-argument split method can be surprising -- trailing nulls are discarded from the returned array","label":{"api":{"split":[[47,51]]}}},{"text":"To get a length of 2 for each case, you can pass in a negative second argument to the two-argument split method, which means that the length is unrestricted and no trailing empty strings are discarded","label":{"api":{"split":[[99,103]]}}},{"text":"You can set the thickness of the rectangle by creating a Graphics2D object and setting its stroke","label":{"api":{"Graphics2D":[[57,66]],"stroke":[[91,96]]}}},{"text":"Somewhat surprisingly, PrintWriter methods don't throw exceptions","label":{"api":{"PrintWriter":[[23,33]]}}},{"text":"You can use java.math.BigInteger","label":{"api":{"java.math.BigInteger":[[12,31]]}}},{"text":"Use the Collections.sort(List, Comparator) method","label":{"api":{"Collections.sort(List, Comparator)":[[8,41]]}}},{"text":"Create Comparator like below","label":{"api":{"Comparator":[[7,16]]}}},{"text":"This comparator will decide, logic that you want to use to sort the list","label":{"api":{}}},{"text":"And then sort list after you populated using","label":{"api":{}}},{"text":"You can use the listIterator like this","label":{"api":{"listIterator":[[16,27]]}}},{"text":"I am recently wondering how functions like the InputStream int read(byte[] b) method are working","label":{"api":{"InputStream int read(byte[] b)":[[47,76]]}}},{"text":"I would personally prefer using the Random class, and its Random#nextInt(int) method","label":{"api":{"Random":[[36,41]],"Random#nextInt(int)":[[58,76]]}}},{"text":"Not only I find it more elegant (and avoids casting), I also find it extremely useful to be able to use the same Random object that I created and planted its seed (with the constructor Random(long)), since it makes life much easier when trying to reproduce some unexpected behavior later on","label":{"api":{"Random":[[113,118]],"Random(long)":[[185,196]]}}},{"text":"Use ImageIO.write to save the image in compressed format","label":{"api":{"ImageIO.write":[[4,16]]}}},{"text":"I think what you are looking for is Collections.sort(java.util.List, java.util.Comparator)","label":{"api":{"Collections.sort(java.util.List, java.util.Comparator)":[[36,89]]}}},{"text":"This can be done using String.intern()","label":{"api":{"String.intern()":[[23,37]]}}},{"text":"The ProcessBuilder class can be used to start a process, and it returns a Process instance that you can use to stop that process","label":{"api":{"ProcessBuilder":[[4,17]],"Process":[[74,80]]}}},{"text":"Look at the Arrays utility class","label":{"api":{"Arrays":[[12,17]]}}},{"text":"If you know that the InputStream can be interpreted as text, you can wrap it in a InputStreamReader and use BufferedReader#lines() to consume it line by line","label":{"api":{"InputStream":[[21,31]],"InputStreamReader":[[82,98]],"BufferedReader#lines()":[[108,129]]}}},{"text":"Instead you can use Reader.ready to first test if the stream can be read without blocking (i.e","label":{"api":{"Reader.ready":[[20,31]]}}},{"text":"Use java.math.BigInteger that provides arbitrary long integers and methods to operate on them","label":{"api":{"java.math.BigInteger":[[4,23]]}}},{"text":"Your MyArrayList class must implement Iterable<T> interface","label":{"api":{"MyArrayList":[[5,15]],"Iterable<T>":[[38,48]]}}},{"text":"As per explanation given for PreparedStatement in the JDBC docs, I see that it improves the performance compared to Statement","label":{"api":{"PreparedStatement":[[29,45]],"Statement":[[116,124]]}}},{"text":"So why we still use Statement and it is not deprecated","label":{"api":{"Statement":[[20,28]]}}},{"text":"This makes it easy to read out whole variables in one go via the System.arraycopy method","label":{"api":{"System.arraycopy":[[65,80]]}}},{"text":"I am able to create servlets and filters in my ServletContainerInitializer, but is it possible to translate this last remaining piece of an old web.xml into Servlet 3.0 programmatic configuration","label":{"api":{"ServletContainerInitializer":[[47,73]]}}},{"text":"In your example code, you're calling String.contains() which does not use regular expressions","label":{"api":{"String.contains()":[[37,53]]}}},{"text":"Certain methods of String - namely String.matches(), String.replaceAll(), String.replaceFirst(), and String.split() - are convenient wrappers around the regular expression behaviour Pattern provides","label":{"api":{"String":[[19,24]],"String.matches()":[[35,50]],"String.replaceAll()":[[53,71]],"String.replaceFirst()":[[74,94]],"String.split()":[[101,114]],"Pattern":[[182,188]]}}},{"text":"For example, String.split() simply* calls","label":{"api":{"String.split()":[[13,26]]}}},{"text":"This the JButton API","label":{"api":{"JButton":[[9,15]]}}},{"text":"To use URL-safe base 64 it is possible to use the new Base64 class in java.util (since Java 8)","label":{"api":{"Base64":[[54,59]],"java.util":[[70,78]]}}},{"text":"The API documentation says","label":{"api":{}}},{"text":"What you want is the options from the JAI equivalent (ConvolveDescriptor), which is EDGE_REFLECT (or EDGE_WRAP, if you want repeating patterns)","label":{"api":{"ConvolveDescriptor":[[54,71]],"EDGE_REFLECT":[[84,95]],"EDGE_WRAP":[[101,109]]}}},{"text":"The thing that jumps out is that replaceAll returns a string with the changes made in it, it doesn't change the string you call it on (it can't, strings are immutable)","label":{"api":{"replaceAll":[[33,42]]}}},{"text":"I don't think so, and there's no mention of it I could see in the Formatter docs, but you can always use something like","label":{"api":{"Formatter":[[66,74]]}}},{"text":"You can use the Calendar.getDisplayName(int field, int style, Locale locale) method","label":{"api":{"Calendar.getDisplayName(int field, int style, Locale locale)":[[16,75]]}}},{"text":"Is correct that HTMLEditorKit ignores tags such as seen below (used to emulate IE7 in a IE7+ browser) when rendering HTML content","label":{"api":{"HTMLEditorKit":[[16,28]]}}},{"text":"Documentation on HTMLEditorKit mentions that it","label":{"api":{"HTMLEditorKit":[[17,29]]}}},{"text":"Ideally, you should make SavingsAccount implement the Comparable (see docs) interface, like this","label":{"api":{"SavingsAccount":[[25,38]],"Comparable":[[54,63]]}}},{"text":"Iterator#remove doesn't receive any parameter","label":{"api":{"Iterator#remove":[[0,14]]}}},{"text":"The accept method expects two arguments","label":{"api":{"accept":[[4,9]]}}},{"text":"Here is the list of supported formats","label":{"api":{}}},{"text":"Use Simple Date Format","label":{"api":{"Simple Date Format":[[4,21]]}}},{"text":"Simple Date Format also works for parsing dates; just call .parse(stringRepresentation), and get a Date instance back","label":{"api":{"Simple Date Format":[[0,17]],"dates":[[42,46]],".parse(stringRepresentation)":[[59,86]],"Date":[[99,102]]}}},{"text":"It has the ability to pass in an Appendable for the sake of optional extra information (listing each file, giving statistics, etcetera)","label":{"api":{"Appendable":[[33,42]]}}},{"text":"Can I safely stick with an Appendable or should I be considering something else","label":{"api":{"Appendable":[[27,36]]}}},{"text":"The problem with using Appendable from multiple threads is that it is not specified as thread safe","label":{"api":{"Appendable":[[23,32]]}}},{"text":"This one uses a BlockingQueue and a thread that pulls data out of it and forwards it to their Appendable","label":{"api":{"BlockingQueue":[[16,28]],"Appendable":[[94,103]]}}},{"text":"If it's not feasible to you, you can intercept instantiation process of the class annotated with ServerEndpoint by using a your own version of ServerEndpointConfig.Configurator","label":{"api":{"ServerEndpoint":[[97,110]],"ServerEndpointConfig.Configurator":[[143,175]]}}},{"text":"See the Java Docs on KeyGenerator init methods","label":{"api":{"KeyGenerator":[[21,32]]}}},{"text":"Pass a Comparator<Long[]> to the constructor that takes one, so the TreeSet knows how you want the Long[]s compared","label":{"api":{"Comparator<Long[]>":[[7,24]],"TreeSet":[[68,74]],"Long[]":[[99,104]]}}},{"text":"When you need to compose a String like this, you should use a StringBuilder instead","label":{"api":{"String":[[27,32]],"StringBuilder":[[62,74]]}}},{"text":"You should also implement equals and make your class implement Comparable<T> and implement compareTo","label":{"api":{"Comparable<T>":[[63,75]],"compareTo":[[91,99]]}}},{"text":"Once you have done that, you can sort a collection of Tuple instances (using Collections.sort) and they will be sorted according to the ordering specified by your compareTo method","label":{"api":{"Tuple":[[54,58]],"Collections.sort":[[77,92]],"compareTo":[[163,171]]}}},{"text":"If you don't care so much about defining implicit ordering for your class by implementing Comparable<T>, you can specify an ad-hoc comparator using Comparator#comparingInt and use it with an array of your objects","label":{"api":{"Comparable<T>":[[90,102]],"comparator":[[131,140]],"Comparator#comparingInt":[[148,170]]}}},{"text":"In EJB 3.0, the default transaction attribute for all EJB 3.0 applications is REQUIRED","label":{"api":{}}},{"text":"You'll need to change this to public class Treasure implements Comparable<Treasure> -- see the Comparable docs for more details","label":{"api":{"Treasure":[[43,50]],"Comparable<Treasure>":[[63,82]],"Comparable":[[95,104]]}}},{"text":"Object.equals() takes an object of type Object, so the second example is wrong because it takes an Animal object instead","label":{"api":{"Object.equals()":[[0,14]],"Object":[[40,45]],"Animal":[[99,104]]}}},{"text":"Change it to a TreeMap and use the headMap() method","label":{"api":{"TreeMap":[[15,21]],"headMap()":[[35,43]]}}},{"text":"BufferedImage, BufferStrategy, Image) provides a custom implementation that makes sense in their respective context","label":{"api":{"BufferedImage":[[0,12]],"BufferStrategy":[[15,28]],"Image":[[31,35]]}}},{"text":"A BufferedImage for example, as the name implies, could draw upon a raster maintained in main memory whilst a VolatileImage could draw directly into VRAM (implementation-specific)","label":{"api":{"BufferedImage":[[2,14]],"VolatileImage":[[110,122]]}}},{"text":"And in fact your example has a specific method built into Files that takes a Glob","label":{"api":{"Files":[[58,62]],"Glob":[[77,80]]}}},{"text":"Or, using the more modern Files.list","label":{"api":{"Files.list":[[26,35]]}}},{"text":"You should go read this article here so you understand formatting in Java and don't fail your test","label":{"api":{}}},{"text":"The javadoc for Scanner describes this behaviour, the summary on top usually gives you all the information you need to use that class","label":{"api":{"Scanner":[[16,22]]}}},{"text":"If this is for a real application and not just for practice, use Collections.shuffle() instead of implementing this yourself","label":{"api":{"Collections.shuffle()":[[65,85]]}}},{"text":"You need to invoke Platform.setImplicitExit(false), otherwise the JavaFX runtime will shut down when you close the last stage","label":{"api":{"Platform.setImplicitExit(false)":[[19,49]],"JavaFX":[[66,71]]}}},{"text":"See the API documentation of Field.get(Object o)","label":{"api":{"Field.get(Object o)":[[29,47]]}}},{"text":"Or you could use Java's BigDecimal class","label":{"api":{"BigDecimal":[[24,33]]}}},{"text":"Then, to see if the regex matches the filename, use String#matches()","label":{"api":{"String#matches()":[[52,67]]}}},{"text":"More info about ArrayLists","label":{"api":{"ArrayLists":[[16,25]]}}},{"text":"Most often, the @JoinColumn is use for mapping FK","label":{"api":{"@JoinColumn":[[16,26]]}}},{"text":"If you have a link table, you need to use @JoinTable instead","label":{"api":{"@JoinTable":[[42,51]]}}},{"text":"Better way to pool for the result should be using CompletionService","label":{"api":{"CompletionService":[[50,66]]}}},{"text":"You can call Class#newInstance()","label":{"api":{"Class#newInstance()":[[13,31]]}}},{"text":"You can use an ArrayBlockingQueue from the java.util.concurrent package, in place of the iRobotBuffer class","label":{"api":{"ArrayBlockingQueue":[[15,32]],"java.util.concurrent":[[43,62]],"iRobotBuffer":[[89,100]]}}},{"text":"You may also use    fill(int[] a, int fromIndex, int toIndex, int val) method too if you want to fill the array with a specific value","label":{"api":{"fill(int[] a, int fromIndex, int toIndex, int val)":[[20,69]]}}},{"text":"With Java 8 you can create a WatchService","label":{"api":{"WatchService":[[29,40]]}}},{"text":"Use a java.util.Map","label":{"api":{"java.util.Map":[[6,18]]}}},{"text":"You can use Map#values() to get a collection view of the values, that is a collections of languages","label":{"api":{"Map#values()":[[12,23]]}}},{"text":"You can listen to the localToSceneTransformProperty()","label":{"api":{"localToSceneTransformProperty()":[[22,52]]}}},{"text":"You could use Object.getClass()","label":{"api":{"Object.getClass()":[[14,30]]}}},{"text":"Java has the BigInteger class which may work for your scenario","label":{"api":{"BigInteger":[[13,22]]}}},{"text":"See Timer for better information","label":{"api":{"Timer":[[4,8]]}}},{"text":"See java's comparator documentation","label":{"api":{"comparator":[[11,20]]}}},{"text":"The properties you want can be obtained from RuntimeMXBean","label":{"api":{"RuntimeMXBean":[[45,57]]}}},{"text":"(You should return 0 only if the two objects equal each other)","label":{"api":{}}},{"text":"The Comparable interface also defines more requirements (results need to be transitive, ...)","label":{"api":{"Comparable":[[4,13]]}}},{"text":"For example, keep track of your TimerTasks properly and cancel those as necessary","label":{"api":{"TimerTasks":[[32,41]]}}},{"text":"a ScheduledExecutorService, so that you just have to keep track of Runnables (with just one central ExecutorService to manage) rather than having to track individual timers and tasks (at the cost of not having the handy TimerTask.cancel() available) -- this may or may not ease design","label":{"api":{"ScheduledExecutorService":[[2,25]],"Runnable":[[67,74]],"ExecutorService":[[100,114]],"TimerTask.cancel()":[[220,237]]}}},{"text":"A better approach would be to use a proper String constructor","label":{"api":{"String":[[43,48]]}}},{"text":"Also in case if there's a possibility that data encoding is different from your platform's default one you have to use a constructor which takes a Charset as an additional parameter","label":{"api":{"Charset":[[147,153]]}}},{"text":"This can be done with a CompletableFuture (or if not available, Guava's SettableFuture)","label":{"api":{"CompletableFuture":[[24,40]],"Guava":[[64,68]],"SettableFuture":[[72,85]]}}},{"text":"Luckily, you can tell Scanner what CharSet you want it to use by using one of the 2 argument constructors like this one","label":{"api":{"Scanner":[[22,28]],"CharSet":[[35,41]]}}},{"text":"What is the color model","label":{"api":{}}},{"text":"What is the data type of the sample model","label":{"api":{}}},{"text":"Using an image type of TYPE_4BYTE_ABGR would lead to a minimum size of 256MB (8K * 8K * 4)","label":{"api":{"TYPE_4BYTE_ABGR":[[23,37]]}}},{"text":"Using a data type of int (instead of byte) could increase that 4x","label":{"api":{}}},{"text":"At the very least, use Collections.synchronizedList()as described in the LinkedList JavaDocs","label":{"api":{"Collections.synchronizedList()":[[23,52]],"LinkedList":[[73,82]]}}},{"text":"use a thread safe, concurrent data structure such as ConcurrentLinkedQueue, ArrayBlockingQueue or LinkedBlockingQueue","label":{"api":{"ConcurrentLinkedQueue":[[53,73]],"ArrayBlockingQueue":[[76,93]],"LinkedBlockingQueue":[[98,116]]}}},{"text":"You can call the method Scanner#useDelimiter(Pattern)","label":{"api":{"Scanner#useDelimiter(Pattern)":[[24,52]]}}},{"text":"For NumberFormat, use the getNumberInstance method that takes a Locale as a parameter","label":{"api":{"NumberFormat":[[4,15]],"getNumberInstance":[[26,42]],"Locale":[[64,69]]}}},{"text":"For DateFormat, use the getDateInstance method that takes a Locale as a parameter","label":{"api":{"DateFormat":[[4,13]],"getDateInstance":[[24,38]],"Locale":[[60,65]]}}},{"text":"Since you said, I want to have a list that's always sorted, use a java.util.TreeSet<E> or a java.util.PriorityQueue<E>","label":{"api":{"java.util.TreeSet<E>":[[66,85]],"java.util.PriorityQueue<E>":[[92,117]]}}},{"text":"implement Comparable<T> or you have to provide a Comparator<T>","label":{"api":{"Comparable<T>":[[10,22]],"Comparator<T>":[[49,61]]}}},{"text":"You could use a TreeSet to maintain a sorted set and, if you need to, can wrap it in a thread safe wrapper using Collections.synchronizedSortedSet()","label":{"api":{"TreeSet":[[16,22]],"Collections.synchronizedSortedSet()":[[113,147]]}}},{"text":"Iterate through all your children and calculate the total bounds in parent, relocate the children so that the top/left position is 0/0, calculate a scale factor depending on the total bounds and the view and then apply setScaleX and setScaleY","label":{"api":{"setScaleX":[[219,227]],"setScaleY":[[233,241]]}}},{"text":"Assuming you are working with Strings, the method lastIndexOf() seems to suit your needs","label":{"api":{"String":[[30,35]],"lastIndexOf()":[[50,62]]}}},{"text":"Have a look at the Java UUID Class","label":{"api":{"UUID":[[24,27]]}}},{"text":"If you are using Java 8 I recommend instead looking at DateTimeFormatter which can handle nanoseconds or if pre Java 8 use Joda Time","label":{"api":{"DateTimeFormatter":[[55,71]]}}},{"text":"I'm using the InputStream Java class for managing incoming data from bluetooth RFCOMM channel, with Android device","label":{"api":{"InputStream":[[14,24]]}}},{"text":"You should use a StringBuilder (docs here) instead of String concatenation to fill the contents of the text variable","label":{"api":{"StringBuilder":[[17,29]],"String":[[54,59]]}}},{"text":"In this case you should use appendReplacement and appendTail methods, which work in tandem","label":{"api":{"appendReplacement":[[28,44]],"appendTail":[[50,59]]}}},{"text":"One possible approach is to use the arbitrary properties map on Node to store a reference from Menu to MenuBar as this example shows","label":{"api":{"arbitrary properties map":[[36,59]],"Node":[[64,67]],"Menu":[[95,98]],"MenuBar":[[103,109]]}}},{"text":"Under the hood ThreadPoolTaskExecutor uses LinkedBlockingQueue which does not provide uniqueness","label":{"api":{"ThreadPoolTaskExecutor":[[15,36]],"LinkedBlockingQueue":[[43,61]]}}},{"text":"Using ThreadPoolExecutor instead of ThreadPoolTaskExecutor","label":{"api":{"ThreadPoolExecutor":[[6,23]],"ThreadPoolTaskExecutor":[[36,57]]}}},{"text":"The ThreadPoolExecutor provides a constructor which lets me determine the thread pool queue type, but it needs to implement the BlockingQueue interface","label":{"api":{"ThreadPoolExecutor":[[4,21]],"BlockingQueue":[[128,140]]}}},{"text":"This led me to try and extend LinkedBlockingQueue and override add","label":{"api":{"LinkedBlockingQueue":[[30,48]]}}},{"text":"Check the Arrays.sort() (docs here) method","label":{"api":{"Arrays.sort()":[[10,22]]}}},{"text":"Use Arrays.fill(array, fromIndex, toIndex, val) (docs here) to fill the array with -1, from array.length - start to array.length","label":{"api":{"Arrays.fill(array, fromIndex, toIndex, val)":[[4,46]],"array.length":[[92,103],[116,127]]}}},{"text":"From the Object JavaDoc","label":{"api":{"Object":[[9,14]]}}},{"text":"Class Object is the root of the class hierarchy","label":{"api":{"Class":[[0,4]]}}},{"text":"Every class has Object as a superclass","label":{"api":{"Object":[[16,21]]}}},{"text":"If you had several properties to monitor, with different outcomes, you could even use addPropertChangeListener(String propertyName, PropertyChangeListener listener) instead, and make one listener per emitter, per property","label":{"api":{"addPropertChangeListener(String propertyName, PropertyChangeListener listener)":[[86,163]]}}},{"text":"Second, the Class.getResource and Class.getResourceAsStream methods (and their ClassLoader equivalents) require a String argument containing forward slashes (/), on all platforms, even Windows","label":{"api":{"Class.getResource":[[12,28]],"Class.getResourceAsStream":[[34,58]],"ClassLoader":[[79,89]],"String":[[114,119]]}}},{"text":"The Float.parseFloat method parses the number the same as Float.valueOf(String), whose javadocs state","label":{"api":{"Float.parseFloat":[[4,19]],"Float.valueOf(String)":[[58,78]]}}},{"text":"The correct way is to make use of javax.servlet.ServletContext.getResourceAsStream(java.lang.String)","label":{"api":{"javax.servlet.ServletContext.getResourceAsStream(java.lang.String)":[[34,99]]}}},{"text":"The JavaDoc for the ArrayList constructor being invoked says","label":{"api":{"ArrayList":[[20,28]]}}},{"text":"The JavaDoc for Collections.synchronizedMap() includes this very important note","label":{"api":{"Collections.synchronizedMap()":[[16,44]]}}},{"text":"Or use StandardCharsets.UTF_8 instead to avoid any ambiguity","label":{"api":{"StandardCharsets.UTF_8":[[7,28]]}}},{"text":"The Scanner(String) constructor points the Scanner at the contents of that string -- the string doesn't represent a filename","label":{"api":{"Scanner(String)":[[4,18]],"Scanner":[[43,49]]}}},{"text":"The most natural choice would be CharBuffer","label":{"api":{"CharBuffer":[[33,42]]}}},{"text":"Like String and StringBuilder it implements the CharSequence interface, therefore it can be used with a lot of text oriented APIs, most notably the regex engine which is the back-end for most search, split, and replacing operations","label":{"api":{"String":[[5,10]],"StringBuilder":[[16,28]],"CharSequence":[[48,59]],"regex engine":[[148,159]],"search":[[192,197]],"split":[[200,204]],"replacing":[[211,219]]}}},{"text":"What makes CharBuffer the natural choice is that it is also the type that is used by the charset package which provides the necessary operations for converting characters from and to bytes","label":{"api":{"CharBuffer":[[11,20]],"charset":[[89,95]]}}},{"text":"By dealing with this API you can do the conversion directly from and to CharBuffers without additional data copying steps","label":{"api":{"CharBuffer":[[72,81]]}}},{"text":"Note that Java’s regex API is prepared for processing buffers containing partially read files and can report whether reading more data might change the result (see hitEnd() and requireEnd())","label":{"api":{"regex":[[17,21]],"hitEnd()":[[164,171]],"requireEnd()":[[177,188]]}}},{"text":"Try using a HBox wrapped inside a ScrollPane","label":{"api":{"HBox":[[12,15]],"ScrollPane":[[34,43]]}}},{"text":"You can add elements to HBox using getChildren.add(node)","label":{"api":{"HBox":[[24,27]],"getChildren.add(node)":[[35,55]]}}},{"text":"The elements will be automatically shown on the scene and the ScrollPane will adjust the ScrollBar for you","label":{"api":{"ScrollPane":[[62,71]],"ScrollBar":[[89,97]]}}},{"text":"https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html?is-external=true is a wonderful resource to get you started (and way beyond started) with regular expressions in Java","label":{"api":{}}},{"text":"Using a BitSet in place of int[] might reduce the memory footprint","label":{"api":{"BitSet":[[8,13]]}}},{"text":"In the case of a JButton, its superclass AbstractButton calls the actionPerformed method through the method fireActionPerformed which is a protected method","label":{"api":{"JButton":[[17,23]],"AbstractButton":[[41,54]],"actionPerformed":[[66,80]],"fireActionPerformed":[[108,126]]}}},{"text":"The java.sql.Date type is used to store only date (no time) information, as it maps to the SQL DATE type, which doesn't store time","label":{"api":{"java.sql.Date":[[4,16]]}}},{"text":"What its toString() method does is","label":{"api":{"toString()":[[9,18]]}}},{"text":"To achieve the desired output you can use java.sql.Timestamp, which stores date and time information, mapping to the SQL TIMESTAMP type","label":{"api":{"java.sql.Timestamp":[[42,59]]}}},{"text":"Its toString() method outputs what you need","label":{"api":{"toString()":[[4,13]]}}},{"text":"You could also change the code to create a new ConsoleHandler and add it to the root logger after you have remapped the error stream","label":{"api":{"ConsoleHandler":[[47,60]]}}},{"text":"The javadoc of Spliterator (which is basically what is really behind a Stream if I understand things correctly) defines many characeristics which make sense such as SIZED, CONCURRENT, IMMUTABLE etc","label":{"api":{"Spliterator":[[15,25]],"Stream":[[71,76]],"SIZED":[[165,169]],"CONCURRENT":[[172,181]],"IMMUTABLE":[[184,192]]}}},{"text":"But it also defines NONNULL; why","label":{"api":{"NONNULL":[[20,26]]}}},{"text":"The javadoc of Spliterator itself doesn't mention any real usage of it, and neither does the package-info.java of the java.util.stream package..","label":{"api":{"Spliterator":[[15,25]],"java.util.stream":[[118,133]]}}},{"text":"Scanner input = new Scanner (\"Grades.txt\"); uses Scanner(String) which means it will use the String parameter as the source to read the data","label":{"api":{"Scanner(String)":[[49,63]],"String":[[93,98]]}}},{"text":"In case you want/need to append data to the end of the output, then use FileWriter(String, boolean) and pass the second parameter as true","label":{"api":{"FileWriter(String, boolean)":[[72,98]]}}},{"text":"Note that this is no different from Java, it is, in fact, exactly equivalent to java.lang.Iterable.forEach","label":{"api":{"java.lang.Iterable.forEach":[[80,105]]}}},{"text":"One of the option to try is to use http://docs.oracle.com/javase/7/docs/api/java/net/URLConnection.html and obtain the source of the page","label":{"api":{}}},{"text":"Java 9 added the static factory method Stream.<T>ofNullable(T), which returns the empty stream given a null argument, otherwise a stream with the argument as its only element","label":{"api":{"Stream.<T>ofNullable(T)":[[39,61]]}}},{"text":"If the argument is a collection, we can then flatMap to turn it into a stream","label":{"api":{"flatMap":[[45,51]]}}},{"text":"It also works with an upper-bounded wildcard without needing SuppressWarnings(\"unchecked\") thanks to the signature of flatMap, so you can get a Stream<T> from a collection of elements of any subtype of T","label":{"api":{"SuppressWarnings(\"unchecked\")":[[61,89]],"flatMap":[[118,124]],"Stream<T>":[[144,152]]}}},{"text":"You can use DecimalFormat class","label":{"api":{"DecimalFormat":[[12,24]]}}},{"text":"You can do it in O(n), if you use some data structure that supports O(1) get operations - for example HashMap","label":{"api":{"HashMap":[[102,108]]}}},{"text":"One of those methods is the Object.equals() method - here is its documentation","label":{"api":{"Object.equals()":[[28,42]]}}},{"text":"From the Properties.store documentation","label":{"api":{"Properties.store":[[9,24]]}}},{"text":"println(char[] s) does somewhat confuse me in the Oracle Doc - In C you would generally iterate through every element within the array and print each element follow by a \\n to break the line","label":{"api":{"println(char[] s)":[[0,16]]}}},{"text":"Another option would be to use Document","label":{"api":{"Document":[[31,38]]}}},{"text":"Since Java 8, you can use the Stream API for things like that","label":{"api":{"Stream":[[30,35]]}}},{"text":"You can search for objects that satisfy a certain condition using filter()","label":{"api":{"filter()":[[66,73]]}}},{"text":"You can sort the list using a custom Comparator","label":{"api":{"Comparator":[[37,46]]}}},{"text":"If you are using Java 7 and below, you should use Collections.sort() and create an explicit Comparator","label":{"api":{"Collections.sort()":[[50,67]],"Comparator":[[92,101]]}}},{"text":"You should use the Thread#start() method instead of Thread#run()","label":{"api":{"Thread#start()":[[19,32]],"Thread#run()":[[52,63]]}}},{"text":"Although the documentation isn't as clear as it could be, GridBagConstraints is a lot easier to use when you make use of GridBagConstraints.RELATIVE and GridBagConstraints.REMAINDER","label":{"api":{"GridBagConstraint":[[58,74]],"GridBagConstraints.RELATIVE":[[121,147]],"GridBagConstraints.REMAINDER":[[153,180]]}}},{"text":"It sounds like you want to pass in the class (rather than an instance of the class) and use Class.isInstance","label":{"api":{"Class.isInstance":[[92,107]]}}},{"text":"You can use global exception handler for UI thread","label":{"api":{}}},{"text":"Class Scanner associated with class File allows you to read easily this kind of file","label":{"api":{"Scanner":[[6,12]],"File":[[36,39]]}}},{"text":"Example from Scanner doc","label":{"api":{"Scanner":[[13,19]]}}},{"text":"Use a BufferedImage","label":{"api":{"BufferedImage":[[6,18]]}}},{"text":"You can even draw on them if it matters for your test","label":{"api":{}}},{"text":"Also I think you want to use Comparable instead of your own Comparator","label":{"api":{"Comparable":[[29,38]],"Comparator":[[60,69]]}}},{"text":"Math.signum() provides what you ask for","label":{"api":{"Math.signum()":[[0,12]]}}},{"text":"You want to use the matches() method instead of equals()","label":{"api":{"matches()":[[20,28]],"equals()":[[48,55]]}}},{"text":"You could write the file to a string and iterate over the keys in your dictionary and check if they are present in the paragraph with contains","label":{"api":{"contains":[[134,141]]}}},{"text":"See http://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html as there is a good example in the description","label":{"api":{}}},{"text":"If I understand correctly, System.currentTimeMillis() is faster, and System.nanoTime() is more accurate","label":{"api":{"System.currentTimeMillis()":[[27,52]],"System.nanoTime()":[[69,85]]}}},{"text":"If I am pinging a server, which in worst case I expect to take...lets go extreme...one minute, is System.currentTimeMillis() still going to be accurate within 1-2 milliseconds","label":{"api":{"System.currentTimeMillis()":[[98,123]]}}},{"text":"Or should I go with System.nanoTime()","label":{"api":{"System.nanoTime()":[[20,36]]}}},{"text":"As you can see, I am currently using System.nanoTime(), but am unsure if I should be using System.currentTimeMillis()","label":{"api":{"System.nanoTime()":[[37,53]],"System.currentTimeMillis()":[[91,116]]}}},{"text":"System.currentTimeMillis vs System.nanoTime has a lot of great information on the subject, but not specifics on accuracy of System.currentTimeMillis()","label":{"api":{"System.currentTimeMillis":[[0,23]],"System.nanoTime":[[28,42]],"System.currentTimeMillis()":[[124,149]]}}},{"text":"In java, rectangles are defined by upper-left corner coordinates, width and height","label":{"api":{"rectangles":[[9,18]]}}},{"text":"Look at JComboBox's constructors","label":{"api":{"JComboBox":[[8,16]]}}},{"text":"The getYear() method returns the date \"minus 1900\", so that 1999 is 99, 2000 is 100, etc","label":{"api":{"getYear()":[[4,12]]}}},{"text":"Instead, use a SimpleDateFormat object to control your formatting","label":{"api":{"SimpleDateFormat":[[15,30]]}}},{"text":"Concrete implementations of Graphics2D on each supported platform direct painting to a heavyweight peer component provided by the host, e.g","label":{"api":{"Graphics2D":[[28,37]]}}},{"text":"Use a PauseTransition instead","label":{"api":{"PauseTransition":[[6,20]]}}},{"text":"Yes, but use javax.json - http://docs.oracle.com/javaee/7/api/javax/json/package-summary.html","label":{"api":{"javax.json":[[13,22]]}}},{"text":"Use Enum.valueOf(Class<T>, String) or rather implicitly defined valueOf(String) method, which returns the constant with the given name","label":{"api":{"Enum.valueOf(Class<T>, String)":[[4,33]],"valueOf(String)":[[64,78]]}}},{"text":"In Scanner, if you take nextDouble() method, it throws various exceptions depending on the status of the scanner","label":{"api":{"Scanner":[[3,9]],"nextDouble()":[[24,35]]}}},{"text":"If you are using Java 8 you can use filter()","label":{"api":{"filter()":[[36,43]]}}},{"text":"Try to use Socket.setTcpNoDelay(boolean)","label":{"api":{"Socket.setTcpNoDelay(boolean)":[[11,39]]}}},{"text":"You can use setName(String name) from Thread class to identify the producer threads accordingly","label":{"api":{"setName(String name)":[[12,31]],"Thread":[[38,43]]}}},{"text":"From the Javadocs of Thread#start()","label":{"api":{"Thread#start()":[[21,34]]}}},{"text":"quoting the javadoc of PrintStream.print(String)","label":{"api":{"PrintStream.print(String)":[[23,47]]}}},{"text":"Work with Future rather than with Runnable","label":{"api":{"Future":[[10,15]],"Runnable":[[34,41]]}}},{"text":"There's this Future#isDone method that may help you","label":{"api":{"Future#isDone":[[13,25]]}}},{"text":"In case you don't have anything meaningful to return from the Callable, use Callable<Void> and Future<Void>","label":{"api":{"Callable":[[62,69]],"Callable<Void>":[[76,89]],"Future<Void>":[[95,106]]}}},{"text":"According to the documentation for Java agents the agent class is loaded by the system classloader","label":{"api":{"agents":[[40,45]],"agent":[[51,55]],"system classloader":[[80,97]]}}},{"text":"From the Set interface documentation","label":{"api":{"Set":[[9,11]]}}},{"text":"The same thing applies to Map keys, and you will find an equivalent statement in the Map interface documentation","label":{"api":{"Map":[[85,87]]}}},{"text":"From the Java Semaphore documentation","label":{"api":{"Semaphore":[[14,22]]}}},{"text":"The Scanner(String) variant gives you a scanner which reads the string, not the file that the string refers to","label":{"api":{"Scanner(String)":[[4,18]]}}},{"text":"You're using the method in the Writer class that takes an int as an argument, with the lower 16 bits of the int representing the Unicode code point, and the corresponding character being printed to the file as shown by this table","label":{"api":{"Writer":[[31,36]]}}},{"text":"Given a StyledDocument, as shown here, you can invoke setCharacterAttributes() with whatever style you want","label":{"api":{"StyledDocument":[[8,21]],"setCharacterAttributes()":[[54,77]]}}},{"text":"You could use a Pattern regular expression to achieve that","label":{"api":{"Pattern regular expression":[[16,41]]}}},{"text":"To listen ObservableList I am using the following code in listener","label":{"api":{"ObservableList":[[10,23]]}}},{"text":"But this contradicts the statement from ListChangeListener javadoc saying getList() should work at any time, and that getAddedSubList() is just a shortcut of getList() expression","label":{"api":{"ListChangeListener":[[40,57]],"getList()":[[74,82],[158,166]],"getAddedSubList()":[[118,134]]}}},{"text":"Next, use a Set which will prevent duplicates (a LinkedHashSet, for example, preserves insertion order)","label":{"api":{"Set":[[12,14]],"LinkedHashSet":[[49,61]]}}},{"text":"by a Comparator","label":{"api":{"Comparator":[[5,14]]}}},{"text":"But at a more fundamental level, if the program is intended to work with that file always (i.e., if the file is a resource for the program), you might want to turn to Class#getResourceAsStream()","label":{"api":{"Class#getResourceAsStream()":[[167,193]]}}},{"text":"In that case, the existing TimeUnit enum is definitely your friend","label":{"api":{"TimeUnit":[[27,34]]}}},{"text":"As @Louis Wasserman suggests, for these purposes, classes in the java.util.concurrent.atomic package provide reliable and easy to use methods, such as compareAndSet(...) and incrementAndGet()","label":{"api":{"java.util.concurrent.atomic":[[65,91]],"compareAndSet(...)":[[151,168]],"incrementAndGet()":[[174,190]]}}},{"text":"For example, actions taken by a thread before it calls countDown() on a CountDownLatch are visible to threads that return from a call to await() on that latch","label":{"api":{"countDown()":[[55,65]],"CountDownLatch":[[72,85]],"await()":[[137,143]]}}},{"text":"The method Random.nextInt(int n) gives you back a number such that 0 ≤ number < n","label":{"api":{"Random.nextInt(int n)":[[11,31]]}}},{"text":"There is a set of predefined layout panes, subclassing Pane, which lay the child nodes out in different ways","label":{"api":{"Pane":[[55,58]]}}},{"text":"The Pane class does no layout, so using it is the closest equivalent to using a null layout manager in Swing","label":{"api":{"Pane":[[4,7]],"Swing":[[103,107]]}}},{"text":"Check out the String#split method","label":{"api":{"String#split":[[14,25]]}}},{"text":"UDP is done with the DatagramSocket","label":{"api":{"DatagramSocket":[[21,34]]}}},{"text":"The nio functionality can be achieved by getting the associated channel","label":{"api":{}}},{"text":"Yes, you can create different Predicate and use them based on condition","label":{"api":{"Predicate":[[30,38]]}}},{"text":"A possibility would be to get rid of local and use compareAndSet on an AtomicBoolean which would play the role of shared_var at the moment","label":{"api":{"compareAndSet":[[51,63]],"AtomicBoolean":[[71,83]]}}},{"text":"This way, every thread should get a reference (excuse my loose nomenclature) to the AtomicBoolean used for signaling and use compareAndSet to atomically update the value of the variable in a way that is visible immediately to the other threads","label":{"api":{"AtomicBoolean":[[84,96]],"compareAndSet":[[125,137]]}}},{"text":"You can use a custom Comparator to compare the arrays by the third element","label":{"api":{"Comparator":[[21,30]]}}},{"text":"you assign to \"fields\" the Field[] object (returned from Class.getDeclaredFields()), not a Class[]","label":{"api":{"Field[]":[[27,33]],"Class.getDeclaredFields()":[[57,81]],"Class[]":[[91,97]]}}},{"text":"As the Field class does not have a 'superclass' getter, your code in .ftl causes an exception","label":{"api":{"Field":[[7,11]]}}},{"text":"but Field class has a method getDeclaringClass(), which gives a Class reference","label":{"api":{"Field":[[4,8]],"getDeclaringClass()":[[29,47]],"Class":[[64,68]]}}},{"text":"DelayQueue is similar to what you want, except that it is time oriented","label":{"api":{"DelayQueue":[[0,9]]}}},{"text":"Try calling inheritIO","label":{"api":{"inheritIO":[[12,20]]}}},{"text":"I was testing a piece of our date management framework which is supposed to reset some Calendar fields (using actual minimum)","label":{"api":{"Calendar":[[87,94]]}}},{"text":"However, when changing first day of week, Calendar always return SUNDAY (1) as actual minimum for day of weeks","label":{"api":{"Calendar":[[42,49]],"SUNDAY":[[65,70]]}}},{"text":"Date class documentation, (see link for extra info)","label":{"api":{"Date":[[0,3]]}}},{"text":"Servlet 3.0 specification introduced standard way for servlet containers to handle multipart/form-data with introduction of MultipartConfigElement for configuration and Part interface and Spring MVC integrates with these with no problems","label":{"api":{"MultipartConfigElement":[[124,145]],"Part":[[169,172]],"Spring MVC":[[188,197]]}}},{"text":"I want to get full path to file that is being output by Part.write() method, skipping unnecessary InputStream reading","label":{"api":{"Part.write()":[[56,67]],"InputStream":[[98,108]]}}},{"text":"The files uploaded to my controller, due to their size, will most probably end up as temporary files output to disk by servlet container, therefore Part.write() will move the file into target name instead of misusing RAM resources","label":{"api":{"Part.write()":[[148,159]]}}},{"text":"I create the path to written file using autowired MultipartConfigElement that Spring happens to have as a bean","label":{"api":{"MultipartConfigElement":[[50,71]]}}},{"text":"What about application that does not use Spring and doesn't have access to injected MultipartConfigElement bean","label":{"api":{"Spring":[[41,46]],"MultipartConfigElement":[[84,105]]}}},{"text":"The method contains() is valid for Collections, not for Array","label":{"api":{"contains()":[[11,20]],"Collections":[[35,45]],"Array":[[56,60]]}}},{"text":"In order to use this method, you need to convert your arrays into Collections first","label":{"api":{"Collections":[[66,76]]}}},{"text":"3.) If you need some form of notifcation once your thread has finised, you should use Callable in conjuction with Futures instead","label":{"api":{"Callable":[[86,93]],"Futures":[[114,120]]}}},{"text":"Simply said, you need a verifiable condition which is checked before and after calling wait() as explained in the documentation of wait()","label":{"api":{"wait()":[[87,92],[131,136]]}}},{"text":"There is in this case however little use to do so, especially because String objects are immutable, as you can read in the manual","label":{"api":{"String":[[70,75]],"manual":[[123,128]]}}},{"text":"Take a look at Java's Runtime.exec(), or ProcessBuilder if you need something fancier","label":{"api":{"Runtime.exec()":[[22,35]],"ProcessBuilder":[[41,54]]}}},{"text":"If you want to model the case where next may or may point to another Node object you could use Optional (docs here)","label":{"api":{"Node":[[69,72]],"Optional":[[95,102]]}}},{"text":"When you start a thread, its run() method is executed (in a separate thread)","label":{"api":{"run()":[[29,33]]}}},{"text":"By default, the run() method does nothing","label":{"api":{"run()":[[16,20]]}}},{"text":"In fact, this is what the getElementText() method does for you - accumulates the data in a StringBuffer while going through CHARACTERS events until it hits the END_ELEMENT","label":{"api":{"getElementText()":[[26,41]],"StringBuffer":[[91,102]],"CHARACTERS":[[124,133]],"END_ELEMENT":[[160,170]]}}},{"text":"As a reminder, from the Object documentation","label":{"api":{"Object":[[24,29]]}}},{"text":"Try adding @Stateless annotation to your SecurityInterceptor class","label":{"api":{"@Stateless":[[11,20]],"SecurityInterceptor":[[41,59]]}}},{"text":"You can try to use isPressed() method to check if the JButton is pressed","label":{"api":{"isPressed()":[[19,29]],"JButton":[[54,60]]}}},{"text":"The documentation  (http://docs.oracle.com/javase/7/docs/api/java/io/IOException.html) contains a long list of direct subclasses","label":{"api":{}}},{"text":"From the javadoc of Class.getMethods()","label":{"api":{"Class.getMethods()":[[20,37]]}}},{"text":"You can use Collections.sort to sort the array and then use your own Comparator to specify how you want to sort the values","label":{"api":{"Collections.sort":[[12,27]],"Comparator":[[69,78]]}}},{"text":"You've to actually invoke the method to get the result back using Method#invoke() method","label":{"api":{"Method#invoke()":[[66,80]]}}},{"text":"Then you can try isEmpty() method","label":{"api":{"isEmpty()":[[17,25]]}}},{"text":"Neither can String#split","label":{"api":{"String#split":[[12,23]]}}},{"text":"If what you want is to remove FIRST ELEMENT only, use LinkedList::remove()","label":{"api":{"LinkedList::remove()":[[54,73]]}}},{"text":"In this version of gwt the RemoteServiceRelativePath annotation doesn't have @Retention(RetentionPolicy.RUNTIME) on it, so the RemoteServiceRelativePath annotation is not available at the runtime","label":{"api":{"RemoteServiceRelativePath":[[27,51],[127,151]],"@Retention(RetentionPolicy.RUNTIME)":[[77,111]]}}},{"text":"Apart from the methods already mentioned, you can also use map.forEach() to iterate across your map entries in insertion order","label":{"api":{"map.forEach()":[[59,71]]}}},{"text":"Use a DataOutputStream to write an integer at the start that represents the amount of bytes that are written afterwards","label":{"api":{"DataOutputStream":[[6,21]]}}},{"text":"I noticed you are using the Cipher class in a wrong way","label":{"api":{"Cipher":[[28,33]]}}},{"text":"This will make sure, that the Cipher is only using the bytes it should","label":{"api":{"Cipher":[[30,35]]}}},{"text":"This kind of thing will be far easier if you use the purpose-built concurrency tools like LinkedBlockingQueue rather than a plain HashSet","label":{"api":{"LinkedBlockingQueue":[[90,108]],"HashSet":[[130,136]]}}},{"text":"Have the producer add elements to the queue, and the consumer can use drainTo to extract elements from the queue in batches as it requires them","label":{"api":{"drainTo":[[70,76]]}}},{"text":"If I understood correctly the detach you should do something like that","label":{"api":{}}},{"text":"Try using executeUpdate() method on the Statement","label":{"api":{"executeUpdate()":[[10,24]],"Statement":[[40,48]]}}},{"text":"Since you are inside the Solution class, and it implements Comparator<Integer>, you probably mean","label":{"api":{"Solution":[[25,32]],"Comparator<Integer>":[[59,77]]}}}]