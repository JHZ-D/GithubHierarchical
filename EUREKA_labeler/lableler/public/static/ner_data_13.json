[{"text":"If they did not, you get an IllegalArgumentException, which you can catch with a try...catch block","label":{"api":{"IllegalArgumentException":[[28,51]]}}},{"text":"One way of achieving this is calling Integer.compare (assuming that minute is an int in your myclass class)","label":{"api":{"Integer.compare":[[37,51]]}}},{"text":"RandomAccessFile has writeDouble / readDouble methods that I think do exactly what you want - ie, dumping primitive values \"as such\" in a file and reading them back","label":{"api":{"RandomAccessFile":[[0,15]],"writeDouble":[[21,31]],"readDouble":[[35,44]]}}},{"text":"To make code less cluttered, one can use Stream-related functionality that is available starting from Java 1.8","label":{"api":{"Stream":[[41,46]]}}},{"text":"Even changing the default Locale with Locale.setDefault(Locale.JAPANESE); won't help","label":{"api":{"Locale":[[26,31]],"Locale.setDefault(Locale.JAPANESE)":[[38,71]]}}},{"text":"You should also use a java.sql.PreparedStatement like this","label":{"api":{"java.sql.PreparedStatement":[[22,47]]}}},{"text":"Are you looking for String.split(String regex)","label":{"api":{"String.split(String regex)":[[20,45]]}}},{"text":"You should also look at the contains method","label":{"api":{"contains":[[28,35]]}}},{"text":"You'll want to use a HashMap to avoid recalculating the same numbers multiple times","label":{"api":{"HashMap":[[21,27]]}}},{"text":"Checking if the HashMap already contains the number is a quick process and can save you many steps","label":{"api":{"HashMap":[[16,22]]}}},{"text":"You threw away your bind parameter when you passed the SQL to Statement#executeQuery - use this one from PreparedStatement..","label":{"api":{"Statement#executeQuery":[[62,83]],"PreparedStatement":[[105,121]]}}},{"text":"You can get all the getters using Introspector","label":{"api":{"Introspector":[[34,45]]}}},{"text":"I have tried looking at How does Java Dispatch KeyEvents as well as the KeyboardFocusManager and KeyEventDispatcher APIs, but I haven't been able to figure it out, nor is it even clear that these were the correct places to be looking for an answer","label":{"api":{"KeyboardFocusManager":[[72,91]],"KeyEventDispatcher":[[97,114]]}}},{"text":"You should be able to achieve this by using indexOf and subList","label":{"api":{"indexOf":[[44,50]],"subList":[[56,62]]}}},{"text":"http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html you could just use indexOf and lastIndexOf","label":{"api":{"indexOf":[[85,91]],"lastIndexOf":[[97,107]]}}},{"text":"Read the documentation about String.format() and the format string syntax","label":{"api":{"String.format()":[[29,43]]}}},{"text":"You can use JDK ImageIO to do this (http://docs.oracle.com/javase/6/docs/api/javax/imageio/ImageIO.html)","label":{"api":{"ImageIO":[[16,22]]}}},{"text":"By calling the setFileFilter method","label":{"api":{"setFileFilter":[[15,27]]}}},{"text":"Rather than putting the call in every JSP I would register a ServletRequestListener, which gets notified both when the request starts and when it finishes","label":{"api":{"ServletRequestListener":[[61,82]]}}},{"text":"String#replaceAll can take a regex","label":{"api":{"String#replaceAll":[[0,16]]}}},{"text":"Querying the map using the ceilingEntry method and passing the random number will return the \"mapping associated with the least key greater than or equal to the given key\", so e.g","label":{"api":{}}},{"text":"Actually the constructor needs a Writer and you could provide a StringWriter to create a String","label":{"api":{"Writer":[[33,38]],"StringWriter":[[64,75]],"String":[[89,94]]}}},{"text":"To modify the example given here, just use a StringWriter instead of a FileWriter","label":{"api":{"StringWriter":[[45,56]],"FileWriter":[[71,80]]}}},{"text":"I know XML schema is itself XML, so I can use Document, Element, Node and other classes/interfaces from org.w3c.dom, but I wonder is there something more convenient","label":{"api":{"Document":[[46,53]],"Element":[[56,62]],"Node":[[65,68]],"org.w3c.dom":[[104,114]]}}},{"text":"Have a look at the Scanner API and the Scanner tutorial (which are the first and second results for googling \"Java Scanner\") for more info","label":{"api":{"Scanner":[[19,25],[39,45]]}}},{"text":"Have you try using 'Semaphore' at Oracle Docs","label":{"api":{"Semaphore":[[20,28]]}}},{"text":"It's simple do get a Double from a double, using the Double.valueof(double d) method of the Double class","label":{"api":{"Double":[[21,26],[92,97]],"Double.valueof(double d)":[[53,76]]}}},{"text":"If you look at the ArrayList api and take a look at the class declaration, you see it is declared like this","label":{"api":{"ArrayList":[[19,27]]}}},{"text":"java.util.concurrent.TimeUnit is your best friend when dealing with converting units of time","label":{"api":{"java.util.concurrent.TimeUnit":[[0,28]]}}},{"text":"ExecutorService and Service are interfaces and so only have abstract methods, which means that their methods are not implemented","label":{"api":{"ExecutorService":[[0,14]],"Service":[[20,26]]}}},{"text":"NumberFormat is probably better than String.format for this purpose","label":{"api":{"NumberFormat":[[0,11]],"String.format":[[37,49]]}}},{"text":"You can use a decimal formatter for the specified pattern","label":{"api":{"decimal formatter":[[14,30]]}}},{"text":"Is there a way to make a HTMLEditor text wrap in JavaFX","label":{"api":{"HTMLEditor":[[25,34]]}}},{"text":"TextArea has the method setWrapText","label":{"api":{"TextArea":[[0,7]],"setWrapText":[[24,34]]}}},{"text":"The JavaFX CSS documentation specifies -fx-wrap-text for Labeled nodes, but that doesn't seem to work","label":{"api":{"JavaFX CSS":[[4,13]]}}},{"text":"You could just do position + 1 or position - 1, or you can actually use a random spot using the Random class","label":{"api":{"Random":[[96,101]]}}},{"text":"As others have mentioned, you can use the Random class to generate random values","label":{"api":{"Random":[[42,47]]}}},{"text":"The shutdown hook part is in Runtime","label":{"api":{"Runtime":[[29,35]]}}},{"text":"What you are looking for is javax.crypto.SealedObject or java.security.SignedObject","label":{"api":{"javax.crypto.SealedObject":[[28,52]],"java.security.SignedObject":[[57,82]]}}},{"text":"Alternatively you can use a ProcessBuilder","label":{"api":{"ProcessBuilder":[[28,41]]}}},{"text":"StringBuilder is an object not a wrapper","label":{"api":{"StringBuilder":[[0,12]]}}},{"text":"Note that if you had used @Override annotation, your compiler would have produced an error because this method does not override anything :) Using this annotation is a good habit IMO","label":{"api":{"@Override":[[26,34]]}}},{"text":"And if you do not know the size before hand, then it is better to use an ArrayList instead of an array","label":{"api":{"ArrayList":[[73,81]]}}},{"text":"You need to iterate your array element one by one, use String.startsWith(prefixText) function to check your string is start with search text, add your search element in one List and convert that list into array return that array","label":{"api":{"String.startsWith(prefixText)":[[55,83]]}}},{"text":"String#replaceAll() method takes a regex as first parameter","label":{"api":{"String#replaceAll()":[[0,18]]}}},{"text":"You can just use String#replace() instead","label":{"api":{"String#replace()":[[17,32]]}}},{"text":"Consider to use NumberFormat.getCurrencyInstance or DecimalFormat","label":{"api":{"NumberFormat.getCurrencyInstance":[[16,47]],"DecimalFormat":[[52,64]]}}},{"text":"NumberFormat provides a parse method","label":{"api":{"NumberFormat":[[0,11]],"parse":[[24,28]]}}},{"text":"When you open a file using java.io.FileWriter, you can pass a second boolean argument to the constructor that indicates whether you want to append (true) or overwrite (false) existing data","label":{"api":{"java.io.FileWriter":[[27,44]]}}},{"text":"You might want to read all of http://docs.oracle.com/javaee/6/api/javax/persistence/EntityManager.html to see what it can do","label":{"api":{}}},{"text":"As the manual says, the throwable is the 6th parameter of the method format","label":{"api":{"throwable":[[24,32]]}}},{"text":"The default toString() implementation in Object returns a string that looks like \"fully.qualified.ClassName@objectID\"","label":{"api":{"toString()":[[12,21]],"Object":[[41,46]]}}},{"text":"The documentation of RetentionPolicy.CLASS says","label":{"api":{"RetentionPolicy.CLASS":[[21,41]]}}},{"text":"I don't know if there is an easier way, but you could create a ServletContextListener and run a test query from contextInitialized()","label":{"api":{"ServletContextListener":[[63,84]],"contextInitialized()":[[112,131]]}}},{"text":"It is an error to declare a class Serializable if this is not the case","label":{"api":{"Serializable":[[34,45]]}}},{"text":"And your case is that X509v3CertificateBuilder doesn't implements Serializable and X509v3CertificateBuilder has no accessible (public or protected) no-arg constructor","label":{"api":{"X509v3CertificateBuilder":[[22,45],[83,106]],"Serializable":[[66,77]]}}},{"text":"What you need, you will easyly find at the String documentation","label":{"api":{"String":[[43,48]]}}},{"text":"Otherwise, based on my understanding in the Timer class, it only waits one second, which might be too short of a timespan for what you're waiting to capture","label":{"api":{"Timer":[[44,48]]}}},{"text":"I can get the Field no problem, and then getGenericType, but that just returns a Type which has no methods on it","label":{"api":{"Field":[[14,18]],"getGenericType":[[41,54]],"Type":[[81,84]]}}},{"text":"I can cast it to ParameterizedType, but getActualTypeArguments()","label":{"api":{"ParameterizedType":[[17,33]],"getActualTypeArguments()":[[40,63]]}}},{"text":"The toString() method on the ParameterizedType returns the expected value, there seems to be no way to access the information on the wildcard upper boud, and all the implementations of ParameterizedType seem to be in sun","label":{"api":{"toString()":[[4,13]],"ParameterizedType":[[29,45],[185,201]]}}},{"text":"Character.isWhitespace can help you solve your problem","label":{"api":{"Character.isWhitespace":[[0,21]]}}},{"text":"Asusming the real problem ou're asking about is \"how to find an integer in an int[] array\", why not just use Arrays.html#binarySearch","label":{"api":{"Arrays.html#binarySearch":[[109,132]]}}},{"text":"You can use the JavaCompiler to compile any java code to a class file","label":{"api":{"JavaCompiler":[[16,27]]}}},{"text":"You can then load the resulting class with a URLClassLoader","label":{"api":{"URLClassLoader":[[45,58]]}}},{"text":"You should create your own ClassLoader implementation, override its loadClass method and there call defineClass, providing it with the bytecode","label":{"api":{"ClassLoader":[[27,37]],"loadClass":[[68,76]],"defineClass":[[100,110]]}}},{"text":"Then you instantiate you ClassLoader and get your class from it that way","label":{"api":{"ClassLoader":[[25,35]]}}},{"text":"It's not really clear what you want to do with all these static methods in the Enum, but regarding the asked issue, have a look at EnumSet and its contains method","label":{"api":{"Enum":[[79,82]],"EnumSet":[[131,137]],"contains":[[147,154]]}}},{"text":"When you think \"polling\" or \"update at intervals\", use a ScheduledExecutorService to execute \"check for data update\" tasks at regular intervals","label":{"api":{"ScheduledExecutorService":[[57,80]]}}},{"text":"You can decide to let the daemon thread do the work for the event, or create tasks for the event and let those tasks be executed by an ExecutorService like a CachedThreadPool","label":{"api":{"ExecutorService":[[135,149]],"CachedThreadPool":[[158,173]]}}},{"text":"Use an java.util.concurrent.ExecutorService","label":{"api":{"java.util.concurrent.ExecutorService":[[7,42]]}}},{"text":"Creating java.lang.Threads in a loop, as other anwsers suggest, is a bad idea because threads are not limitless resources but your list of user names could be large","label":{"api":{"java.lang.Thread":[[9,24]]}}},{"text":"Here's how the code would look with a java.util.concurrent.ExecutorService","label":{"api":{"java.util.concurrent.ExecutorService":[[38,73]]}}},{"text":"Using a PauseTransition is simple because it keeps everything on the JavaFX Application thread and you don't need to worry about potential threading issues","label":{"api":{"PauseTransition":[[8,22]]}}},{"text":"Your rs.absolute(index) moves the cursor back (to row 1) and the while(rs.next()) loop never ends","label":{"api":{"rs.absolute(index)":[[5,22]]}}},{"text":"I'd like to test a universal view for a JavaFX-Task using Junit4","label":{"api":{"Junit4":[[58,63]]}}},{"text":"The problem is that the test thread seems to \"run\" through the testDummyTask method and once it has reached the end of the test function, it immediately tears down everything","label":{"api":{"testDummyTask":[[63,75]]}}},{"text":"The method TaskBarController.start() is defined as follows","label":{"api":{"TaskBarController.start()":[[11,35]]}}},{"text":"http://docs.oracle.com/javase/7/docs/api/javax/swing/Timer.html#stop(), method stop","label":{"api":{"stop":[[79,82]]}}},{"text":"compareTo doesn't always make sense, sometimes the objects cannot be logically ordered","label":{"api":{"compareTo":[[0,8]]}}},{"text":"Also note that equals always exists, since it's defined in Object class","label":{"api":{"equals":[[15,20]],"Object":[[59,64]]}}},{"text":"It's a good practice to always haven equals method when you have compareTo, and they should be consistent","label":{"api":{"equals":[[37,42]],"compareTo":[[65,73]]}}},{"text":"You can create your own custom object serializer in Java with the Externalizable interface","label":{"api":{"Externalizable":[[66,79]]}}},{"text":"See the API docs of class java.lang.Class and the package java.lang.reflect","label":{"api":{"java.lang.Class":[[26,40]],"java.lang.reflect":[[58,74]]}}},{"text":"Please have a look to the ScriptEngine class to understand how to handle return values and how to modify my eval function as per your needs","label":{"api":{"ScriptEngine":[[26,37]],"eval":[[108,111]]}}},{"text":"What you're describing, however, would best be implemented by either a Supplier or a Future, depending on the work involved in successfully constructing the object you need","label":{"api":{"Supplier":[[71,78]],"Future":[[85,90]]}}},{"text":"The difference is somewhat pedantic, but you'd generally use a Future to hold a reference that will take a long time to compute, while a Supplier generally returns quickly","label":{"api":{"Future":[[63,68]],"Supplier":[[137,144]]}}},{"text":"Future also has some nice hook-ins with Java's concurrency utilities, but by the sound of it you don't need that","label":{"api":{"Future":[[0,5]]}}},{"text":"http://docs.oracle.com/javase/7/docs/api/java/nio/MappedByteBuffer.html and http://www.codeproject.com/Tips/683614/10-Things-to-Know-about-Memory-Mapped-File-in-Java","label":{"api":{}}},{"text":"If you're using JNDI you can use a NamingListener or one of its sub-interfaces, if the server supports notifications","label":{"api":{"JNDI":[[16,19]],"NamingListener":[[35,48]]}}},{"text":"You can call System.currentTimeMillis(), which returns a long","label":{"api":{"System.currentTimeMillis()":[[13,38]]}}},{"text":"Number is also a super-class of AtomicInteger and AtomicLong","label":{"api":{"Number":[[0,5]],"AtomicInteger":[[32,44]],"AtomicLong":[[50,59]]}}},{"text":"If Number had an add() method these sub-classes would have had to implement it as well, which is impossible to do while preserving the atomicity","label":{"api":{"Number":[[3,8]],"add()":[[17,21]]}}},{"text":"Java supports XSL transformations using the javax.xml.transform package","label":{"api":{"javax.xml.transform":[[44,62]]}}},{"text":"Instead of using a RequestDispatcher you must build a redirect URL and perform HttpServletResponse.sendRedirect","label":{"api":{"RequestDispatcher":[[19,35]],"HttpServletResponse.sendRedirect":[[79,110]]}}},{"text":"If they are also Serializable then, yes otherwise you'll get a NotSerializableException","label":{"api":{"Serializable":[[17,28]],"NotSerializableException":[[63,86]]}}},{"text":"From the error alone it is apparent that a function or class cannot be found and that you therefore are missing libraries or are using the wrong ones","label":{"api":{}}},{"text":"a HashMap of ArrayLists of some kind of pair or coordinate object","label":{"api":{"HashMap":[[2,8]],"ArrayLists":[[13,22]]}}},{"text":"HashMap can also accept a String (instead of Integer) as a key for the lists within","label":{"api":{"HashMap":[[0,6]],"String":[[26,31]],"Integer":[[45,51]]}}},{"text":"You can strip the hyphens with String.replace","label":{"api":{"String.replace":[[31,44]]}}},{"text":"See JavaSound documentation for more information","label":{"api":{"JavaSound":[[4,12]]}}},{"text":"See also ExecutorService for another server example","label":{"api":{"ExecutorService":[[9,23]]}}},{"text":"It turns out that the constructor of Media would throw MediaException - this is the exception that you need to catch","label":{"api":{"Media":[[37,41]],"MediaException":[[55,68]]}}},{"text":"If you read the HBox documentation, you will see the following","label":{"api":{"HBox":[[16,19]]}}},{"text":"HBox will resize children (if resizable) to their preferred widths and uses its fillHeight property to determine whether to resize their heights to fill its own height or keep their heights to their preferred (fillHeight defaults to true)..","label":{"api":{"fillHeight":[[80,89],[210,219]]}}},{"text":"As said, if for some reason you set the fillHeight property from HBox, you can make the nodes contained within to fill the vacant vertical space, But this will only occur for the nodes that are resizable","label":{"api":{"fillHeight":[[40,49]],"HBox":[[65,68]]}}},{"text":"You can use EnumMap from JDK","label":{"api":{"EnumMap":[[12,18]]}}},{"text":"You have to use Collections.sort() method","label":{"api":{"Collections.sort()":[[16,33]]}}},{"text":"To print it directly, use PrintWriter.printf, e.g","label":{"api":{"PrintWriter.printf":[[26,43]]}}},{"text":"The NumberFormat class has a pre-defined instance for currency formatting","label":{"api":{"NumberFormat":[[4,15]]}}},{"text":"You need to url encode your URI or your files","label":{"api":{}}},{"text":"Refer to http://docs.oracle.com/javase/7/docs/api/java/lang/String.html for the different ways to manipulate/parse strings","label":{"api":{}}},{"text":"See http://docs.oracle.com/javase/6/docs/api/java/io/PrintStream.html#println(java.lang.String) to understand what println does","label":{"api":{"println":[[115,121]]}}},{"text":"This will give you a value between [0, 255]","label":{"api":{}}},{"text":"Check out Runtime","label":{"api":{"Runtime":[[10,16]]}}},{"text":"You can use Futuretask (or just Future)","label":{"api":{"Futuretask":[[12,21]],"Future":[[32,37]]}}},{"text":"Use a Comparator, or have Website extend Comparable","label":{"api":{"Comparator":[[6,15]],"Website":[[26,32]],"Comparable":[[41,50]]}}},{"text":"It is not (unless you implement it) :http://docs.oracle.com/javaee/6/api/javax/validation/constraints/package-summary.html shows all annotation constraints","label":{"api":{}}},{"text":"Instead use, Arrays.deepEquals(Object[] a, Object[] b)","label":{"api":{"Arrays.deepEquals(Object[] a, Object[] b)":[[13,53]]}}},{"text":"Arrays.sort() uses the natural ordering of the objects, so that would imply that you need them to implement Comparable, or you're going to get unreliable sorting behavior","label":{"api":{"Arrays.sort()":[[0,12]],"Comparable":[[108,117]]}}},{"text":"Just use setLocationRelativeTo() method for your JDialog","label":{"api":{"setLocationRelativeTo()":[[9,31]],"JDialog":[[49,55]]}}},{"text":"Lookin at Oracle's documentation, I think you can compare PublicKey using its 3 getters","label":{"api":{"PublicKey":[[58,66]]}}},{"text":"You can use String#format()","label":{"api":{"String#format()":[[12,26]]}}},{"text":"You can use java.text.MessageFormat for this","label":{"api":{"java.text.MessageFormat":[[12,34]]}}},{"text":"The data type that can hold the highest value in Java is BigInteger","label":{"api":{"BigInteger":[[57,66]]}}},{"text":"The most likely candidate ClassLoader that you will want to use is URLClassLoader","label":{"api":{"ClassLoader":[[26,36]],"URLClassLoader":[[67,80]]}}},{"text":"This link could be useful to understanding how to use SwingWorker","label":{"api":{"link":[[5,8]],"SwingWorker":[[54,64]]}}},{"text":"This attempt will fail if the task has already completed, has already been cancelled, or could not be cancelled for some other reason, like Oracle explains, and those \"some other reasons\" are discussed on the links I've posted","label":{"api":{}}},{"text":"The VK_ values are static fields in the KeyEvent class","label":{"api":{"VK_":[[4,6]],"KeyEvent":[[40,47]]}}},{"text":"Here is a list of all the values","label":{"api":{}}},{"text":"If there isn't another string to read you'll get a NoSuchElementException as described in the JavaDoc  for Scanner.next()","label":{"api":{"NoSuchElementException":[[51,72]],"Scanner.next()":[[107,120]]}}},{"text":"It doesn't look like you use the second variable so either remove it or protect it with a Scanner.hasNext()","label":{"api":{"Scanner.hasNext()":[[90,106]]}}},{"text":"In a situation where you have more complicated dependencies (or multiple schemas for the same namespace), you probably need to implement a custom LSResourceResolver and set it on the SchemaFactory","label":{"api":{"LSResourceResolver":[[146,163]],"SchemaFactory":[[183,195]]}}},{"text":"A class extending Reader will have an underlying data source (see StringReader for example which, as you might guess, reads text from a String object)","label":{"api":{"Reader":[[18,23]],"StringReader":[[66,77]],"String":[[136,141]]}}},{"text":"In your assignment the objective is to create a reader that will strip all the whitespaces from that data source (implement, for example, a StringReader that never writes whitespaces into the target char[] array)","label":{"api":{"StringReader":[[140,151]]}}},{"text":"You can use String.replaceAll()","label":{"api":{"String.replaceAll()":[[12,30]]}}},{"text":"I wouldn't recomend comparing strings, but in this case you may want to change the equals in your if to matches, since equals compares to another object so both dates may have the same value but they are completely different, on the other hand, matches compares to a regular expression","label":{"api":{"equals":[[83,88],[119,124]],"matches":[[104,110],[245,251]]}}},{"text":"Another way to do that is through the Calendar methods after, before or compareTo witch is the best way to do it","label":{"api":{"Calendar":[[38,45]],"after":[[55,59]],"before":[[62,67]],"compareTo":[[72,80]]}}},{"text":"In fact, the Javadocs for StringTokenizer states","label":{"api":{"StringTokenizer":[[26,40]]}}},{"text":"The problem is that while the capacity of your Vector is 10 (as stated in the JavaDoc for the default constructor), it's actual size is 0","label":{"api":{"Vector":[[47,52]]}}},{"text":"Use a class with the Deque interface (such as an ArrayDeque) as recommended and you then have the descendingIterator() call","label":{"api":{"Deque":[[21,25]],"ArrayDeque":[[49,58]],"descendingIterator()":[[98,117]]}}},{"text":"You may also wish to consider using the Scrollable interface to restrict the viewable area, for example..","label":{"api":{"Scrollable":[[40,49]]}}},{"text":"You can't have an end value larger than your start value for String#substring()","label":{"api":{"String#substring()":[[61,78]]}}},{"text":"From this documentation  by oracle, it is clear that subString() method will throw IndexOutOfBoundsException  if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex","label":{"api":{"subString()":[[53,63]],"IndexOutOfBoundsException":[[83,107]],"beginIndex":[[117,126],[205,214]],"endIndex":[[144,151],[231,238]],"String":[[187,192]]}}},{"text":"I suggest you to define a ServletContextListener, and to start a Quartz scheduler from its contextInitialized method","label":{"api":{"ServletContextListener":[[26,47]],"Quartz scheduler":[[65,80]],"contextInitialized":[[91,108]]}}},{"text":"You're calling isPopupTrigger() like the example in Bringing Up a Popup Menu, but setComponentPopupMenu() may be easier","label":{"api":{"isPopupTrigger()":[[15,30]],"setComponentPopupMenu()":[[82,104]]}}},{"text":"Use the Preferences class, it'll make sure that the settings are written to somewhere where it's allowed (such as user's home dir or the registry)","label":{"api":{"Preferences":[[8,18]]}}},{"text":"You should use Thread.currentThread().getContextClassLoader() (javadoc) instead of the system class loader, which is \"the default delegation parent for new ClassLoader instances, and is typically the class loader used to start the application\" (reference)","label":{"api":{"Thread.currentThread().getContextClassLoader()":[[15,60]],"ClassLoader":[[156,166]],"class loader":[[200,211]]}}},{"text":"According to the javadoc for DefaultTableModel, the data must be a Vector<Vector<String>>","label":{"api":{"DefaultTableModel":[[29,45]],"Vector<Vector<String>>":[[67,88]]}}},{"text":"Method close() of Closeable (and thus, of InputStream) is required to be idempotent","label":{"api":{"close()":[[7,13]],"Closeable":[[18,26]],"nputStream":[[43,52]]}}},{"text":"However, more generic AutoCloseable interface does not require its close() method to idempotent, therefore it may be unsafe to do the same for resources other than Closeable","label":{"api":{"AutoCloseable":[[22,34]],"close()":[[67,73]],"Closeable":[[164,172]]}}},{"text":"Note that unlike the close method of Closeable, this close method is not required to be idempotent","label":{"api":{"close":[[21,25],[53,57]],"Closeable":[[37,45]]}}},{"text":"In other words, calling this close method more than once may have some visible side effect, unlike Closeable.close which is required to have no effect if called more than once","label":{"api":{"close":[[29,33]],"Closeable":[[99,107]]}}},{"text":"I'm using ListenableFuture from Guava, and one nice thing about them is that one pass Executor to the Futures.addCallback method, that is, ask to execute the callback on a given thread/executor","label":{"api":{"ListenableFuture":[[10,25]],"Executor":[[86,93]],"Futures.addCallback":[[102,120]]}}},{"text":"Have a look at ByteBuffer class","label":{"api":{"ByteBuffer":[[15,24]]}}},{"text":"Both BigInteger and BigDecimal are subclasses of Number","label":{"api":{"BigInteger":[[5,14]],"BigDecimal":[[20,29]],"Number":[[49,54]]}}},{"text":"Finally, JPA has its own SqlResultSetMapping annotation","label":{"api":{"JPA":[[9,11]],"SqlResultSetMapping":[[25,43]]}}},{"text":"Now you can rotate list1 whilst keeping list2 as is and pair {list1.get(1),list2.get(1)}, {list1.get(2),list2.get(2)}, etc","label":{"api":{"list1.get(1)":[[62,73]],"list2.get(1)":[[75,86]],"list1.get(2)":[[91,102]],"list2.get(2)":[[104,115]]}}},{"text":"You can use String.format method","label":{"api":{"String.format":[[12,24]]}}},{"text":"Since most of the methods in the Date class are deprecated, you can use java.util.Calendar","label":{"api":{"Date":[[33,36]],"java.util.Calendar":[[72,89]]}}},{"text":"Convert a java.util.Date to a org.joda.time.DateTime object is trivial, because DateTime has a constructor for this","label":{"api":{"java.util.Date":[[10,23]],"org.joda.time.DateTime":[[30,51]],"DateTime":[[80,87]]}}},{"text":"The Thread class constructor that takes a String argument creates a Thread with a specific name (as opposed to automatically generated names such as Thread-1)","label":{"api":{"Thread":[[4,9],[68,73]],"String":[[42,47]]}}},{"text":"When the start() method of a Thread instance is called the thread begins to execute (the run() method eventually gets called)","label":{"api":{"start()":[[9,15]],"Thread":[[29,34]],"run()":[[89,93]]}}},{"text":"As you can see, in this case, the run() method of CustomThread1 class simply calls the show(String, int) method of its Shared instance, which prints whatever it is passed into the console","label":{"api":{"run()":[[34,38]],"show(String, int)":[[87,103]]}}},{"text":"As others have pointed out, the super(str) method calls the constructor for Thread","label":{"api":{"super(str)":[[32,41]],"Thread":[[76,81]]}}},{"text":"As for what it does, the string passed to Thread will give the thread a name","label":{"api":{"Thread":[[42,47]]}}},{"text":"This will allow you to easily identify the thread in debugging sessions and in Thread dumps","label":{"api":{"Thread":[[79,84]]}}},{"text":"Without the string, it will have a boring name like, \"Thread-5\"","label":{"api":{}}},{"text":"Here an example of the Date class","label":{"api":{"Date":[[23,26]]}}},{"text":"Using getValue() will tell you how the dialog was closed","label":{"api":{"getValue()":[[6,15]]}}},{"text":"I decided to use a GridLayout LayoutManager for my Java Swing app because each cell within the grid is supposed to be exactly the same size","label":{"api":{"GridLayout":[[19,28]],"LayoutManager":[[30,42]]}}},{"text":"A GridLayout object places components in a grid of cells","label":{"api":{"GridLayout":[[2,11]]}}},{"text":"And even in the description of the GridLayout class","label":{"api":{"GridLayout":[[35,44]]}}},{"text":"The GridLayout class is a layout manager that lays out a container's components in a rectangular grid","label":{"api":{"GridLayout":[[4,13]]}}},{"text":"I added 3 JPanels to a Container with GridLayout, and gave each JPanel a different background color","label":{"api":{"JPanel":[[10,15],[64,69]],"Container":[[23,31]],"GridLayout":[[38,47]]}}},{"text":"All I do is set the Container's layout to GridLayout with 1 row and any number of columns, and then add 3 JPanels to that","label":{"api":{"Container":[[20,28]],"GridLayout":[[42,51]],"JPanel":[[106,111]]}}},{"text":"check out the Files class","label":{"api":{"File":[[14,17]]}}},{"text":"You should implement the actionperformed() method inside your atmGUI class to handle the clicked action","label":{"api":{"actionperformed()":[[25,41]],"atmGUI":[[62,67]]}}},{"text":"A thread-safe version would be the AtomicReference","label":{"api":{"AtomicReference":[[35,49]]}}},{"text":"Here is how you can lock your database using a ReentrantReadWriteLock","label":{"api":{"ReentrantReadWriteLock":[[47,68]]}}},{"text":"Since you cannot get a TypedQuery from a Hibernate Session, you might consider using the EntityManager interface","label":{"api":{"TypedQuery":[[23,32]],"EntityManager":[[89,101]]}}},{"text":"Runtime.exec() gives you a Process","label":{"api":{"Runtime.exec()":[[0,13]],"Process":[[27,33]]}}},{"text":"you can read and write to that Process (using getOutputStream() and getInputStream(), which allows you to get what's output by your script and send it more information afterwards","label":{"api":{"Process":[[31,37]],"getOutputStream()":[[46,62]],"getInputStream()":[[68,83]]}}},{"text":"ServletContext.java has two APIs that you can use to manipulate resources","label":{"api":{"ServletContext.java":[[0,18]]}}},{"text":"Serializable defines the following exceptions","label":{"api":{"Serializable":[[0,11]]}}},{"text":"I think you're looking for Serializable, ObjectOutputStream, and ObjectInputStream","label":{"api":{"Serializable":[[27,38]],"ObjectOutputStream":[[41,58]],"ObjectInputStream":[[65,81]]}}},{"text":"Does LargeInteger have an equivalent to BigInteger's testBit","label":{"api":{"LargeInteger":[[5,16]],"BigInteger":[[40,49]],"testBit":[[53,59]]}}},{"text":"To improve the performance, you should submit the tasks to an ExecutorService with a number of threads = number of processors (above that number, your threads will compete for CPU resources and it will be counterproductive)","label":{"api":{"ExecutorService":[[62,76]]}}},{"text":"Each call to br.readLine() will return the next line","label":{"api":{"br.readLine()":[[13,25]]}}},{"text":"Or you can use equalsIgnoreCase()","label":{"api":{"equalsIgnoreCase()":[[15,32]]}}},{"text":"another application modifies the corresponding row), you can use a @Version field","label":{"api":{"@Version":[[67,74]]}}},{"text":"LargeInteger doesn't seem to have a pow function, or if it does, it cannot process pow(0) though BigInteger can","label":{"api":{"LargeInteger":[[0,11]],"pow":[[36,38]],"pow(0)":[[83,88]],"BigInteger":[[97,106]]}}},{"text":"You need to call scanner.nextLine() to get input (a String) from the user, and you need to convert the String to an integer (with Integer.parseInt) to compare it with other ints","label":{"api":{"scanner.nextLine()":[[17,34]],"String":[[103,108]],"integer":[[116,122]],"Integer.parseInt":[[130,145]]}}},{"text":"You might want to read the documentation of the Scanner class","label":{"api":{"Scanner":[[48,54]]}}},{"text":"You could use a BigInteger to store very large numbers","label":{"api":{"BigInteger":[[16,25]]}}},{"text":"A common example is Arrays.asList","label":{"api":{"Arrays.asList":[[20,32]]}}},{"text":"For example, the snippet given in the Arrays.asList documentation omits the type","label":{"api":{"Arrays.asList":[[38,50]]}}},{"text":"As stated in the API, ArrayList.toArray() returns an array of type Object","label":{"api":{"ArrayList.toArray()":[[22,40]],"Object":[[67,72]]}}},{"text":"You can access the object returned by the original method using InvocationContext.proceed()","label":{"api":{"InvocationContext.proceed()":[[64,90]]}}},{"text":"You should also be careful with ArrayIndexOutOfBoundsException","label":{"api":{"ArrayIndexOutOfBoundsException":[[32,61]]}}},{"text":"A Number is a parent of both Double and Integer, so you would be able to add Doubles to your list and the Number.intValue() will convert (autoboxing) into Integer when required","label":{"api":{"Number":[[2,7]],"Double":[[29,34],[77,82]],"Integer":[[40,46]],"Number.intValue()":[[106,122]]}}},{"text":"will TreeMap help you in this regard","label":{"api":{"TreeMap":[[5,11]]}}},{"text":"TreeMap Keeps everything sorted","label":{"api":{"TreeMap":[[0,6]]}}},{"text":"A Timer starts out repeating, by default","label":{"api":{"Timer":[[2,6]]}}},{"text":"You ought to call setRepeats(false)","label":{"api":{"setRepeats(false)":[[18,34]]}}},{"text":"It's to use a DocumentFilter","label":{"api":{"DocumentFilter":[[14,27]]}}},{"text":"Take a look in how to do it in Text Component Features implementing a DocumentFilter","label":{"api":{"Text Component Features":[[31,53]],"DocumentFilter":[[70,83]]}}},{"text":"Here you have an example using DocumentFilter","label":{"api":{"DocumentFilter":[[31,44]]}}},{"text":"You can implement  DocumentListener and act as an observer of the document to listen for example when the text is inserted/removed","label":{"api":{"DocumentListener":[[19,34]]}}},{"text":"Take a look in how to do it in How to Write a DocumentListener","label":{"api":{"DocumentListener":[[46,61]]}}},{"text":"The JDK contains the JavaCompiler API","label":{"api":{"JavaCompiler":[[21,32]]}}},{"text":"Timeline has a constructor for setting a target frame rate, and an empty one for (presumably) using some default value","label":{"api":{"Timeline":[[0,7]]}}},{"text":"I just noticed the following phenomena when cancelling a Future returned by ForkJoinPool","label":{"api":{"Future":[[57,62]],"ForkJoinPool":[[76,87]]}}},{"text":"The docs of ForkJoinTask#cancel(boolean) say","label":{"api":{"ForkJoinTask#cancel(boolean)":[[12,39]]}}},{"text":"If ForkJoinTasks ignore interrupts, how else are you supposed to check for cancellation inside Callables submitted to a ForkJoinPool","label":{"api":{"ForkJoinTask":[[3,14]],"Callable":[[95,102]],"ForkJoinPool":[[120,131]]}}},{"text":"I can launch it using Desktop.open() but I cannot pass any parameters this way","label":{"api":{"Desktop.open()":[[22,35]]}}},{"text":"Have a look for example at TreeMap#floorEntry() which does something similar to your getObjectsAtTime method","label":{"api":{"TreeMap#floorEntry()":[[27,46]],"getObjectsAtTime":[[85,100]]}}},{"text":"I agree with @Josh M, you should try using a JTextArea(http://docs.oracle.com/javase/7/docs/api/javax/swing/JTextArea.html) with a JScrollPane","label":{"api":{"JTextArea":[[45,53]],"JScrollPane":[[131,141]]}}},{"text":"You can use StringTokenizer to perform this","label":{"api":{"StringTokenizer":[[12,26]]}}},{"text":"You can reduce the complexity of the loop further if you use an Ordered Set like LinkedHashSet","label":{"api":{"Ordered Set":[[64,74]],"LinkedHashSet":[[81,93]]}}},{"text":"I can't find anything in the API docs that would state, that you shouldn't call executeQuery() on a given PreparedStatement instance more than once","label":{"api":{"executeQuery()":[[80,93]],"PreparedStatement":[[106,122]]}}},{"text":"A ResultSet is automatically closed, when you reexecute a PreparedStatement","label":{"api":{"ResultSet":[[2,10]],"PreparedStatement":[[58,74]]}}},{"text":"This is using the List.get(int) method to access the item at a particular index in the list","label":{"api":{"List.get(int)":[[18,30]]}}},{"text":"The BufferedInputStream takes an InputStream in the constructor, so you can do it with","label":{"api":{"BufferedInputStream":[[4,22]],"InputStream":[[33,43]]}}},{"text":"A BufferedInputStream adds functionality to another input stream-namely, the ability to buffer the input and to support the mark and reset methods","label":{"api":{"BufferedInputStream":[[2,20]],"mark":[[124,127]],"reset":[[133,137]]}}},{"text":"When the BufferedInputStream is created, an internal buffer array is created","label":{"api":{"BufferedInputStream":[[9,27]]}}},{"text":"Rather than using remove then add, use List.set(index, element)","label":{"api":{"List.set(index, element)":[[39,62]]}}},{"text":"The easiest way to get an AttributedCharacterIterator is to create an AttributedString","label":{"api":{"AttributedCharacterIterator":[[26,52]],"AttributedString":[[70,85]]}}},{"text":"You may also want to have a look at the SwingWorker class","label":{"api":{"SwingWorker":[[40,50]]}}},{"text":"Use the rowHeader view","label":{"api":{"rowHeader":[[8,16]]}}},{"text":"the Java String escaping, and the regular expression escaping","label":{"api":{"String":[[9,14]]}}},{"text":"Here you can see the source code of the next() method from java Iterator","label":{"api":{"next()":[[40,45]],"Iterator":[[64,71]]}}},{"text":"As you can see, if you are out of the array a NoSuchElementException will be thrown","label":{"api":{"NoSuchElementException":[[46,67]]}}},{"text":"So calling next() twice without checking before each call if elements are still available by using hasNext() will have the behaviour you described","label":{"api":{"next()":[[11,16]],"hasNext()":[[99,107]]}}},{"text":"The Java String API doesn't offer a method to do that specifically","label":{"api":{"String":[[9,14]]}}},{"text":"Probably you want to implement Comparable interface","label":{"api":{"Comparable":[[31,40]]}}},{"text":"If you really want to implement Comparator then you need to define compare(T, T) method","label":{"api":{"Comparator":[[32,41]],"compare(T, T)":[[67,79]]}}},{"text":"Probably you want to use String#concat","label":{"api":{"String#concat":[[25,37]]}}},{"text":"You can use String.valueOf()","label":{"api":{"String.valueOf()":[[12,27]]}}},{"text":"Lastly, printf() is also an option","label":{"api":{"printf()":[[8,15]]}}},{"text":"Then you can call isInstance","label":{"api":{"isInstance":[[18,27]]}}},{"text":"In Java, the Collection.sort must be stable, so if you have use a comparator that says that all negative numbers are equal, but for positive numbers does what you'd expect, you'd have what you need","label":{"api":{"Collection.sort":[[13,27]],"comparator":[[66,75]]}}},{"text":"You could try putting the data in a PriorityQueue, making sure to only deal with the positive values","label":{"api":{"PriorityQueue":[[36,48]]}}},{"text":"You might want to consider using a Map","label":{"api":{"Map":[[35,37]]}}},{"text":"A Map allows you to associate one piece of data with another, so if you can do something similar to","label":{"api":{"Map":[[2,4]]}}},{"text":"According to the docs for generateCertificate(), it expects that a \"certificate provided in inStream must be DER-encoded and may be supplied in binary or printable (Base64) encoding\"","label":{"api":{"generateCertificate()":[[26,46]],"inStream":[[92,99]]}}},{"text":"They may instead be lazily computed, allowing infinite size","label":{"api":{}}},{"text":"Collections might also be lazily computed","label":{"api":{"Collections":[[0,10]]}}},{"text":"Thus the logical organization of the data (list, map, stream) is mostly orthogonal to the physical layout (stored in an array or tree, or lazily computed from a function)","label":{"api":{}}},{"text":"A good example from the Java APIs is the LinkedList class","label":{"api":{"LinkedList":[[41,50]]}}},{"text":"And especially since you are using a HashSet, you should override hashCode() too, so that it \"agrees\" with equals(), as per the javadoc of equals()","label":{"api":{"HashSet":[[37,43]],"hashCode()":[[66,75]],"equals()":[[107,114],[139,146]]}}},{"text":"Take a look at LinkedHashSet class","label":{"api":{"LinkedHashSet":[[15,27]]}}},{"text":"Try using a ConcurrentLinkedQueue instead","label":{"api":{"ConcurrentLinkedQueue":[[12,32]]}}},{"text":"In every piece of code you suspect, you may want to use SwingUtilities.isEventDispatchThread() to test if you are currently in EDT","label":{"api":{"SwingUtilities.isEventDispatchThread()":[[56,93]]}}},{"text":"Instead of maintaining capLetters and comparing the first character with each of the characters in it, you can directly use Character.isUpperCase(char) method","label":{"api":{"Character.isUpperCase(char)":[[124,150]]}}},{"text":"Please have a look at Component.getX() and Component.getY() for getting X and Y Co-ordinates","label":{"api":{"Component.getX()":[[22,37]],"Component.getY()":[[43,58]]}}},{"text":"Component.getWidth() and Component.getHeight(), for getting Width and Height of the said component","label":{"api":{"Component.getWidth()":[[0,19]],"Component.getHeight()":[[25,45]],"Width":[[60,64]],"Height":[[70,75]]}}},{"text":"A simple way of construct a regex when you have a long fixed string you want to find is to use Pattern.quote(String s)","label":{"api":{"Pattern.quote(String s)":[[95,117]]}}},{"text":"The NodeList object has an item(int) method","label":{"api":{"NodeList":[[4,11]],"item(int)":[[27,35]]}}},{"text":"You can use that method to loop through the nodes in the NodeList","label":{"api":{"NodeList":[[57,64]]}}},{"text":"The Math class fits your needs","label":{"api":{"Math":[[4,7]]}}},{"text":"The setShape(Shape shape) lets you use any shape from the geom package","label":{"api":{"setShape(Shape shape)":[[4,24]]}}},{"text":"Then if they do, iterate on each of them, and compare each pair of arrays using Arrays.equals()","label":{"api":{"Arrays.equals()":[[80,94]]}}},{"text":"See the documentation for the allowed types of the Basic annotation","label":{"api":{}}},{"text":"JMenu inherits from AbstractButton, which has a setIcon() method allowing to set the icon of the menu","label":{"api":{"JMenu":[[0,4]],"AbstractButton":[[20,33]],"setIcon()":[[48,56]]}}},{"text":"BTW, JMenu also inherits from JMenuItem","label":{"api":{"JMenu":[[5,9]],"JMenuItem":[[30,38]]}}},{"text":"So if you managed to set an icon on a JMenuItem, you should be able to do it, the same way, on a JMenu","label":{"api":{"JMenuItem":[[38,46]],"JMenu":[[97,101]]}}},{"text":"Convert the array to a ArrayList using Arrays' asList method","label":{"api":{"ArrayList":[[23,31]],"Array":[[39,43]],"asList":[[47,52]]}}},{"text":"remove() the element from tempList if it is null","label":{"api":{"remove()":[[0,7]]}}},{"text":"Covert tempList back to an array using ArrayList's toArray() method","label":{"api":{"ArrayList":[[39,47]],"toArray()":[[51,59]]}}},{"text":"In swing, you can create a compound border","label":{"api":{}}},{"text":"Any List will retain insertion order and they all allow duplicated elements","label":{"api":{"List":[[4,7]]}}},{"text":"There are no key-value structures with these properties in standard Java, but Guava's LinkedListMultiMap might have what you are looking for","label":{"api":{"LinkedListMultiMap":[[86,103]]}}},{"text":"An implementation of ListMultimap that supports deterministic iteration order for both keys and values","label":{"api":{"ListMultimap":[[21,32]]}}},{"text":"The easiest would of course to just use a Queue, Java's got some implementations for you (arrayblocking, concurrentlinked)","label":{"api":{"Queue":[[42,46]],"arrayblocking":[[90,102]],"concurrentlinked":[[105,120]]}}},{"text":"From the JavaDocs","label":{"api":{}}},{"text":"use a DateFormat or SimpleDateFormat to format dates as text","label":{"api":{"DateFormat":[[6,15]],"SimpleDateFormat":[[20,35]]}}},{"text":"That way, you simply don't have to worry about this and let the DateFormat take care of it","label":{"api":{"DateFormat":[[64,73]]}}},{"text":"Have a look at the String API for the functionality you are trying to implement, the replace() method should suffice for you","label":{"api":{"String":[[19,24]],"replace()":[[85,93]]}}},{"text":"It's not very clear, but if you need to add/remove/replace elements in the list, you should use ListIterator","label":{"api":{"ListIterator":[[96,107]]}}},{"text":"It has a set method, which allows to replace elements","label":{"api":{"set":[[9,11]]}}}]