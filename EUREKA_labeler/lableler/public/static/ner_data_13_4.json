[{"text":"StringBuilder is preferred performance-wise","label":{"api":{"StringBuilder":[[0,12]]}}},{"text":"The solution is to use StringBuilder or StringBuffer","label":{"api":{"StringBuilder":[[23,35]],"StringBuffer":[[40,51]]}}},{"text":"The difference between the two is that StringBuffer is thread-safe, which makes StringBuilder faster","label":{"api":{"StringBuffer":[[39,50]],"StringBuilder":[[80,92]]}}},{"text":"After the line where you parse the date, add t.schedule(task, date), where 't' is a Timer, and 'task' is a TimerTask that represents the method you want to be executed at the given date","label":{"api":{"t.schedule(task, date)":[[45,66]],"Timer":[[84,88]],"TimerTask":[[107,115]]}}},{"text":"You can pass the given string in the constructor parameter of StringBuilder class and use the codePointAt(int) method","label":{"api":{"StringBuilder":[[62,74]],"codePointAt(int)":[[94,109]]}}},{"text":"There are other useful methods also in StringBuilder like codePointBefore(int) and appendCodePoint(int), which allow you to see the codepoint of the character before and append the character with the specified codepoint to the StringBuilder, respectively","label":{"api":{"StringBuilder":[[39,51],[227,239]],"codePointBefore(int)":[[58,77]],"appendCodePoint(int)":[[83,102]]}}},{"text":"However for that, you may want to look at Graphics2D (http://docs.oracle.com/javase/7/docs/api/java/awt/Graphics2D.html) and in particular at setTransform and the AffineTransform class","label":{"api":{"Graphics2D":[[42,51]],"setTransform":[[142,153]],"AffineTransform":[[163,177]]}}},{"text":"You can create a Line2D object for your original line","label":{"api":{"Line2D":[[17,22]]}}},{"text":"Then you can use AffineTransform#getRotateInstance to obtain an AffineTransform that does the rotation about a certain angle, around a certain point","label":{"api":{"AffineTransform#getRotateInstance":[[17,49]],"AffineTransform":[[64,78]]}}},{"text":"Using this AffineTransform, you can create a rotated Line2D object to paint","label":{"api":{"AffineTransform":[[11,25]],"Line2D":[[53,58]]}}},{"text":"To quote the package's documentation","label":{"api":{}}},{"text":"You should always use a PreparedStatement and bind variables when dealing with SQL that takes input parameters","label":{"api":{"PreparedStatement":[[24,40]]}}},{"text":"Perhaps you are looking for peek","label":{"api":{"peek":[[28,31]]}}},{"text":"You can use an InputVerifier for the text fields instead of checking the value after it is entered","label":{"api":{"InputVerifier":[[15,27]]}}},{"text":"Semaphores, Locks, CountDownLatches, ConcurrentHashMaps etc..","label":{"api":{"Semaphores":[[0,9]],"Locks":[[12,16]],"CountDownLatch":[[19,32]],"ConcurrentHashMap":[[37,53]]}}},{"text":"What I do recommend since sleeping is often about synchronization is having a look specifically at CountDownLatch and Semaphores which have examples in their Java doc","label":{"api":{"CountDownLatch":[[99,112]],"Semaphores":[[118,127]]}}},{"text":"You're catching an IOException, but Class.getResourceAsStream doesn't throw an IOException if the resource is not found; it just returns null","label":{"api":{"IOException":[[19,29],[79,89]],"Class.getResourceAsStream":[[36,60]]}}},{"text":"And ImageIO.read doesn't throw an IOException if the argument is null; it throws an IllegalArgumentException","label":{"api":{"ImageIO.read":[[4,15]],"IOException":[[34,44]],"IllegalArgumentException":[[84,107]]}}},{"text":"This will ensure you handle the error, and the use of the try-with-resources statement makes sure the stream is always closed after use (which ImageIO.read does not do)","label":{"api":{"ImageIO.read":[[143,154]]}}},{"text":"You should also consider, rather than returning null on error, to throw (or rethrow) some exception to the caller, such as an UncheckedIOException, since a null return value will only cause errors elsewhere once you try to make use of it, and an exception thrown directly from the point of the problem will be more meaningful than some NullPointerException thrown later","label":{"api":{"UncheckedIOException":[[126,145]],"NullPointerException":[[336,355]]}}},{"text":"I think the best way to approach this is to also use the URL class, as there are a lot of gotchas if you just do simple string parsing","label":{"api":{"URL":[[57,59]]}}},{"text":"Check out the Base64 javadocs for more info","label":{"api":{"Base64":[[14,19]]}}},{"text":"From the Javadocs","label":{"api":{}}},{"text":"The Javadocs say","label":{"api":{}}},{"text":"So far I only found a blocking queue but since we don't need FIFO, LIFO but random access a queue doesn't really work","label":{"api":{"blocking queue":[[22,35]]}}},{"text":"You can call Class.forName(\"SomeClass$5\"), then call one of Class.getEnclosingMethod or Class.getEnclosingConstructor or Class.getEnclosingClass to find its immediately enclosing definition","label":{"api":{"Class.forName(\"SomeClass$5\")":[[13,40]],"Class.getEnclosingMethod":[[60,83]],"Class.getEnclosingConstructor":[[88,116]],"Class.getEnclosingClass":[[121,143]]}}},{"text":"The problem is that the split(String str) method expects str to be a valid regular expression","label":{"api":{"split(String str)":[[24,40]]}}},{"text":"$ has a special meaning in regex, and since String#split takes a regex as an argument, the $ is not interpreted as the string \"$\", but as the special meta character $","label":{"api":{"String#split":[[44,55]]}}},{"text":"When you do splitedArray1[0], you could get ArrayIndexOutOfBoundsException if there's no $ symbol","label":{"api":{"splitedArray1[0]":[[12,27]],"ArrayIndexOutOfBoundsException":[[44,73]]}}},{"text":"The problem is compare needs to return an integer to comply with that Comparator interface","label":{"api":{"compare":[[15,21]],"Comparator":[[70,79]]}}},{"text":"You could cast down to an int in your comparison, or perhaps better, just use Double.compare()","label":{"api":{"Double.compare()":[[78,93]]}}},{"text":"You could store them in a TreeMap which is already sorted","label":{"api":{"TreeMap":[[26,32]]}}},{"text":"An example for this design is the java.time package","label":{"api":{"java.time":[[34,42]]}}},{"text":"It seems like you create an absolute filename with loadImage.getAbsolutePath(), but then you try to use this as a class path resource with new ImageIcon(getClass().getResource(S))","label":{"api":{"loadImage.getAbsolutePath()":[[51,77]],"ImageIcon(getClass().getResource(S))":[[143,178]]}}},{"text":"Read the file one line at a time and then consider using the replaceAll(String string) method which takes a regular expression on the line you have just read","label":{"api":{"replaceAll(String string)":[[61,85]]}}},{"text":"Investigating Thymeleaf's source code, I noticed that it uses Introspector to get information about the properties, so we can hide some properties by implementing a BeanInfo","label":{"api":{"Thymeleaf":[[14,22]],"Introspector":[[62,73]],"BeanInfo":[[165,172]]}}},{"text":"You can take a look at the Introspector's source code to see how they extract this information and improve this solution","label":{"api":{"Introspector":[[27,38]]}}},{"text":"You could use a StringBuilder instead","label":{"api":{"StringBuilder":[[16,28]]}}},{"text":"The ErrorEntity has two ErrorEntity.ENV_ID mappings, which unless you use @MapsId then it's a configuration issue","label":{"api":{"ErrorEntity":[[4,14]],"ErrorEntity.ENV_ID":[[24,41]],"@MapsId":[[74,80]]}}},{"text":"Create a custom Shape","label":{"api":{"Shape":[[16,20]]}}},{"text":"Yet, subclassing Shape doesn't seem to be a simple task, and I can't find any indication on how to do this","label":{"api":{"Shape":[[17,21]]}}},{"text":"I've been looking at Rectangle and other shapes, but I don't know the Shape Architecture..","label":{"api":{"Rectangle":[[21,29]],"Shape":[[70,74]]}}},{"text":"Subclass Control, define a Skin with SkinBase and Behavior with BehaviorBase","label":{"api":{"Control":[[9,15]],"Skin":[[27,30]],"SkinBase":[[37,44]],"Behavior":[[50,57]],"BehaviorBase":[[64,75]]}}},{"text":"Subclassing Control seems to be considered overkill if they're only going to be used by one application","label":{"api":{"Control":[[12,18]]}}},{"text":"If you genuinely only want to pull elements from the front of your list and you want to be sure that they're there, then you should look into a ConcurrentLinkedQueue instead","label":{"api":{"ConcurrentLinkedQueue":[[144,164]]}}},{"text":"Now that you have there's a the length() method if you want to find the length of a String","label":{"api":{"length()":[[32,39]],"String":[[84,89]]}}},{"text":"Consider the core loop from the JDK 8 String.hashCode() implementation","label":{"api":{"String.hashCode()":[[38,54]]}}},{"text":"See javadoc documentation (http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html)","label":{"api":{}}},{"text":"If that's the case, try switching to a concurrent structure, probably a ConcurrentLinkedQueue","label":{"api":{"ConcurrentLinkedQueue":[[72,92]]}}},{"text":"Call String.trim() on each read line which removes leading and trailing spaces","label":{"api":{"String.trim()":[[5,17]]}}},{"text":"You can also use Files.readAllLines() to read all lines into a List","label":{"api":{"Files.readAllLines()":[[17,36]]}}},{"text":"Or, if you're using Java 8, you can use Comparator.comparing","label":{"api":{"Comparator.comparing":[[40,59]]}}},{"text":"I think hailin suggested you create a raw Socket and connect it to the server instead of using URLConnection","label":{"api":{"Socket":[[42,47]],"URLConnection":[[95,107]]}}},{"text":"Anyway, here's the version using a Socket (add exception handling as needed)","label":{"api":{"Socket":[[35,40]]}}},{"text":"If you don't want the time for the DNS resolution in there, you can create an InetAddress with InetAddress.getByName(\"hostname\") before you start the timer and pass that to the InetSocketAddress constructor","label":{"api":{"InetAddress":[[78,88]],"InetAddress.getByName(\"hostname\")":[[95,127]],"InetSocketAddress":[[177,193]]}}},{"text":"InetSocketAddress's constructor also resolves the host name right away, so constructing it from a resolved ip address shouldn't make a difference","label":{"api":{"InetSocketAddress":[[0,16]]}}},{"text":"In accordance with the documentation Play uses the MessageFormat class for formatting and it generates its output based on the provided Locale object","label":{"api":{"MessageFormat":[[51,63]],"Locale":[[136,141]]}}},{"text":"Use q.startsWith(\"The\") instead","label":{"api":{"q.startsWith(\"The\")":[[4,22]]}}},{"text":"The \"natural ordering\" that Collections.sort refers to is the one specified by Comparable -- which String implements, and which defines only one method, compareTo","label":{"api":{"Collections.sort":[[28,43]],"Comparable":[[79,88]],"String":[[99,104]],"compareTo":[[153,161]]}}},{"text":"So, the answer is in the definition of String.compareTo","label":{"api":{"String.compareTo":[[39,54]]}}},{"text":"String class implements the Comparable interface","label":{"api":{"String":[[0,5]],"Comparable":[[28,37]]}}},{"text":"When sort happens, compareTo(String) method is called","label":{"api":{"compareTo(String)":[[19,35]]}}},{"text":"For more look at the implementation of compareTo(String) method in String class","label":{"api":{"compareTo(String)":[[39,55]],"String":[[67,72]]}}},{"text":"Use a RNG for each thread, for example with ThreadLocalRandom","label":{"api":{"ThreadLocalRandom":[[44,60]]}}},{"text":"You can convert from char to hex String with String.format()","label":{"api":{"String":[[33,38]],"String.format()":[[45,59]]}}},{"text":"The Byte.decode() javadoc specifies that hex numbers should be on the form \"0x4C\"","label":{"api":{"Byte.decode()":[[4,16]]}}},{"text":"You can retrieve a result without looping using the getString(int columnIndex) or getString(String columnLabel) methods, for example","label":{"api":{"getString(int columnIndex)":[[52,77]],"getString(String columnLabel)":[[82,110]]}}},{"text":"Have a look at Duration (part of the new Date & Time API introduced in Java SE 8)","label":{"api":{"Duration":[[15,22]],"Date":[[41,44]],"Time":[[48,51]]}}},{"text":"A NoClassDefFoundError occurs when you're using a class that is unknown at runtime hence you probably don't have a dependency to it","label":{"api":{"NoClassDefFoundError":[[2,21]]}}},{"text":"If it does, see SwingWorker","label":{"api":{"SwingWorker":[[16,26]]}}},{"text":"You can use a custom Comparator","label":{"api":{"Comparator":[[21,30]]}}},{"text":"From the documentation of KeyEvent the getKeyChar() method states","label":{"api":{"KeyEvent":[[26,33]],"getKeyChar()":[[39,50]]}}},{"text":"I'd go for EnumSet","label":{"api":{"EnumSet":[[11,17]]}}},{"text":"This is explained in the following quote from the Statement API docs","label":{"api":{"Statement":[[50,58]]}}},{"text":"The java.util.Formatter class has a zero-argument constructor which automatically wraps a StringBuilder","label":{"api":{"java.util.Formatter":[[4,22]],"StringBuilder":[[90,102]]}}},{"text":"Literal strings, coming from your code, are interned","label":{"api":{}}},{"text":"A simplistic approach would be to use a Filter and wrap it around all your API calls in web.xml","label":{"api":{"Filter":[[40,45]]}}},{"text":"You could use Java 8 streams to filter your data","label":{"api":{"streams":[[21,27]]}}},{"text":"Perhaps you want to ignore the whitespaces","label":{"api":{}}},{"text":"In the list of HashSet's implemented interfaces, you do not find SortedSet","label":{"api":{"HashSet":[[15,21]],"SortedSet":[[65,73]]}}},{"text":"Files.lines by default uses the UTF-8 encoding, whereas instantiating a new String from bytes will use the default system encoding","label":{"api":{"String":[[76,81]]}}},{"text":"To complement Jesper's answer, what happens here (and is undocumented!) is that Files.lines() creates a CharsetDecoder whose policy is to reject invalid byte sequences; that is, its CodingErrorAction is set to REPORT","label":{"api":{"Files.lines()":[[80,92]],"CharsetDecoder":[[104,117]],"CodingErrorAction":[[182,198]],"REPORT":[[210,215]]}}},{"text":"Consider to use ExecutionService if you want a multi-thread program","label":{"api":{"ExecutionService":[[16,31]]}}},{"text":"Better yet, Java EE docs say that a stream is returned if it doesn't know what to do with the data type, so maybe that's your final else","label":{"api":{}}},{"text":"What you need is FileOutputStream","label":{"api":{"FileOutputStream":[[17,32]]}}},{"text":"One convenient way to bind Enter to an Action is via the root pane's setDefaultButton() method","label":{"api":{"Action":[[39,44]],"setDefaultButton()":[[69,86]]}}},{"text":"You're searching for the finalize() method","label":{"api":{"finalize()":[[25,34]]}}},{"text":"Please note that creating a finalize() method is not as easy as it looks like (as explained in these answers)","label":{"api":{"finalize()":[[28,37]]}}},{"text":"Using Collectors.joining from Java 8","label":{"api":{"Collectors.joining":[[6,23]]}}},{"text":"Another Java 8 solution using String.join","label":{"api":{"String.join":[[30,40]]}}},{"text":"The best way to achieve this would be to use a AnimationTimer which will be called in each frame while it is active","label":{"api":{"AnimationTimer":[[47,60]]}}},{"text":"This can be accomplished by allowing core threads to timeout","label":{"api":{}}}]