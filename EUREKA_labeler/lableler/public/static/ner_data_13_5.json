[{"text":"You can solve this with synchronization or use of AtomicInteger","label":{"api":{"AtomicInteger":[[50,62]]}}},{"text":"You can always save this T-SQL code as MSSQL stored procedure and execute it using JDBC CallableStatement","label":{"api":{"CallableStatement":[[88,104]]}}},{"text":"Use Supplier if it takes nothing, but returns something","label":{"api":{"Supplier":[[4,11]]}}},{"text":"Use Consumer if it takes something, but returns nothing","label":{"api":{"Consumer":[[4,11]]}}},{"text":"Use Callable if it returns a result and might throw (most akin to Thunk in general CS terms)","label":{"api":{"Callable":[[4,11]]}}},{"text":"Use Runnable if it does neither and cannot throw","label":{"api":{"Runnable":[[4,11]]}}},{"text":"The easiest way is to create a DecimalFormat object, supplying the pattern yourself","label":{"api":{"DecimalFormat":[[31,43]]}}},{"text":"The Arrays class is a util class, not the type you'd use for an array","label":{"api":{"Arrays":[[4,9]]}}},{"text":"The Arrays class never takes a generic argument, which is what your error is telling you","label":{"api":{"Arrays":[[4,9]]}}},{"text":"In your specific case, you should use Set, which inherently removes duplicates","label":{"api":{"Set":[[38,40]]}}},{"text":"So you would just add everything to it with the add() method, and duplicates would be automatically ignored","label":{"api":{"add()":[[48,52]]}}},{"text":"Your VersionComparator class is implementing the raw form of the Comparator interface, where the compare method will take 2 Objects instead of 2 Strings","label":{"api":{"VersionComparator":[[5,21]],"Comparator":[[65,74]],"compare":[[97,103]],"Object":[[124,129]],"String":[[145,150]]}}},{"text":"Then the compiler will recognize your compare method taking Strings as parameters as the proper implementation of the interface","label":{"api":{"compare":[[38,44]],"String":[[60,65]]}}},{"text":"You don't need a compare method taking Objects","label":{"api":{"compare":[[17,23]],"Object":[[39,44]]}}},{"text":"You will of course need to implement the comparison logic in your compare method, returning an int less than 0, 0, or greater than 0 if str1 compares less than, equal to, or greater then str2 according to your custom sort order","label":{"api":{"compare":[[66,72]]}}},{"text":"Have a look at official FileWriter Javadoc","label":{"api":{"FileWriter":[[24,33]]}}},{"text":"Instead, you should call the executeUpdate method","label":{"api":{"executeUpdate":[[29,41]]}}},{"text":"This is called concurrent modification, thus the exception ConcurrentModificationException","label":{"api":{"ConcurrentModificationException":[[59,89]]}}},{"text":"Your Matcher's three captured group references will then have the values you want","label":{"api":{"Matcher":[[5,11]]}}},{"text":"In Java 8, you can use the new streaming syntax","label":{"api":{}}},{"text":"The contract for hashCode does not guarantee equality, so you probably need to call equals all the way down the tree to make sure everything balances out","label":{"api":{"hashCode":[[17,24]],"equals":[[84,89]]}}},{"text":"JLayeredPane.remove(int) refers to the child's absolute index, not its layer position","label":{"api":{"JLayeredPane.remove(int)":[[0,23]]}}},{"text":"If you want to just overwrite existing elements in the stringArray, without touching those at farther indexes, use System#arraycopy(Object, int, Object, int, int)","label":{"api":{"System#arraycopy(Object, int, Object, int, int)":[[115,161]]}}},{"text":"Also, make sure the stringList is not longer than stringArray or you'll get IndexOutOfBoundsExceptions","label":{"api":{"IndexOutOfBoundsExceptions":[[76,101]]}}},{"text":"Check Java String API","label":{"api":{"String":[[11,16]]}}},{"text":"To know postion of last letter of java use last index plus \"java\".length","label":{"api":{"last index":[[43,52]],".length":[[65,71]]}}},{"text":"You should encode your URL using URLEncoder","label":{"api":{"URLEncoder":[[33,42]]}}},{"text":"You can have a main dispatcher, that creates Threads that will invoke each client main method","label":{"api":{"Threads":[[45,51]]}}},{"text":"Thread.join() is used to wait for the Threads to finish, if you want to do some later actions (prompt something for example)","label":{"api":{"Thread.join()":[[0,12]],"Threads":[[38,44]]}}},{"text":"I was getting the same ClassCastException with concurrent calls to HashMap.computeIfAbsent","label":{"api":{"ClassCastException":[[23,40]],"HashMap.computeIfAbsent":[[67,89]]}}},{"text":"I fixed by changing the implmentation to use ConcurrentHashMap","label":{"api":{"ConcurrentHashMap":[[45,61]]}}},{"text":"You can see about the DefaultListModel definition","label":{"api":{"DefaultListModel":[[22,37]]}}},{"text":"If you need something at the complete other end of the spectrum (something simple), simply stick to a ConcurrentQueue","label":{"api":{"ConcurrentQueue":[[102,116]]}}},{"text":"While BigDecimal is much more powerful and flexible than double it does still have limits; namely its scale is an int","label":{"api":{"BigDecimal":[[6,15]]}}},{"text":"I'm not sure how loadLibrary handles full paths, but System.load can do it","label":{"api":{"loadLibrary":[[17,27]],"System.load":[[53,63]]}}},{"text":"Or you can use SwingUtilities.convertPoint(...) method to convert point from one component to another, like next","label":{"api":{"SwingUtilities.convertPoint(...)":[[15,46]]}}},{"text":"Why not just set the default values via config.set() if !file.exists()","label":{"api":{"config.set()":[[40,51]],"!file.exists()":[[56,69]]}}},{"text":"To make sure the updated objects are sent instead of references, you need to call reset() on the stream","label":{"api":{"reset()":[[82,88]]}}},{"text":"you try to instantiate interface directly, which is not allowed","label":{"api":{}}},{"text":"Since Frame itself is Container and Component (see API) you can add it to another container and so to another Frame or Panel or any other containers","label":{"api":{"Frame":[[6,10],[110,114]],"Container":[[22,30]],"Component":[[36,44]],"container":[[82,90],[138,146]],"Panel":[[119,123]]}}},{"text":"You need to either iterate over the array you are given in a for loop and write to it, or use System.arraycopy if you have constructed another buffer that contains the result","label":{"api":{"System.arraycopy":[[94,109]]}}},{"text":"Use a Collator to do alphabetical ordering","label":{"api":{"Collator":[[6,13]]}}},{"text":"The Collections.sort method sorts the List in place; it returns void, and you can't assign the result of a void-returning method to anything","label":{"api":{"Collections.sort":[[4,19]]}}},{"text":"According to the TreeMap documentation, the tree will be sorted according to the compareTo method, so any changes that are not reflected in the sign of a.compareTo(b) are allowed","label":{"api":{"TreeMap":[[17,23]],"compareTo":[[81,89]],"a.compareTo(b)":[[152,165]]}}},{"text":"As pointed out by @Rod_Algonquin, 1000*16777216 exceeds the range of int (int takes value between -231 to 231 - 1 ), so it causes overflow","label":{"api":{}}},{"text":"You have to use executeUpdate() instead of executeQuery() for data manipulation like Insert,Update or Delete","label":{"api":{"executeUpdate()":[[16,30]],"executeQuery()":[[43,56]]}}},{"text":"It is important to note that if the timezone of your database is different from the JVM's, you should use the setDate overload that takes the TZ into account","label":{"api":{"setDate":[[110,116]]}}},{"text":"You might also take a look at ExecutorCompletionService, it might make your code simpler","label":{"api":{"ExecutorCompletionService":[[30,54]]}}},{"text":"If you don't want to include more sophisticated libraries you might use javax.swing.Timer (as mentioned by @VGR), java.util.concurrent.ScheduledExecutorService or java.util.Timer","label":{"api":{"javax.swing.Timer":[[72,88]],"java.util.concurrent.ScheduledExecutorService":[[114,158]],"java.util.Timer":[[163,177]]}}},{"text":"Example using javax.swing.Timer","label":{"api":{"javax.swing.Timer":[[14,30]]}}},{"text":"Example using ScheduledExecutorService (remember that the actual logic touching UI components probably must be run from the GUI thread (AWT event dispatch thread in case of Swing), not executor's thread)","label":{"api":{"ScheduledExecutorService":[[14,37]],"Swing":[[173,177]]}}},{"text":"Place a JPanel that uses a CardLayout in the center of your window","label":{"api":{"JPanel":[[8,13]],"CardLayout":[[27,36]]}}},{"text":"CardLayout shows only one of its children at a time, and will always have a preferred size that accommodates all of the children, both visible and invisible","label":{"api":{"CardLayout":[[0,9]]}}},{"text":"Display long text using a JTextArea (if it's all in the same font), a JEditorPane (if it's predefined HTML that you are packaging with your application), or a JTextPane (if the text is dynamic, and has images and/or uses multiple fonts)","label":{"api":{"JTextArea":[[26,34]],"JEditorPane":[[70,80]],"JTextPane":[[159,167]]}}},{"text":"All of those should have setEditable(false) called on them, and should be placed in a JScrollPane","label":{"api":{"setEditable(false)":[[25,42]],"JScrollPane":[[86,96]]}}},{"text":"Yes, Starting from Java-8 you can use the new Exact method, it will throw an exception(java.lang.ArithmeticException","label":{"api":{"Exact":[[46,50]],"java.lang.ArithmeticException":[[87,115]]}}},{"text":"You want to write a Java agent","label":{"api":{"agent":[[25,29]]}}},{"text":"The above built agent can than be installed on an instance of the instrumentation interface which is provided to any Java agent","label":{"api":{"agent":[[122,126]]}}},{"text":"There are plenty of similar examples, DocumentBuilderFactory or TransformerFactory are both abstract but their newInstance() method will return a subclass, usually packaged separately (e.g","label":{"api":{"DocumentBuilderFactory":[[38,59]],"TransformerFactory":[[64,81]],"newInstance()":[[111,123]]}}},{"text":"If you're on Java 7/8, you can get this information from BasicFileAttributes","label":{"api":{"BasicFileAttributes":[[57,75]]}}},{"text":"If you also need the owner of the file you can get it trough FileOwnerAttributeView like this","label":{"api":{"FileOwnerAttributeView":[[61,82]]}}},{"text":"See Java's Executors for that","label":{"api":{"Executors":[[11,19]]}}},{"text":"You need to configure an instance of DateFormat, with your locale, (take a look at https://docs.oracle.com/javase/7/docs/api/java/util/Locale.html)","label":{"api":{"DateFormat":[[37,46]]}}},{"text":"You should use a PreparedStatement with bind variables to eliminate the chance of SQL injection (and to enable the DB to cache the query)","label":{"api":{"PreparedStatement":[[17,33]]}}},{"text":"The default capacity for ArrayList is 10, while the initial capacity of ArrayDeque is 16","label":{"api":{"ArrayList":[[25,33]],"ArrayDeque":[[72,81]]}}},{"text":"String.concat returns a different String object and does not modify the original String","label":{"api":{"String.concat":[[0,12]],"String":[[34,39],[81,86]]}}},{"text":"To fix this, use List.set to replace the old value in the list with a new one","label":{"api":{"List.set":[[17,24]]}}},{"text":"Instead, use the set method","label":{"api":{"set":[[17,19]]}}},{"text":"If you have not overridden this method to provide custom behavior, it will use the parent method (in this case, the default Object.toString())","label":{"api":{"Object.toString()":[[124,140]]}}},{"text":"You should use the replaceAll method instead of replace when you want to pass a regex string as the pattern to be replaced","label":{"api":{"replaceAll":[[19,28]]}}},{"text":"I am trying to find a way to convert Document to String and found this XML Document to String","label":{"api":{"Document":[[37,44]],"String":[[49,54],[87,92]],"XML Document":[[71,82]]}}},{"text":"But, I want to do the conversion without using TransformerFactory because of XXE Vulnerabilities and by using DocumentBuilderFactory only","label":{"api":{"TransformerFactory":[[47,64]],"DocumentBuilderFactory":[[110,131]]}}},{"text":"If you want to convert a String to a char[] array, use the toCharArray method","label":{"api":{"String":[[25,30]],"char[]":[[37,42]],"toCharArray":[[59,69]]}}},{"text":"The Java 8 java.time.LocalDate class has no public constructors, but it does have a private constructor that takes three int values","label":{"api":{"java.time.LocalDate":[[11,29]]}}},{"text":"You're setting a session attribute on the name of a reserved EL variable referring the HTTP request header","label":{"api":{}}},{"text":"This is supposed to be used to access a HTTP request header in EL such as ${header['User-Agent']}","label":{"api":{}}},{"text":"Note that I also renamed the Java variable for clarity, because this definitely doesn't represent a \"response header\"","label":{"api":{}}},{"text":"According to Thread javadoc","label":{"api":{"Thread":[[13,18]]}}},{"text":"see ThreadPoolExecutor doc, especially keepalive configuration) it might keep the threads running forever or terminate when they are unused for some time","label":{"api":{"ThreadPoolExecutor":[[4,21]]}}},{"text":"You must either call shutdown on your executor or create it with a custom ThreadFactory (e.g","label":{"api":{"shutdown":[[21,28]],"executor":[[38,45]],"ThreadFactory":[[74,86]]}}},{"text":"using Executors.newFixedThreadPool(int, ThreadFactory)) where that thread factory will configure new threads as daemon ones","label":{"api":{"Executors.newFixedThreadPool(int, ThreadFactory)":[[6,53]]}}},{"text":"To solve the problem, query ListSelectionEvent.getValueIsAdjusting() & only progress if it is false","label":{"api":{"ListSelectionEvent.getValueIsAdjusting()":[[28,67]]}}},{"text":"What you should use is an array, List or a Map","label":{"api":{"List":[[33,36]],"Map":[[43,45]]}}},{"text":"A Map is probably the closest to what you want","label":{"api":{"Map":[[2,4]]}}},{"text":"The first sentence of WeakHashMap's javadoc says","label":{"api":{"WeakHashMap":[[22,32]],"says":[[44,47]]}}},{"text":"Make your thread a daemon thread","label":{"api":{}}},{"text":"The Java Virtual Machine exits when the only threads running are all daemon threads","label":{"api":{}}},{"text":"You may find it more convenient to use a JavaFX Task","label":{"api":{"JavaFX Task":[[41,51]]}}},{"text":"Instead, use a timer","label":{"api":{"timer":[[15,19]]}}},{"text":"Have you considered using a Map","label":{"api":{"Map":[[28,30]]}}},{"text":"This means if you give the Map a time, it will return the actions related to it","label":{"api":{"Map":[[27,29]]}}},{"text":"Assuming you use Date for representing time, and a class called Action for the actions, the implementation would look like this","label":{"api":{"Date":[[17,20]],"Action":[[64,69]]}}},{"text":"Map is an interface, so we have to use one of its implementations, in this case a HashMap","label":{"api":{"Map":[[0,2]],"HashMap":[[82,88]]}}},{"text":"See the API documentation","label":{"api":{}}}]