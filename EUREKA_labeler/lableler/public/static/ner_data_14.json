[{"text":"Use a Map<String, Integer>, as @radoslaw pointed, to keep the insertion sorting use LinkedHashMap and not a TreeMap as described here","label":{"api":{"Map<String, Integer>":[[6,25]],"LinkedHashMap":[[84,96]],"TreeMap":[[108,114]]}}},{"text":"LinkedHashMap keeps the keys in the order they were inserted, while a TreeMap is kept sorted via a Comparator or the natural Comparable ordering of the elements","label":{"api":{"LinkedHashMap":[[0,12]],"TreeMap":[[70,76]],"Comparator":[[99,108]],"Comparable":[[125,134]]}}},{"text":"For example, in querying for procedures (getProcedures method)","label":{"api":{"getProcedures":[[41,53]]}}},{"text":"The interface does define getCatalogTerm method, but in my case it returns an empty string","label":{"api":{"getCatalogTerm":[[26,39]]}}},{"text":"Java 8 introduces the java.time.Clock interface, which should allow me to mock out system time calls effectively (awesome!)","label":{"api":{"java.time.Clock":[[22,36]]}}},{"text":"If you use Java 8, you can filter the list with by passing a Predicate","label":{"api":{"Predicate":[[61,69]]}}},{"text":"What you observe is the typical behavior of the ButtonModel used by Swing buttons","label":{"api":{"ButtonModel":[[48,58]],"Swing button":[[68,79]]}}},{"text":"To get the effect you want, you would have to create buttons using your own variation of BasicButtonUI and a custom ButtonModel that uses isRollover() to add buttons to your program's notion of a selection model","label":{"api":{"BasicButtonUI":[[89,101]],"ButtonModel":[[116,126]],"isRollover()":[[138,149]]}}},{"text":"Since you don't describe how you are storing the value, you can use DecimalFormat#getNumberInstance to help format it to one that doesn't contain the scientific notation","label":{"api":{"DecimalFormat#getNumberInstance":[[68,98]]}}},{"text":"Avoid returning null when possible because it can lead to bugs, insted you can return a Java8 Optional","label":{"api":{"Optional":[[94,101]]}}},{"text":"Returning an Optional forces the client to think about how to handle the case where nothing is returned","label":{"api":{"Optional":[[13,20]]}}},{"text":"toString() is declared in Object (from which all your classes inherit), that's why you can call it without being overridden in your class Living (some goes for methods such as equals(), hashCode(), etc.)","label":{"api":{"toString()":[[0,9]],"Object":[[26,31]],"equals()":[[176,183]],"hashCode()":[[186,195]]}}},{"text":"Notice, that if you would call the toString() on a different subclass of Living, such as Animal, which does not explicitly override toString(), you would get a default toString() result from Object","label":{"api":{"toString()":[[35,44],[132,141],[168,177]],"Animal":[[89,94]],"Object":[[191,196]]}}},{"text":"The method of a java.util.function.Function object is apply","label":{"api":{"java.util.function.Function":[[16,42]]}}},{"text":"As with many JavaFX controls there is a SelectionModel to get first","label":{"api":{"SelectionModel":[[40,53]]}}},{"text":"tabPane.getSelectionModel().getSelectedItem();  To get the currently selected tab, or alternatively, getSelectedIndex() for the index of the selected tab","label":{"api":{"tabPane.getSelectionModel().getSelectedItem()":[[0,44]],"getSelectedIndex()":[[101,118]]}}},{"text":"Since you're dealing with properties, you can use the java.util.Properties class to save and load from a .properties file","label":{"api":{"java.util.Properties":[[54,73]]}}},{"text":"By default, NetBeans fetches the Java SE 8 documentation from https://docs.oracle.com/javase/8/docs/api/","label":{"api":{}}},{"text":"Never make up code by guessing, but instead use the Java API to see exactly what methods are allowed for each of the core Java classes","label":{"api":{}}},{"text":"This allows you to use any HTTP client library - including the basic HttpURLConnection, which you can get from (HttpURLConnection)url_kep.openConnection()","label":{"api":{"HttpURLConnection":[[69,85]],"(HttpURLConnection)url_kep.openConnection()":[[111,153]]}}},{"text":"Guava provides the Optional class exactly for the purpose of not having to return null","label":{"api":{"Guava":[[0,4]],"Optional":[[19,26]]}}},{"text":"However, if you are already using Java 8, please note that this also comes with an Optional class and you might prefer to use that one (for the sake of being independent from an external library)","label":{"api":{"Optional":[[83,90]]}}},{"text":"You can make use of a LinkedHashSet (maintains insertion order)","label":{"api":{"LinkedHashSet":[[22,34]]}}},{"text":"Should I give up encoders and go element by element using org.w3c.dom.Node and the rest of the Java parsers suite","label":{"api":{"org.w3c.dom.Node":[[58,73]]}}},{"text":"This results in the use of RandomSaltGenerator which uses SecureRandom (as of Jasypt v1.9.1)","label":{"api":{"RandomSaltGenerator":[[27,45]],"SecureRandom":[[58,69]]}}},{"text":"SecureRandom will block if not enough entropy is available, as markspace pointed out","label":{"api":{"SecureRandom":[[0,11]]}}},{"text":"Jasypt provides some fixed SaltGenerators you can use, or you can roll your own random one that doesn't use SecureRandom","label":{"api":{"SaltGenerators":[[27,40]],"SecureRandom":[[108,119]]}}},{"text":"Your code can get way simpler by using Arrays.deepEquals","label":{"api":{"Arrays.deepEquals":[[39,55]]}}},{"text":"In concurrent environment consider using CopyOnWriteArrayList instead of simple ArrayList","label":{"api":{"CopyOnWriteArrayList":[[41,60]],"ArrayList":[[80,88]]}}},{"text":"Sort your array with a custom comparator (See https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#sort(T[],%20java.util].Comparator)","label":{"api":{"comparator":[[30,39]]}}},{"text":"You're probably looking for filter and findFirst","label":{"api":{"filter":[[28,33]],"findFirst":[[39,47]]}}},{"text":"findFirst returns some type of Optional, so you need to decide what to do with it if you don't find a match","label":{"api":{"findFirst":[[0,8]],"Optional":[[31,38]]}}},{"text":"There is some practice in Java to use final static for the purpose of naming integer values (see for instance http://docs.oracle.com/javase/7/docs/api/javax/swing/SwingConstants.html), but not specifically for the purpose you describe","label":{"api":{}}},{"text":"Since Guava has a lot of collections, and the Collection interface actually defines a size() method, my gut tells me that Guava is more inclined to follow the Collection interface than JavaBeans conventions","label":{"api":{"Guava":[[6,10],[122,126]],"Collection":[[46,55],[159,168]],"size()":[[86,91]]}}},{"text":"You are having a dependency on java.lang.LocalTime, which was introduced in Java 8","label":{"api":{"java.lang.LocalTime":[[31,49]]}}},{"text":"Does the java.time package found in JavaÂ 8 and later have an equivalent feature","label":{"api":{"java.time":[[9,17]]}}},{"text":"The javadoc for HashMap.get(Object) doesn't guarantee O(1) performance either, yet it is well known for being so","label":{"api":{"HashMap.get(Object)":[[16,34]]}}},{"text":"The ExecutorService provides methods which allow you to schedule tasks and invoke them with timeout options","label":{"api":{"ExecutorService":[[4,18]]}}},{"text":"The mentions of hash buckets and retrieval implies that a HashSet has some relation to a hash map as the HashSet interface only exposes add, remove and contains methods, no T retrieve(int hashCode) method","label":{"api":{"HashSet":[[58,64],[105,111]],"add":[[136,138]],"remove":[[141,146]],"contains":[[152,159]],"retrieve(int hashCode)":[[175,196]]}}},{"text":"Check the DecimalFormat class","label":{"api":{"DecimalFormat":[[10,22]]}}},{"text":"If this is not an option, use the second overload of indexOf that lets you specify the lowest position where to start looking for substring","label":{"api":{"indexOf":[[53,59]]}}},{"text":"With ArrayList you may get ConcurrentModificationException (or may get corrupted data or some other exception","label":{"api":{"ArrayList":[[5,13]],"ConcurrentModificationException":[[27,57]]}}},{"text":"With CopyOnWriteArrayList you can safely use stream operations","label":{"api":{"CopyOnWriteArrayList":[[5,24]]}}},{"text":"You can use BigInteger.toString(int radix)","label":{"api":{"BigInteger.toString(int radix)":[[12,41]]}}},{"text":"Look also for the Field javadoc","label":{"api":{"Field":[[18,22]]}}},{"text":"The cases are well-defined if you read the specification of Collection.toArray(T[]) carefully","label":{"api":{"Collection.toArray(T[])":[[60,82]]}}},{"text":"In the Java 8 Streams API, the Stream.toArray method avoids this issue by having the caller pass in an array factory","label":{"api":{"Streams":[[14,20]],"Stream.toArray":[[31,44]]}}},{"text":"We can go through Elements.getTypeElement to retrieve a type during processing by its canonical name","label":{"api":{"Elements.getTypeElement":[[18,40]]}}},{"text":"If you intend to connect to an http uri, you'll need to use some other mechanism, such as URL","label":{"api":{"URL":[[90,92]]}}},{"text":"Use PreparedStatement#setClob rather than setBinaryStream","label":{"api":{"PreparedStatement#setClob":[[4,28]],"setBinaryStream":[[42,56]]}}},{"text":"In order to create an instance of Clob use Connection#createClob","label":{"api":{"Clob":[[34,37]],"Connection#createClob":[[43,63]]}}},{"text":"Check Robot and KeyEvent","label":{"api":{"Robot":[[6,10]],"KeyEvent":[[16,23]]}}},{"text":"One way it to use the overloaded version of Files.write that accepts a Charset","label":{"api":{"Files.write":[[44,54]],"Charset":[[71,77]]}}},{"text":"Also, you can take a look to java.nio.charset.Charset","label":{"api":{"java.nio.charset.Charset":[[29,52]]}}},{"text":"http://docs.oracle.com/javase/7/docs/api/java/util/Set.html#add(E) Try something with a set","label":{"api":{}}},{"text":"For accessing to a resource file you should use Class#getResourceAsStream for reading this file","label":{"api":{"Class#getResourceAsStream":[[48,72]]}}},{"text":"By default, ofPattern uses a SMART resolver style which will use reasonable defaults","label":{"api":{"ofPattern":[[12,20]]}}},{"text":"YEAR instead of YEAR_OF_ERA","label":{"api":{"YEAR":[[0,3]],"YEAR_OF_ERA":[[16,26]]}}},{"text":"More details about the getStackTrace() method","label":{"api":{"getStackTrace()":[[23,37]]}}},{"text":"Keep in mind that the primary purpose of Stream.collect() is to support Mutable Reduction","label":{"api":{"Stream.collect()":[[41,56]]}}},{"text":"non-mutable, Reduction operation with value types (or types having value type semantics) via a Collector","label":{"api":{"Reduction":[[13,21]],"Collector":[[95,103]]}}},{"text":"You could define your own RuleBasedCollator (see myrules in code below)","label":{"api":{"RuleBasedCollator":[[26,42]]}}},{"text":"But much more elegantly, you could use Collections.reverseOrder","label":{"api":{"Collections.reverseOrder":[[39,62]]}}},{"text":"Use new java.time classes instead","label":{"api":{"java.time":[[8,16]]}}},{"text":"Acquire a Lock in all threads on activeTiles before iterating them","label":{"api":{"Lock":[[10,13]],"activeTiles":[[33,43]]}}},{"text":"The list returned by Collections.synchronizedList() saves you from having to use the synchronized block (above) in single operations on that list, like add(e), size(), get(i) and so on..","label":{"api":{"Collections.synchronizedList()":[[21,50]],"add(e)":[[152,157]],"size()":[[160,165]],"get(i)":[[168,173]]}}},{"text":"Your second option is to use a CopyOnWriteArrayList, which is thread-safe and doesn't require any external synchronization - but any modifications to the list (add/remove/replace calls) become significantly more expensive","label":{"api":{"CopyOnWriteArrayList":[[31,50]],"add":[[160,162]],"remove":[[164,169]],"replace":[[171,177]]}}},{"text":"The method Class.forName() will throw a ClassNotFoundException when the given class cannot be located","label":{"api":{"Class.forName()":[[11,25]],"ClassNotFoundException":[[40,61]]}}},{"text":"Since ClassNotFoundException is a checked exception, you actually have to deal with the possibility that one might occur","label":{"api":{"ClassNotFoundException":[[6,27]]}}},{"text":"No, you don't, merely have your class inherit from Number and use type checking to ensure that values are of the appropriate class, if necessary, e.g","label":{"api":{"Number":[[51,56]]}}},{"text":"Use AtomicInteger instead","label":{"api":{"AtomicInteger":[[4,16]]}}},{"text":"The easiest way would be to use Arrays.asList","label":{"api":{"Arrays.asList":[[32,44]]}}},{"text":"Note that the list returned by Arrays.asList(...) is backed by the array","label":{"api":{"Arrays.asList(...)":[[31,48]]}}},{"text":"Also, you won't be able to add anything to the list; if you call add on the list returned by Arrays.asList(...), you'll get an UnsupportedOperationException","label":{"api":{"Arrays.asList(...)":[[93,110]],"UnsupportedOperationException":[[127,155]]}}},{"text":"I suspect you just want BigDecimal.movePointLeft","label":{"api":{"BigDecimal.movePointLeft":[[24,47]]}}},{"text":"You can set the error code that is returned by the JVM when the process exists using the System.exit(...) call","label":{"api":{"System.exit(...)":[[89,104]]}}},{"text":"You can simply use a class to define your object and JSONObject to parse your JSON object and get its properties","label":{"api":{"JSONObject":[[53,62]]}}},{"text":"The string you are getting is the default representation of your Array object provided by Object.toString() method","label":{"api":{"Array":[[65,69]],"Object.toString()":[[90,106]]}}},{"text":"I thought it might be a good idea to simulate jumping by using PathTransition along an Arc shape","label":{"api":{"PathTransition":[[63,76]],"Arc":[[87,89]]}}},{"text":"I tried looking through the documentation for Arc and PathTransition but couldn't find anything to help me solve the problem","label":{"api":{"Arc":[[46,48]],"PathTransition":[[54,67]]}}},{"text":"You can store it in a Java Clip","label":{"api":{"Clip":[[27,30]]}}},{"text":"You can do this with TreeMap<String,Integer> using the tailMap method, and iterating the result while the key matches the input","label":{"api":{"TreeMap<String,Integer>":[[21,43]],"tailMap":[[55,61]]}}},{"text":"In any case where you want continuous changes, use a swing Timer","label":{"api":{"swing Timer":[[53,63]]}}},{"text":"Month are 0-based, so you're setting your calendar to February, not January","label":{"api":{}}},{"text":"The rules for those transformations are contained in what Java calls a Charset","label":{"api":{"Charset":[[71,77]]}}},{"text":"The standardones can be found in StandardCharsets","label":{"api":{"StandardCharsets":[[33,48]]}}},{"text":"If you want a thread to wait until all tasks submitted to the ExecutorService have completed, call awaitTermination(), indicating how long you are willing to wait","label":{"api":{"ExecutorService":[[62,76]],"awaitTermination(),":[[99,117]]}}},{"text":"When you look at the api (http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#concat(java.lang.String)) you can see that The result of concat on string is a new string so this would return what you expect","label":{"api":{")":[[112,112]]}}},{"text":"But because you have the Class, you can call Class's isInstance method","label":{"api":{"Class":[[25,29],[45,49]],"isInstance":[[53,62]]}}},{"text":"Look at the ZipInputStream in the JDK","label":{"api":{"ZipInputStream":[[12,25]]}}},{"text":"Create a ZipInputStream from the FileInputStream and you can read the entries using getNextEntry","label":{"api":{"ZipInputStream":[[9,22]],"FileInputStream":[[33,47]],"getNextEntry":[[84,95]]}}},{"text":"use a DatePicker instead of a TextField directly","label":{"api":{"DatePicker":[[6,15]],"TextField":[[30,38]]}}},{"text":"You then can use the converter property, if the default formatting doesn't fit your needs","label":{"api":{"converter":[[21,29]]}}},{"text":"The method stream() is a default method defines in the interface java.util.Collection","label":{"api":{"stream()":[[11,18]],"java.util.Collection":[[65,84]]}}},{"text":"Java 8's Collection (not Collections) has a stream() default method, which is inherited by ArrayList","label":{"api":{"Collection":[[9,18]],"Collections":[[25,35]],"stream()":[[44,51]],"ArrayList":[[91,99]]}}},{"text":"The order is not guaranteed, use a fair ReentrantLock if that is important","label":{"api":{"ReentrantLock":[[40,52]]}}},{"text":"You can simply use Object.hashCode() or if you really need to use toString you can override it","label":{"api":{"Object.hashCode()":[[19,35]],"toStrin":[[66,72]]}}},{"text":"Another possible way would involve using a StringBuilder, keeping track of the internal index of the last match and using replace() to substitute the keyword directly","label":{"api":{"StringBuilder":[[43,55]],"replace()":[[122,130]]}}},{"text":"You can use Arrays.toString(), but this way you will need to parse it to read it","label":{"api":{"Arrays.toString()":[[12,28]]}}},{"text":"I suggest you to use a j2ee filter add that filter to the API calls where throttling is necessary","label":{"api":{"j2ee filter":[[23,33]],"filter":[[44,49]]}}},{"text":"First you convert your array to List via Arrays.asList, then you use List.indexOf method","label":{"api":{"List":[[32,35]],"Arrays.asList":[[41,53]],"List.indexOf":[[69,80]]}}},{"text":"Try calling the executable with java.lang.Runtime.exec()","label":{"api":{"java.lang.Runtime.exec()":[[32,55]]}}},{"text":"What would work better is to use a BlockingQueue implementation, like LinkedBlockingQueue, removing the use of synchronized blocks in your program","label":{"api":{"BlockingQueue":[[35,47]],"LinkedBlockingQueue,":[[70,89]]}}},{"text":"So I was reading the JPanel API and saw the fields about inherited methods for example, and I saw three boxes of methods that JPanel inherits","label":{"api":{"JPanel":[[21,26],[126,131]]}}},{"text":"The safest way to ensure that a frame (or two) have been rendered before executing code is to use an AnimationTimer","label":{"api":{"AnimationTimer":[[101,114]]}}},{"text":"When you call Arrays.copyOf and request a larger array, all of the extra elements are set to null (as specified in the Arrays.copyOf documentation)","label":{"api":{"Arrays.copyOf":[[14,26],[119,131]]}}},{"text":"You should create your own logging.properties file and set the java.util.logging.config.file system property to configure the LogManager for your application","label":{"api":{"logging.properties":[[27,44]],"java.util.logging.config.file":[[63,91]],"LogManager":[[126,135]]}}},{"text":"The pattern you are using for your SimpleDateFormat is wrong","label":{"api":{"SimpleDateFormat":[[35,50]]}}},{"text":"Use it when you create your SimpleDateFormat","label":{"api":{"SimpleDateFormat":[[28,43]]}}},{"text":"For more info on what the different letters mean, have a look at the documentation for SimpleDateFormat","label":{"api":{"SimpleDateFormat":[[87,102]]}}},{"text":"Note also that SimpleDateFormat.parse() won't give you a java.sql.Date as mentioned in the title, but rather a java.util.Date","label":{"api":{"SimpleDateFormat.parse()":[[15,38]],"java.sql.Date":[[57,69]],"java.util.Date":[[111,124]]}}},{"text":"To output the date in a different format, you would create a second SimpleDateFormat with the pattern that represents the desired output format","label":{"api":{"SimpleDateFormat":[[68,83]]}}},{"text":"Then you can convert it back to the String you want using SimpleDateFormat.format()","label":{"api":{"String":[[36,41]],"SimpleDateFormat.format()":[[58,82]]}}},{"text":"I'm using the java AsynchronousSocketChannel from nio2 in my project","label":{"api":{"AsynchronousSocketChannel":[[19,43]],"nio2":[[50,53]]}}},{"text":"The code calls the read operation recursively in the completed method of the CompletionHandler anonymous class, like this","label":{"api":{"CompletionHandler":[[77,93]]}}},{"text":"I have increased the SO_RCVBUF to 64K, but it doesn't work","label":{"api":{"SO_RCVBUF":[[21,29]]}}},{"text":"The first, and probably easiest (for an image), is AbstractButton.setIcon(Icon defaultIcon) An Icon is a type of image, loadable from a BufferedImage with ImageIcon(Image image) and manipulable in the same way","label":{"api":{"AbstractButton.setIcon(Icon defaultIcon)":[[51,90]],"Icon":[[95,98]],"BufferedImage":[[136,148]],"ImageIcon(Image image)":[[155,176]]}}},{"text":"Use a StringBuilder","label":{"api":{"StringBuilder":[[6,18]]}}},{"text":"A StringBuilder allows you to concatenate Strings faster that the normal outputString += inputString would do","label":{"api":{"StringBuilder":[[2,14]],"String":[[42,47]]}}},{"text":"This has to do with the fact that String objects are immutable, while a StringBuilder isn't","label":{"api":{"String":[[34,39]],"StringBuilder":[[72,84]]}}},{"text":"nextInteger() should be what you're looking for","label":{"api":{"nextInteger()":[[0,12]]}}},{"text":"And since you are using the constructor which truncates existing files, that might happen before your attempt of acquiring the lock","label":{"api":{}}},{"text":"One solution is use new FileOutputStream(fileToWrite, true) to avoid truncating the file","label":{"api":{"FileOutputStream(fileToWrite, true)":[[24,58]]}}},{"text":"In this case, the constructors of FileOutputStream donât help you as they force you to decide for either, truncating or appending","label":{"api":{"FileOutputStream":[[34,49]]}}},{"text":"The solution is to abandon the old API and open the FileChannel directly (requires at least JavaÂ 7)","label":{"api":{"FileChannel":[[52,62]]}}},{"text":"Then you have plenty of standard open options where truncating and appending are distinct","label":{"api":{}}},{"text":"Omitting both allows overwriting without eagerly truncating the file","label":{"api":{}}},{"text":"Note that this code uses CREATE which implies the already familiar behavior of creating the file if it doesnât exists, in contrast to CREATE_NEW which would require that the file doesnât exist","label":{"api":{"CREATE":[[25,30]],"CREATE_NEW":[[134,143]]}}},{"text":"There's a library method Arrays.fill to set the same value for single-dimensional array","label":{"api":{"Arrays.fill":[[25,35]]}}},{"text":"What you can try doing is implementing the Runnable interface and then starting a new Thread of the class that you are using to draw your Components","label":{"api":{"Runnable":[[43,50]],"Thread":[[86,91]]}}},{"text":"Since Thread implements the Runnable interface, you will be able to create a new point of execution in the program where you can call a delay with Thread.sleep() before repainting your components","label":{"api":{"Thread":[[6,11]],"Runnable":[[28,35]],"Thread.sleep()":[[147,160]]}}},{"text":"If you are interested in trying this out, more information can be found on the API on Threads and on the Runnable interface","label":{"api":{"Threads":[[86,92]],"Runnable":[[105,112]]}}},{"text":"Use Arrays.toString() to convert it","label":{"api":{"Arrays.toString()":[[4,20]]}}},{"text":"Take the files in the folder, get name, extract the extension, use File.mkDir() to create the directory and File.renameTo() to move them","label":{"api":{"File.mkDir()":[[67,78]],"File.renameTo()":[[108,122]]}}},{"text":"Why not try combining java.io.File.mkdir() and java.nio.file.Files.move()","label":{"api":{"java.io.File.mkdir()":[[22,41]],"java.nio.file.Files.move()":[[47,72]]}}},{"text":"BitSet.cardinality() returns the number of bits set to true in the BitSet","label":{"api":{"BitSet.cardinality()":[[0,19]],"BitSet":[[67,72]]}}},{"text":"I think you are looking for BitSet.size()","label":{"api":{"BitSet.size()":[[28,40]]}}},{"text":"For this you can use System.arraycopy() instead of create your own sorting or copy function","label":{"api":{"System.arraycopy()":[[21,38]]}}},{"text":"EventListener is only Interface (actually very low level) and it only defines what should be implemented","label":{"api":{"EventListener":[[0,12]]}}},{"text":"According to the Stream Javadocs you can use the other toArray() method if you want to turn it into an array, but I've not explored this function yet so I don't want to discuss something I don't know","label":{"api":{"Stream":[[17,22]],"toArray()":[[55,63]]}}},{"text":"Collections.sort() using a custom Comparator","label":{"api":{"Collections.sort()":[[0,17]],"Comparator":[[34,43]]}}},{"text":"Java provides the URLConnection class (https://docs.oracle.com/javase/7/docs/api/java/net/URLConnection.html) which is what you need","label":{"api":{"URLConnection":[[18,30]]}}},{"text":"Compare the string read against System#lineSeparator","label":{"api":{"System#lineSeparator":[[32,51]]}}},{"text":"Try Arrays.equals(..) instead","label":{"api":{"Arrays.equals(..)":[[4,20]]}}},{"text":"Access to put and get is a result of Properties being an extension of Hashtable, and the two method should not be used (but cannot be hidden from implementation due to their public access in the superclass)","label":{"api":{"Properties":[[37,46]],"Hashtable":[[70,78]]}}},{"text":"Because Properties inherits from Hashtable, the put and putAll methods can be applied to a Properties object","label":{"api":{"Properties":[[8,17],[91,100]],"Hashtable":[[33,41]],"put":[[48,50]],"putAll":[[56,61]]}}},{"text":"As @yshavit notes, it'd make more sense for Properties to extend Hashtable<String, String> than a hashtable of two objects, but this was likely a decision made to maintain backwards compatibility, as any programs using get/put with any non-String objects would have been broken by such a change","label":{"api":{"Properties":[[44,53]],"Hashtable<String, String>":[[65,89]],"get":[[219,221]],"put":[[223,225]]}}},{"text":"If you are using java.awt.Point, then yes it will output the two points are equal","label":{"api":{"java.awt.Point":[[17,30]]}}},{"text":"Read about .equals method for the Point class","label":{"api":{".equals":[[11,17]],"Point":[[34,38]]}}},{"text":"If you are not using the java.awt.Point class and the class you are using does not override and check the x and y with a .equals method then it will not be equal since they are two separate instances","label":{"api":{"java.awt.Point":[[25,38]],".equals":[[121,127]]}}},{"text":"The createNativeQuery() takes an Entity class and not a DTO class","label":{"api":{"createNativeQuery()":[[4,22]],"Entity":[[33,38]],"DTO":[[56,58]]}}},{"text":"Arrays.deepHashCode will discover arrays in the array (via instanceof Object[]) and recursively call itself","label":{"api":{"Arrays.deepHashCode":[[0,18]],"Object[]":[[70,77]]}}},{"text":"The docs for String(byte[], int, int, String) specify the behavior (namely, that it's unspecified :) ) and suggest the fix","label":{"api":{"String(byte[], int, int, String)":[[13,44]]}}},{"text":"The CharsetDecoder class should be used when more control over the decoding process is required","label":{"api":{"CharsetDecoder":[[4,17]]}}},{"text":"According to the docs for that String constructor, UnsupportedEncodingException is only thrown if the specified charsetName is unknown","label":{"api":{"String":[[31,36]],"UnsupportedEncodingException":[[51,78]],"charsetName":[[112,122]]}}},{"text":"So I thought the natural way to do it would be a Stack, since it is LIFO","label":{"api":{"Stack":[[49,53]]}}},{"text":"However, the Java Stack does not seem to play well with the new Java 8 streaming API","label":{"api":{"Stack":[[18,22]],"streaming":[[71,79]]}}},{"text":"See https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html for the appropriate methods","label":{"api":{"appropriate":[[77,87]]}}},{"text":"Your SQL String should only be built from String constants, and every parameter inserted at runtime should be inserted as a bind variable, which means its location should appear as a \"?\"  in the SQL string, and its value should be set using the setX() methods of the PreparedStatement class","label":{"api":{"String":[[42,47]],"setX()":[[245,250]],"PreparedStatement":[[267,283]]}}},{"text":"Note that you should always used bind variables when creating PreparedStatements in Java","label":{"api":{"PreparedStatement":[[62,78]]}}},{"text":"As far as I could find from google, hibernate uses PreparedStatement for its queries","label":{"api":{"hibernate":[[36,44]],"PreparedStatement":[[51,67]]}}},{"text":"So, I would like to extract the PreparedStatement object from the Criteria object","label":{"api":{"PreparedStatement":[[32,48]],"Criteria":[[66,73]]}}},{"text":"You can switch this off using setLenient method","label":{"api":{"setLenient":[[30,39]]}}},{"text":"The JSF Core Tag f:convertDateTime can format java.util.Date objects","label":{"api":{"java.util.Date":[[46,59]]}}},{"text":"LocalDateTime and LocalDate","label":{"api":{"LocalDateTime":[[0,12]],"LocalDate":[[18,26]]}}},{"text":"f:convertDateTime can not format LocalDateTime nor LocalDate","label":{"api":{"LocalDateTime":[[33,45]],"LocalDate":[[51,59]]}}},{"text":"Does anybody know, if there is an equivalent to the JSF core tag convertDateTime that can deal with LocalDateTime objects","label":{"api":{"LocalDateTime":[[100,112]]}}},{"text":"Nope, Enums in Java are Integer values","label":{"api":{"Enums":[[6,10]],"Integer":[[24,30]]}}},{"text":"Serializable is a good example of this in the java api, which is a strong argument that this is kosher","label":{"api":{"Serializable":[[0,11]]}}},{"text":"I add a KeyListener (in this case a KeyAdapter, which is not an interface but do the same thing) to listen to every key Event on your keybord","label":{"api":{"KeyListener":[[8,18]],"KeyAdapter":[[36,45]],"key Event":[[116,124]]}}},{"text":"This works by using a java.util.Random to generate a random number between 0 and the length of your Fun array","label":{"api":{"java.util.Random":[[22,37]]}}},{"text":"In the case you need to check for duplicates of numbers higher than 10, you need to use Integer.parseIn() to parse the String values and change your Map from HashMap<Integer,Character> to HashMap<Integer,String>, here's the code","label":{"api":{"Integer.parseIn()":[[88,104]],"String":[[119,124]],"Map":[[149,151]],"HashMap<Integer,Character>":[[158,183]],"HashMap<Integer,String>":[[188,210]]}}},{"text":"You can get the monitor configuration using GraphicsDevice","label":{"api":{"GraphicsDevice":[[44,57]]}}},{"text":"If you simply want to ensure that the key is not already present in the HashMap when inserting it, you can use the putIfAbsent(K key, V value) method","label":{"api":{"HashMap":[[72,78]],"putIfAbsent(K key, V value)":[[115,141]]}}},{"text":"You can use Integer.parseInt(String s, int radix) to validate that the input is in binary","label":{"api":{"Integer.parseInt(String s, int radix)":[[12,48]]}}},{"text":"The white boxes look like TitledBorder, in this case combined with a LineBorder","label":{"api":{"TitledBorder":[[26,37]],"LineBorder":[[69,78]]}}},{"text":"From the documentation of System#console, it returns","label":{"api":{"System#console":[[26,39]]}}},{"text":"All classes in java inherit from the Object class","label":{"api":{"Object":[[37,42]]}}},{"text":"When you do an r.equals(s), it uses the .equals() method as defined in Object class","label":{"api":{"r.equals(s)":[[15,25]],".equals()":[[40,48]],"Object":[[71,76]]}}},{"text":"According to the Javadoc of File.renameTo(â¦) the behavior of this method is platform dependent","label":{"api":{"File.renameTo(â¦)":[[28,43]]}}},{"text":"You can try the newer (since Java 7) Files.move(â¦)","label":{"api":{"Files.move(â¦)":[[37,49]]}}},{"text":"Yes, using DateFormatSymbols","label":{"api":{"DateFormatSymbols":[[11,27]]}}},{"text":"getMonths returns array of months strings.","label":{"api":{"getMonths":[[0,8]]}}},{"text":"In particular, java.util.Arrays.sort and java.util.Collections.sort are implemented that way","label":{"api":{"java.util.Arrays.sort":[[15,35]],"java.util.Collections.sort":[[41,66]]}}},{"text":"For this, you'd typically use redirectOutput(Redirect.PIPE) and redirectInput(Redirect.PIPE)","label":{"api":{"redirectOutput(Redirect.PIPE)":[[30,58]],"redirectInput(Redirect.PIPE)":[[64,91]]}}},{"text":"This is the signature of the original/parent method in JComponent","label":{"api":{"original":[[29,36]],"parent":[[38,43]],"JComponent":[[55,64]]}}},{"text":"Another method to achieve what you want is to use the Scanner class, like so","label":{"api":{"Scanner":[[54,60]]}}},{"text":"SocketChannel.read returns the number of bytes received","label":{"api":{"SocketChannel.read":[[0,17]]}}},{"text":"What you need to do is pay attention the ByteBuffer's position after each read","label":{"api":{"ByteBuffer":[[41,50]],"position":[[54,61]]}}},{"text":"As you suspected, the flip() method takes care of that for you","label":{"api":{"flip()":[[22,27]]}}},{"text":"So, yes, changing each of your rewind() calls to flip() should solve your problem","label":{"api":{"rewind()":[[31,38]],"flip()":[[49,54]]}}},{"text":"I think it comes down to this, from Runtime.addShutdownHook","label":{"api":{"Runtime.addShutdownHook":[[36,58]]}}},{"text":"If you are already on Java 8 you can use its new new LocalDate class using plusDays() and isBefore() methods","label":{"api":{"LocalDate":[[53,61]],"plusDays()":[[75,84]],"isBefore()":[[90,99]]}}},{"text":"Use Scanner with its next() and nextInt() methods","label":{"api":{"Scanner":[[4,10]],"next()":[[21,26]],"nextInt()":[[32,40]]}}},{"text":"You could use UUID's as unique keys in a Map","label":{"api":{"UUID":[[14,17]],"Map":[[41,43]]}}},{"text":"A batch of rows is fetched when there is no row available locally to fulfill a call to next(), this is done until all rows have been fetched or maxRows has been reached","label":{"api":{"next()":[[87,92]],"maxRows":[[144,150]]}}},{"text":"After this you could use JNDI lookup using your jndi-name to create a java.sql.Connection","label":{"api":{"JNDI lookup":[[25,35]],"java.sql.Connection":[[70,88]]}}},{"text":"You can use use the Calendar class to do this","label":{"api":{"Calendar":[[20,27]]}}},{"text":"Check out the list of supported media types","label":{"api":{}}},{"text":"If non_existing_dir does not exists, you can check getParentFile() and create it with mkdir()","label":{"api":{"getParentFile()":[[51,65]],"mkdir()":[[86,92]]}}},{"text":"Also avoid problems between OS with File.separator","label":{"api":{"File.separator":[[36,49]]}}},{"text":"Learn about PQs here","label":{"api":{"PQs":[[12,14]]}}},{"text":"The Node documentation describes the differences","label":{"api":{"Node":[[4,7]]}}},{"text":"The Polygon is a Shape","label":{"api":{"Polygon":[[4,10]],"Shape":[[17,21]]}}},{"text":"0/0 is the coordinate 0/0 inside the Shape","label":{"api":{"Shape":[[37,41]]}}},{"text":"The shape itself can be placed on the scene by using the setLayoutX (and Y) and setTranslateX (and Y) methods","label":{"api":{"setLayoutX":[[57,66]],"setTranslateX":[[80,92]]}}},{"text":"This is explained in the API docs for the Node class","label":{"api":{"Node":[[42,45]]}}},{"text":"To check if a JRadioButton is selected, you can call the method isSelected()","label":{"api":{"JRadioButton":[[14,25]],"isSelected()":[[64,75]]}}},{"text":"To check if a JButton has been clicked, you can add an ActionListener to the button","label":{"api":{"JButton":[[14,20]],"ActionListener":[[55,68]]}}},{"text":"The example below adds an ActionListener to a jButton1 that will display either jframe2 or jframe3 based on which of the radio buttons are selected (given they're in the same ButtonGroup)","label":{"api":{"ActionListener":[[26,39]],"ButtonGroup":[[175,185]]}}},{"text":"I'd sort them and put into an array, then use binary search to efficiently check if a particular value is in the array","label":{"api":{"binary search":[[46,58]]}}},{"text":"When it doesn't understand your input, it returns the GMT timezone by default","label":{"api":{}}},{"text":"I would recommend using TimeZone.setRawOffset(int offsetInMs) to set the offests for CET and CEST yourself","label":{"api":{"TimeZone.setRawOffset(int offsetInMs)":[[24,60]]}}},{"text":"Set the DST offset on the calendar instance Calendar.DST_OFFSET","label":{"api":{"DST offset":[[8,17]],"Calendar.DST_OFFSET":[[44,62]]}}},{"text":"API documentation remains silent https://docs.oracle.com/javase/8/docs/api/java/util/Base64.Encoder.html","label":{"api":{}}},{"text":"See the API docs for the Application class for more information and an example","label":{"api":{"Application":[[25,35]]}}},{"text":"The drawLine and drawArc methods of the Graphics class may be used, and there may be application cases for them, but I personally consider them mainly as a legacy feature that stems from the time of Java 1.0","label":{"api":{"drawLine":[[4,11]],"drawArc":[[17,23]],"Graphics":[[40,47]]}}},{"text":"Particularly, via the Shape interface (hence the name...)","label":{"api":{"Shape":[[22,26]]}}},{"text":"The advantage of the Shape interface is its increased flexibility","label":{"api":{"Shape":[[21,25]]}}},{"text":"For example, Line2D, or Arc2D, or - most importantly - Path2D","label":{"api":{"Line2D":[[13,18]],"Arc2D":[[24,28]],"Path2D":[[55,60]]}}},{"text":"It also supports cubic curve parts (splines - not Catmull-Rom, but Bezier), with the Path2D#curveTo method (and the somewhat simpler quadTo method)","label":{"api":{"Path2D#curveTo":[[85,98]],"quadTo":[[133,138]]}}},{"text":"The Path2D class also allows you to assemble multiple shapes, arbitrarily, with the Path2D#append method","label":{"api":{"Path2D":[[4,9]],"Path2D#append":[[84,96]]}}},{"text":"Considering your application case, there is also the possibility to create a stroked shape, using the Stroke#createStrokedShape method","label":{"api":{"Stroke#createStrokedShape":[[102,126]]}}},{"text":"When you have a Shape that represents a single, thin line, then you can use this method to create a Shape that represents a thick like","label":{"api":{"Shape":[[16,20],[100,104]]}}},{"text":"But maybe you (or someone else who is reading this answer) takes the chance of learning about the Shape class in Java2D..","label":{"api":{"Shape":[[98,102]],"Java2D":[[113,118]]}}},{"text":"For certain application cases, representing \"everything\" via Shape objects may have drawbacks - for example, when blindly creating many Line2D objects as drop-in replacements for drawLine calls, this may impose some overhead, impacting performance and memory (causing GCs)","label":{"api":{"Shape":[[61,65]],"Line2D":[[136,141]],"drawLine":[[179,186]]}}},{"text":"Get the base URI (which assuming is http://example.com/api) from UriInfo.getBaseUriBuilder(), then append the XxxResource path with builder.path(XxxResource.class)","label":{"api":{"URI":[[13,15]],"UriInfo.getBaseUriBuilder()":[[65,91]],"builder.path(XxxResource.class)":[[132,162]]}}},{"text":"Then from the built URI, return Response.seeOther(uri).build();","label":{"api":{"URI":[[20,22]],"Response.seeOther(uri).build()":[[32,61]]}}},{"text":"It is described in the Custom Components section of the FXML docs","label":{"api":{"FXML":[[56,59]]}}},{"text":"The trick is to call setResizeWeight(double) on the correct split pane with the appropriate value","label":{"api":{"setResizeWeight(double)":[[21,43]]}}},{"text":"I want to be able to parse them into an array of Colors","label":{"api":{"Colors":[[49,54]]}}},{"text":"How can I create an array of Colors to encode larger numbers than rgb supports and then decode it back","label":{"api":{"Colors":[[29,34]]}}},{"text":"You can maintain two TreeSet for storing age and income information separately, so you can easily query from those two trees the rank of age and income when sorting","label":{"api":{"TreeSet":[[21,27]]}}},{"text":"We can call tailSet(int) method from TreeSet to get the list of numbers greater than or equals a specific number, and in this case, it will be the rank of age/income","label":{"api":{"tailSet(int)":[[12,23]],"TreeSet":[[37,43]]}}},{"text":"Use Files.newInputStream() instead","label":{"api":{"Files.newInputStream()":[[4,25]]}}},{"text":"The given String is a JSON, use the JSONParser to parse it to json and then extract the data needed","label":{"api":{"String":[[10,15]],"JSONParser":[[36,45]]}}},{"text":"You have to use SimpleDateFormat","label":{"api":{"SimpleDateFormat":[[16,31]]}}},{"text":"An alternative would be to use a ScheduledExecutorService as follows","label":{"api":{"ScheduledExecutorService":[[33,56]]}}},{"text":"Besides synchronized, you could use a java.util.concurrent.AtomicBoolean, if let's say you were really concerned about performance (which I doubt given the 5 seconds intervals)","label":{"api":{"java.util.concurrent.AtomicBoolean":[[38,71]]}}},{"text":"Use System.getenv() instead","label":{"api":{"System.getenv()":[[4,18]]}}},{"text":"I am running into problems on my (Linux) Jenkins server when using the Java Files API","label":{"api":{"Files":[[76,80]]}}},{"text":"Is this some quirk of Files on Linux, or a problem with my tmpFolder","label":{"api":{"Files":[[22,26]]}}},{"text":"I've read the documentation here http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html#typesize but I can either specify a value for all four side of padding, or a value for each one","label":{"api":{}}},{"text":"Luckily, there already is a method that does exactly that","label":{"api":{}}},{"text":"You can do it using the Matcher's appendReplacement method","label":{"api":{"Matcher":[[24,30]],"appendReplacement":[[34,50]]}}},{"text":"According to your use-case, you could use replaceAll here","label":{"api":{"replaceAll":[[42,51]]}}},{"text":"Use a custom ServletFilter to check the HttpServletRequest.getRequestURL() to see if it matches the appspot.com domain and return a 404 Not Found","label":{"api":{"ServletFilter":[[13,25]],"HttpServletRequest.getRequestURL()":[[40,73]]}}},{"text":"You may be looking for Date.setDate()","label":{"api":{"Date.setDate()":[[23,36]]}}},{"text":"The class CheckBoxTreeTableCell is from Java8 implementation","label":{"api":{"CheckBoxTreeTableCell":[[10,30]]}}},{"text":"Random access to a file is available in Java","label":{"api":{"Random":[[0,5]]}}},{"text":"The JavaDoc for IntStream.concat says that the resulting stream will be parallel if any of the input streams is parallel","label":{"api":{"IntStream.concat":[[16,31]]}}},{"text":"The flatMap flattens all of your sets into single stream","label":{"api":{"flatMap":[[4,10]]}}},{"text":"Your code seems to be correct, but you should ensure that the Planilha class correctly implements the equals method","label":{"api":{"Planilha":[[62,69]],"equals":[[102,107]]}}},{"text":"Write your own custom Comparator implementation","label":{"api":{"Comparator":[[22,31]]}}},{"text":"The read() method of InputStream (System.in is an InputStream) returns the byte value as an int, but the value is the Unicode code","label":{"api":{"read()":[[4,9]],"InputStream":[[21,31],[50,60]],"System.in":[[34,42]]}}},{"text":"Instead, wrap the InputStream in a Scanner and call nextInt()","label":{"api":{"InputStream":[[18,28]],"Scanner":[[35,41]],"nextInt()":[[52,60]]}}},{"text":"The ArrayList class calls the equals method to determine if the element is equal to the argument to contains, but you don't override equals","label":{"api":{"ArrayList":[[4,12]],"equals":[[133,138]]}}},{"text":"Additionally, the contract for equals means that it needs to be consistent with hashCode","label":{"api":{"equals":[[31,36]],"hashCode":[[80,87]]}}},{"text":"Now, you would need to create a date from year, month, day arguments passed in and format the date into the desired date string format using SimpleDateFormat","label":{"api":{"SimpleDateFormat":[[141,156]]}}},{"text":"Use a NavigableMap (TreeMap would be the standard implementation) that provides a lot of useful operations for such use-cases","label":{"api":{"NavigableMap":[[6,17]],"TreeMap":[[20,26]]}}},{"text":"If you want to install a custom filter you have to use a ServletContextListener write code to manually install the filter","label":{"api":{"ServletContextListener":[[57,78]]}}},{"text":"Though, if you are considered about a more complex UI and want to repeat them, you can create a separate FXML and include it as many time as you need using <fx:include>","label":{"api":{"FXML":[[105,108]],"<fx:include>":[[156,167]]}}},{"text":"You do this by overriding the  hashCode method","label":{"api":{"hashCode":[[31,38]]}}},{"text":"It does this with a BufferedImage and the images can range from 1x1 all the way to 8000x8000","label":{"api":{"BufferedImage":[[20,32]]}}},{"text":"I save my BufferedImage using the following code","label":{"api":{"BufferedImage":[[10,22]]}}},{"text":"How do I get the percentage a BufferedImage is saved","label":{"api":{"BufferedImage":[[30,42]]}}},{"text":"Replacing above method with Files.copy using COPY_ATTRIBUTES option solved the problem","label":{"api":{"Files.copy":[[28,37]],"COPY_ATTRIBUTES":[[45,59]]}}},{"text":"I tried using java's builtin SequenceInputStream but that did not work","label":{"api":{"SequenceInputStream":[[29,47]]}}},{"text":"One solution is to use the Throwable#initCause(Throwable) method","label":{"api":{"Throwable#initCause(Throwable)":[[27,56]]}}},{"text":"You can use the List#indexOf(obj) method to get the index of the \"identical\" object, and update it using List#set(index, object)","label":{"api":{"List#indexOf(obj)":[[16,32]],"List#set(index, object)":[[105,127]]}}},{"text":"You can use the PathTransition's setOnFinished method and add a new path in there and play the path transition again","label":{"api":{"PathTransition":[[16,29]],"setOnFinished":[[33,45]]}}},{"text":"You need to use map() to transform the data as it comes past","label":{"api":{"map()":[[16,20]]}}},{"text":"As noted in its javadoc","label":{"api":{}}},{"text":"Alternatively you can use a ProcessBuilder to start the ping utility itself and examine its output and/or error code","label":{"api":{"ProcessBuilder":[[28,41]]}}},{"text":"Comparator.compare takes two objects as input arguments and compares them, not doing anything with or to this","label":{"api":{"Comparator.compare":[[0,17]]}}},{"text":"Comparator.equals takes one other object as an input argument and compares it to this","label":{"api":{"Comparator.equals":[[0,16]]}}},{"text":"Assuming yhis question is just about synchronizing your threads, and not creating/running threads, then I recommend a CountDownLatch","label":{"api":{"CountDownLatch":[[118,131]]}}},{"text":"Lets take a look at the Oracle Documentation for the class Object","label":{"api":{"Object":[[59,64]]}}},{"text":"Use the Calendar class, specifically the set(int year, int month, int date) for your purpose","label":{"api":{"Calendar":[[8,15]],"set(int year, int month, int date)":[[41,74]]}}},{"text":"For example, TreeSet is inherited from SortedSet interface","label":{"api":{"TreeSet":[[13,19]],"SortedSet":[[39,47]]}}},{"text":"A Set with natural ordering is a SortedSet (which extends Set so it is-a Set), and a concrete implementation of that interface is TreeSet (which implements SortedSet so it is-a Set)","label":{"api":{"Set":[[2,4],[58,60],[73,75],[177,179]],"SortedSet":[[33,41],[156,164]],"TreeSet":[[130,136]]}}},{"text":"I would try using a SpringLayout","label":{"api":{"SpringLayout":[[20,31]]}}},{"text":"SpringLayout is tricky to use, in that you have to make sure to link the far edges of the layout container to child components explicitly, because SpringLayout won't grow to accommodate all the child components automatically","label":{"api":{"SpringLayout":[[0,11],[147,158]]}}},{"text":"To not have a boarder drawn for a JButton (assuming that you are using javax.swing.JButton) you can simply do","label":{"api":{"JButton":[[34,40]],"javax.swing.JButton":[[71,89]]}}},{"text":"Check the API documentation http://docs.oracle.com/javase/7/docs/api/ for TreeSet class","label":{"api":{"TreeSet":[[74,80]]}}},{"text":"This is specified in the package specification","label":{"api":{}}},{"text":"According to the section on unicode blocks and categories in the Pattern Javadoc, \\p{L} should match any unicode letter","label":{"api":{"Pattern":[[65,71]]}}},{"text":"Java 8 has a LocalDate class for that","label":{"api":{"LocalDate":[[13,21]]}}},{"text":"You can use ByteArrayOutputStream for this","label":{"api":{"ByteArrayOutputStream":[[12,32]]}}},{"text":"Keep in mind that SimpleDateFormat is not thread safe, so do not reuse the instance from several Threads","label":{"api":{"SimpleDateFormat":[[18,33]]}}},{"text":"Howeverâ¦ there's a reason the Collections.sort method takes a List and not a Collection","label":{"api":{"Collections.sort":[[30,45]],"List":[[62,65]],"Collection":[[77,86]]}}},{"text":"Use a gzip input stream http://docs.oracle.com/javase/7/docs/api/java/util/zip/GZIPInputStream.html","label":{"api":{"gzip input stream":[[6,22]]}}},{"text":"I think what you're looking for is BufferedImage.getRGB(int x, int y)","label":{"api":{"BufferedImage.getRGB(int x, int y)":[[35,68]]}}},{"text":"You can also get many pixels at once with BufferedImage.getRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize)","label":{"api":{"BufferedImage.getRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize)":[[42,141]]}}},{"text":"You can also use the Long class to return null, but throwing an exception should be better","label":{"api":{"Long":[[21,24]]}}},{"text":"does not match line terminators","label":{"api":{}}},{"text":"If this does not work for you, take a look at the JDialog class or tutorials","label":{"api":{"JDialog":[[50,56]]}}},{"text":"Use a loop and a charAt(position)","label":{"api":{"charAt(position)":[[17,32]]}}},{"text":"I would suggest you to use JAXB and XmlAdapter abstract class","label":{"api":{"JAXB":[[27,30]],"XmlAdapter":[[36,45]]}}},{"text":"Instead of using setLocation and setSize, try setBounds(...) or setPreferredSize(...)","label":{"api":{"setLocation":[[17,27]],"setSize":[[33,39]],"setBounds(...)":[[46,59]],"setPreferredSize(...)":[[64,84]]}}},{"text":"You're trying to cast your object to Class but I bet you intended to cast the object to the type that c represents","label":{"api":{"Class":[[37,41]]}}},{"text":"If so you should use Class.cast","label":{"api":{"Class.cast":[[21,30]]}}},{"text":"You can get the default system icon for a file by using FileSystemView","label":{"api":{"FileSystemView":[[56,69]]}}},{"text":"You can later use SwingFXUtils to convert it to FX Image and set it to an ImageView","label":{"api":{"SwingFXUtils":[[18,29]],"FX Image":[[48,55]],"ImageView":[[74,82]]}}},{"text":"Scanner.nextLine() throws the NoSuchElementException if it couldn't read a line from the provided InputStream","label":{"api":{"Scanner.nextLine()":[[0,17]],"NoSuchElementException":[[30,51]],"InputStream":[[98,108]]}}},{"text":"You're calling Scanner.close() in your Circle constructor, which will not only close the scanner, it will also close the used input stream","label":{"api":{"Scanner.close()":[[15,29]],"Circle":[[39,44]],"scanner":[[89,95]]}}},{"text":"To fix the problem, just remove every close call for every reader, like Scanner or BufferedReader, which uses System.in as its source stream","label":{"api":{"close":[[38,42]],"Scanner":[[72,78]],"BufferedReader":[[83,96]],"System.in":[[110,118]]}}},{"text":"Then you can create the Scanner once and use it everywhere where you want to request user input","label":{"api":{"Scanner":[[24,30]]}}},{"text":"A String is an Object in java","label":{"api":{"String":[[2,7]],"Object":[[15,20]]}}},{"text":"You would be better off using one of the Set interface implementations","label":{"api":{"Set":[[41,43]]}}},{"text":"Sets provide fast contains()/add()/remove() methods that you can use, without generally having to iterate over all elements manually in a loop","label":{"api":{"contains()":[[18,27]],"add()":[[29,33]],"remove()":[[35,42]]}}},{"text":"And if you do need to quickly iterate over all elements for some reason, then a LinkedHashSet would work just fine","label":{"api":{"LinkedHashSet":[[80,92]]}}},{"text":"Use JComboBox#setSelectedIndex(int anIndex)","label":{"api":{"JComboBox#setSelectedIndex(int anIndex)":[[4,42]]}}},{"text":"For selecting an item in the list, use JComboBox#setSelectedItem(Object anObject)","label":{"api":{"JComboBox#setSelectedItem(Object anObject)":[[39,80]]}}},{"text":"That Object is a superclass of every other class is mentioned in the API and in the Java Language Specification (JLS)","label":{"api":{"Object":[[5,10]]}}},{"text":"As a new Java programmer you should look in the API when you have questions about classes...that will tell you what you need to know, at least for your first few years programming in Java","label":{"api":{}}},{"text":"It provides a measure of compile-time safety by ensuring that the method annotated with @Override actually overrides or implements a method in a supertype or a public method in Object, as noted in the API","label":{"api":{"@Override":[[88,96]],"Object":[[177,182]]}}},{"text":"You can use Math.round()","label":{"api":{"Math.round()":[[12,23]]}}},{"text":"The multiplication and then division by 100 is necessary because Math.round() rounds to the nearest long value","label":{"api":{"Math.round()":[[65,76]]}}},{"text":"Implement Comparable and compare by your magicNumber","label":{"api":{"Comparable":[[10,19]],"magicNumber":[[41,51]]}}},{"text":"and use a TreeSet","label":{"api":{"TreeSet":[[10,16]]}}},{"text":"You should use Arrays.copyOf() or Object.clone() instead","label":{"api":{"Arrays.copyOf()":[[15,29]],"Object.clone()":[[34,47]]}}},{"text":"Here is the JavaDoc on Rectangle &  Shape.intersects()","label":{"api":{"Rectangle":[[23,31]],"Shape.intersects()":[[36,53]]}}},{"text":"Reduce intermediate results mod m, or use a java.math.BigInteger","label":{"api":{"java.math.BigInteger":[[44,63]]}}},{"text":"Also note that the java.util.Base64 class was added in java 1.8, so if you're on an older version it won't be available","label":{"api":{"java.util.Base64":[[19,34]]}}},{"text":"We are using Java 7 for the project, so we cannot use Streams as suggested, since this is a Java 8 feature","label":{"api":{"Streams":[[54,60]]}}},{"text":"You can use the List#retainAll(Collection<?> c) method, which","label":{"api":{"List#retainAll(Collection<?> c)":[[16,46]]}}},{"text":"check.indexOf(\"=\") + 3 will take the 02 and will be the endindex for the substring","label":{"api":{"check.indexOf(\"=\")":[[0,17]]}}},{"text":"Presently you are not specifying the endindex hence it is taking the indexbyte2=02 as well since substring does not know where to stop hence it parses down till the end","label":{"api":{"substring":[[97,105]]}}},{"text":"However there's an ordering concept in streams API","label":{"api":{"ordering":[[19,26]],"streams":[[39,45]]}}},{"text":"If you are already familiar with PriorityBlockingQueue, why don't you simply poll it to handle hardware requests","label":{"api":{"PriorityBlockingQueue":[[33,53]]}}},{"text":"Use a TreeMap","label":{"api":{"TreeMap":[[6,12]]}}},{"text":"The println(Object) overload of System.out will invoke toString on the passed in object","label":{"api":{"println(Object)":[[4,18]],"System.out":[[32,41]],"toStrin":[[55,61]]}}},{"text":"Use Long.toHexString if you want to convert the long back again","label":{"api":{"Long.toHexString":[[4,19]]}}},{"text":"Converting a long to a hex string using Double.toHexString will give you the proper representation of a double which is different from that of a long","label":{"api":{"Double.toHexString":[[40,57]]}}},{"text":"As per the JavaDoc page, the class \"provides static methods to dynamically create and access Java arrays\" - it is not an array itself, it is just a utility to create and access arrays","label":{"api":{}}},{"text":"If you want a relatively small amount of rounding, look at Stroke and BasicStroke, which allows you to round the corners of any polygon","label":{"api":{"Stroke":[[59,64]],"BasicStroke":[[70,80]]}}},{"text":"Here is a tutorial for Strokes","label":{"api":{"Stroke":[[23,28]]}}},{"text":"A third option is to you use a java ThreadPoolExecutor","label":{"api":{"ThreadPoolExecutor":[[36,53]]}}},{"text":"You have a WritableRaster which was created with a SampleModel that requires four samples per pixel","label":{"api":{"WritableRaster":[[11,24]],"SampleModel":[[51,61]]}}},{"text":"Without knowing more about your application (what exact SampleModel is the raster created with?), it is hard to say for sure what the fourth component means","label":{"api":{"SampleModel":[[56,66]]}}},{"text":"Maybe you actually want to add a ToDoubleFunction<E>, which allows you to map edges to double instead","label":{"api":{"ToDoubleFunction<E>":[[33,51]]}}},{"text":"a class that extends the javax.annotation.processing.AbstractProcessor class","label":{"api":{"javax.annotation.processing.AbstractProcessor":[[25,69]]}}},{"text":"You can call Class#isInstance(Object obj)","label":{"api":{"Class#isInstance(Object obj)":[[13,40]]}}},{"text":"Here are some relevant quotes from the java.util.stream package description","label":{"api":{"java.util.stream":[[39,54]]}}},{"text":"There is this wonderful resource with the JList JavaDoc","label":{"api":{"JList":[[42,46]]}}},{"text":"See Oracle Documentation","label":{"api":{}}},{"text":"This is easily done with an EmptyBorder","label":{"api":{"EmptyBorder":[[28,38]]}}},{"text":"Use Introspector to accomplish this task","label":{"api":{"Introspector":[[4,15]]}}},{"text":"The closest concept in Java is Future","label":{"api":{"Future":[[31,36]]}}},{"text":"Use compareTo instead","label":{"api":{"compareTo":[[4,12]]}}},{"text":"The invoke(Object, Object...)-method takes as it's first parameter the object that the method should be invoked on (as you did correctly) and then as a variable-length parameter any parameters that should be passed to the method call","label":{"api":{"invoke(Object, Object...)":[[4,28]]}}},{"text":"The documentation for the generic() method says that this method converts all types within the MethodType it is called on to Object","label":{"api":{"generic()":[[26,34]],"MethodType":[[95,104]],"Object":[[125,130]]}}},{"text":"As for the design of such applications, I'd recommend you have a look at AnimationTimer - https://docs.oracle.com/javase/8/javafx/api/javafx/animation/AnimationTimer.html or Timeline - https://docs.oracle.com/javase/8/javafx/api/javafx/animation/Timeline.html","label":{"api":{"AnimationTimer":[[73,86]],"Timeline":[[174,181]]}}},{"text":"Or even better, use something like StringJoiner or Collectors#joining that will do the work of the for for you and not append the extra \", \" in the end","label":{"api":{"StringJoiner":[[35,46]],"Collectors#joining":[[51,68]]}}},{"text":"Do note that Java8 has a new removeIf method","label":{"api":{"removeIf":[[29,36]]}}},{"text":"You can use Scanner to read your input file (whose location is denoted by \"filepath\") using the new line character as your delimiter and add the words directly to an ArrayList<String>","label":{"api":{"Scanner":[[12,18]],"ArrayList<String>":[[166,182]]}}},{"text":"Simplest way to do this would be to use a Set (namely, TreeSet) and encapsulate the player information (including the score) into a specific class","label":{"api":{"Set":[[42,44]],"TreeSet":[[55,61]]}}},{"text":"TreeSet assumes that entires stored in it implement the Comparable interface for determining the natural ordering of its elements","label":{"api":{"TreeSet":[[0,6]],"Comparable":[[56,65]]}}},{"text":"Use Collections.sort() and provide a custom Comparator to sort a map based on its values","label":{"api":{"Collections.sort()":[[4,21]],"Comparator":[[44,53]]}}},{"text":"From Socket's documentation","label":{"api":{"Socket":[[5,10]]}}},{"text":"Regarding the Map<K,V> interface","label":{"api":{"Map<K,V>":[[14,21]]}}},{"text":"If you want to produce \"unguessable\" random numbers, you can take SecureRandom.nextLong() and append it with System.nanoTime()","label":{"api":{"SecureRandom.nextLong()":[[66,88]],"System.nanoTime()":[[109,125]]}}},{"text":"I am trying to parse a document containing email addresses, but the StreamTokenizer splits the E-mail address into two separate parts","label":{"api":{"StreamTokenizer":[[68,82]]}}},{"text":"You can use Maps (not arrays) to get the .get(\"key\") behavior you describe","label":{"api":{"Map":[[12,14]],".get(\"key\")":[[41,51]]}}},{"text":"Have a look at the DateFormat or SimpleDateFormat class","label":{"api":{"DateFormat":[[19,28]],"SimpleDateFormat":[[33,48]]}}},{"text":"You can use ResultSet#getString(int columnIndex) to do this","label":{"api":{"ResultSet#getString(int columnIndex)":[[12,47]]}}},{"text":"C#/.Net iterators (IEnumerator<T> as returned by IEnumerable<T> ) are read-only forward only iterators and do not allow removing items from underlying collection compared to Java's iterator.remove","label":{"api":{"IEnumerator<T>":[[19,32]],"IEnumerable<T>":[[49,62]],"iterator.remove":[[181,195]]}}},{"text":"I chose to solve it using a regular expression match in a recursive function","label":{"api":{}}},{"text":"I used ZipInputStream for similar task","label":{"api":{"ZipInputStream":[[7,20]]}}},{"text":"if you wrap one ZipInputStream into another one, you can transparently access the archive inside the another archive without unpacking the top-level one","label":{"api":{"ZipInputStream":[[16,29]]}}},{"text":"There is a lot of bad things with this Code, but in short I get \"file:/tmp/\" as return from getCodeBase()","label":{"api":{"getCodeBase()":[[92,104]]}}},{"text":"I suggest you look for a way to get the accurate URL you need with getCodeBase() or some other method","label":{"api":{"getCodeBase()":[[67,79]]}}},{"text":"In some cases it would be enough to create a Proxy and an InvocationHandler","label":{"api":{"Proxy":[[45,49]],"InvocationHandler":[[58,74]]}}},{"text":"Sometimes it's reasonable to generate Java source, then invoke JavaCompiler in runtime and load the generated class using URLClassLoader (probably that's your case if you're speaking about strings of code)","label":{"api":{"JavaCompiler":[[63,74]],"URLClassLoader":[[122,135]]}}},{"text":"This is done using invokeLater() or (rarely)invokeAndWait()","label":{"api":{"invokeLater()":[[19,31]],"invokeAndWait()":[[44,58]]}}},{"text":"This is most probably a character set issue, caused by the fact that the platform you are running your java code uses by default a different set; it is always a good practice to specify the expected/needed character set to be used when parsing, and with the Scanner class is just a matter of calling the constructor as","label":{"api":{"Scanner":[[258,264]]}}},{"text":"where the second parameter is the character set literal, or even better","label":{"api":{}}},{"text":"Exceptions that inherit from java.lang.RuntimeException or java.lang.Error are so-called unchecked exceptions that can be caught by a try-catch construct, they don't have to be, though","label":{"api":{"java.lang.RuntimeException":[[29,54]],"java.lang.Error":[[59,73]]}}},{"text":"As you can see in the API docs of java.lang.Error, it does not inherit from java.lang.Exception","label":{"api":{"java.lang.Error":[[34,48]],"java.lang.Exception":[[76,94]]}}},{"text":"Why not just use the String.endsWith(String) method","label":{"api":{"String.endsWith(String)":[[21,43]]}}},{"text":"You may also wish to consider using a JPasswordField instead, for password input","label":{"api":{"JPasswordField":[[38,51]]}}},{"text":"So you should use getCatalogs instead (and everywhere you use it, you need to use the catalog parameter, not the schema parameter)","label":{"api":{"getCatalogs":[[18,28]]}}},{"text":"The getCatalogs returns the result of SHOW DATABASES","label":{"api":{"getCatalogs":[[4,14]]}}},{"text":"JAX-WS provides the MessageContext for that purpose","label":{"api":{"JAX-WS":[[0,5]],"MessageContext":[[20,33]]}}},{"text":"Or you can use Arrays.toString(int[] a) method","label":{"api":{"Arrays.toString(int[] a)":[[15,38]]}}},{"text":"You could use DatabaseMetaData.getPrimaryKeys() for each table in that loop","label":{"api":{"DatabaseMetaData.getPrimaryKeys()":[[14,46]]}}},{"text":"Consider using a java.util.BitSet instead","label":{"api":{"java.util.BitSet":[[17,32]]}}},{"text":"The option setLenient() of your SimpleDateFormat is what you are looking for","label":{"api":{"setLenient()":[[11,22]],"SimpleDateFormat":[[32,47]]}}},{"text":"You can use DateFormat.setLenient(boolean) to (from the Javadoc) with strict parsing, inputs must match this object's format","label":{"api":{"DateFormat.setLenient(boolean)":[[12,41]]}}},{"text":"You can use a library such as Apache Commons or Java 8 to do that","label":{"api":{"Apache Commons":[[30,43]]}}},{"text":"There are implementations which allow use within JavaSE (like SimpleNamingContextBuilder within tests) but in general, building an own InitialContextFactory is an advanced topic","label":{"api":{"SimpleNamingContextBuilder":[[62,87]],"InitialContextFactory":[[135,155]]}}},{"text":"The rollover state is managed by the ButtonModel","label":{"api":{"ButtonModel":[[37,47]]}}},{"text":"You might also wish to check if the Mouse is still located over the JButton after the dialog is closed to reset the rollover flag (if necessary) - you can do so via MouseInfo, checking if the JButton contains the point by converting the Screen coordinates retrieved from MouseInfo.getPointerInfo().getLocation() to component coordinates using SwingUtilities.convertPointFromScreen","label":{"api":{"JButton":[[68,74],[192,198]],"MouseInfo":[[165,173]],"Screen":[[237,242]],"MouseInfo.getPointerInfo().getLocation()":[[271,310]],"SwingUtilities.convertPointFromScreen":[[343,379]]}}},{"text":"For guidance on how to instantiate the ScheduledExecutorService Interface, have a look at the docs","label":{"api":{"ScheduledExecutorService":[[39,62]]}}},{"text":"As assylias  wrote in the comments - you will iterate it one way or another, that said, if you don't want to explicitly iterate it - you can use Arrays.toString","label":{"api":{"Arrays.toString":[[145,159]]}}},{"text":"StringBuilder.toString() returns the content of the StringBuilder","label":{"api":{"StringBuilder.toString()":[[0,23]],"StringBuilder":[[52,64]]}}},{"text":"I found that Random#nextFloat returns a value between 0.0 and 1.0","label":{"api":{"Random#nextFloat":[[13,28]]}}},{"text":"From the javadoc, Math.random() return a pseudo random  and (approximately) uniform distributed number within the range","label":{"api":{"Math.random()":[[18,30]]}}},{"text":"When using the signature println(Object) the toString() method is being used to output the string representation of that object","label":{"api":{"println(Object)":[[25,39]],"toString()":[[45,54]]}}},{"text":"When toString() is called on an object you've defined it will cascade up the hierarchy of superclasses until reaching java.lang.Object given that there is no overridden toString() method in any intermediate superclasses or the initial class","label":{"api":{"toString()":[[5,14],[169,178]],"java.lang.Object":[[118,133]]}}},{"text":"Upon reaching java.lang.Object the system will call the base toString() method which prints the String literal representation of that Object and is the reason why you will see some memory address in the output","label":{"api":{"java.lang.Object":[[14,29]],"toString()":[[61,70]]}}},{"text":"An easy way to achieve this is to use a single Document for both text fields","label":{"api":{"Document":[[47,54]]}}},{"text":"The Document is the model that stores the data (in this case, plain text)","label":{"api":{"Document":[[4,11]]}}},{"text":"Let's say I have a custom TimerTask doing stuff","label":{"api":{"TimerTask":[[26,34]]}}},{"text":"And I schedule it for a continuous repeating cycle via a Timer to execute every 10 seconds","label":{"api":{"Timer":[[57,61]]}}},{"text":"Under normal conditions this works just fine, but since I perform some GUI update operations in this task I have to call the Runnable from the JavaFX application thread","label":{"api":{"Runnable":[[125,132]]}}},{"text":"In essence this means that I have to call the Platform.runLater on the Runnable (MyTimerTask) when I want to run it","label":{"api":{"Platform.runLater":[[46,62]],"Runnable":[[71,78]],"MyTimerTask":[[81,91]]}}},{"text":"But since I don't explicitly call the run() on the task since I put it on the TaskQueue via Timer.schedule, I have to resort to changing MyTimerTask to something like this","label":{"api":{"run()":[[38,42]],"TaskQueue":[[78,86]],"Timer.schedule":[[92,105]],"MyTimerTask":[[137,147]]}}},{"text":"Take a look at the class Timeline","label":{"api":{"Timeline":[[25,32]]}}},{"text":"You can iterate on the ids, retrieve the corresponding TimeZone and check useDaylightTime() on it","label":{"api":{"TimeZone":[[55,62]],"useDaylightTime()":[[74,90]]}}},{"text":"depending on your use case, you may also want to check observesDaylightTime() which is a little bit different from useDaylightTime()","label":{"api":{"observesDaylightTime()":[[55,76]],"useDaylightTime()":[[115,131]]}}},{"text":"The stream documentation (Non-Intereference section) states","label":{"api":{"stream":[[4,9]]}}},{"text":"You could use a concurrent source but it would make more sense to move away from modifying the source of the stream, for example by using Collection#removeIf","label":{"api":{"Collection#removeIf":[[138,156]]}}},{"text":"Then you can create the array using the Array.newInstance method","label":{"api":{"Array.newInstance":[[40,56]]}}},{"text":"In GZIPOutputStream's case, creating a NonClosingGZIPOutputStream class with a modified close() method that calls finish() could do the trick","label":{"api":{"GZIPOutputStream":[[3,18]],"NonClosingGZIPOutputStream":[[39,64]],"close()":[[88,94]],"finish()":[[114,121]]}}},{"text":"Try to offload your heavy processing to SwingWorker","label":{"api":{"SwingWorker":[[40,50]]}}},{"text":"If you can use Java 8, Collectors.toMap could be an option, but in my option nothing can't beat your \"plain old 3 lines of easy to read code\" solution, so please stick to it","label":{"api":{"Collectors.toMap":[[23,38]]}}},{"text":"The File#mkdirs() call is neccessary, since if the directories do not exist, the call to your system-dependent java executable will cause a error","label":{"api":{"File#mkdirs()":[[4,16]]}}},{"text":"I'm using a Spinner component in my JavaFX application","label":{"api":{"Spinner":[[12,18]]}}},{"text":"According to the documentation of Spinner","label":{"api":{"Spinner":[[34,40]]}}},{"text":"This did not work however because you can not cast a java.util date into a sql time That's strange because java.sql.Time extends java.util.Date","label":{"api":{"java.util date":[[53,66]],"java.sql.Time":[[107,119]],"java.util.Date":[[129,142]]}}},{"text":"Instead, create an instance of java.sql.Time and pass as parameter the time in millis","label":{"api":{"java.sql.Time":[[31,43]]}}},{"text":"It's in the JDK, since you were able to look at its documentation in the JDK javadoc","label":{"api":{}}},{"text":"I'd start at BufferedImage and ImageIO (links to Java SE 8 Docs)","label":{"api":{"BufferedImage":[[13,25]],"ImageIO":[[31,37]]}}},{"text":"A BufferedImage is exactly what it sounds to be like - an image buffer of RGB information","label":{"api":{"BufferedImage":[[2,14]]}}},{"text":"You can use ImageIO to deal with various file formats - no need to write code for PNG, BMP, JPG, or any other formats","label":{"api":{"ImageIO":[[12,18]]}}},{"text":"ImageIO.read loads an image from an image file, and ImageIO.write formats a BufferedImage object to whatever file format you want","label":{"api":{"ImageIO.read":[[0,11]],"ImageIO.write":[[52,64]],"BufferedImage":[[76,88]]}}},{"text":"The ExecutorService.awaitTermination(long, TimeUnit) method receives the amount of time to wait until timeout","label":{"api":{"ExecutorService.awaitTermination(long, TimeUnit)":[[4,51]]}}},{"text":"There are several ways to solve this, but I'd just simplify things and use startsWith","label":{"api":{"startsWith":[[75,84]]}}},{"text":"Pixel blit is relatively fast operation, unlike stuff you do with shapes, and you can easily make it faster by using VolatileImage instead of buffered image for collecting all actions in history","label":{"api":{"VolatileImage":[[117,129]]}}},{"text":"Since you need to manipulate the matched text before replacement, you need to use the low-level API in Matcher class to perform matching and replacement manually","label":{"api":{"Matcher":[[103,109]]}}},{"text":"The number that you're trying to parse is bigger than 2^31-1 (max integer), use Long instead","label":{"api":{"Long":[[80,83]]}}},{"text":"Luckily, you can execute processes with redirection using ProcessBuilder","label":{"api":{"ProcessBuilder":[[58,71]]}}},{"text":"Instead you can use the File(String, String) constructor which creates a new File instance from a parent pathname string and a child pathname string","label":{"api":{"File(String, String)":[[24,43]],"File":[[77,80]]}}},{"text":"Have you tried using UUID (Universally Unique Identifier) in JAVA","label":{"api":{"UUID":[[21,24]]}}},{"text":"If you don't want threads to block each other, you could have a single thread dedicated to the writing, using a BlockingQueue - threads add write jobs (in whatever form they need to - probably just as strings) to the queue, and the single thread takes the values off the queue and writes them to the file","label":{"api":{"BlockingQueue":[[112,124]]}}},{"text":"Alright, let's elaborate with some simplified explanation about the Scanner class","label":{"api":{"Scanner":[[68,74]]}}},{"text":"It is a standard Oracle class which you can use by calling the import java.util.Scanner","label":{"api":{"java.util.Scanner":[[70,86]]}}},{"text":"Now when you call Scanner input = new Scanner(System.in); you make a new object of the Scanner class (so you make a new \"Scanner\") and you store it in the variable input","label":{"api":{"Scanner":[[87,93],[121,127]]}}},{"text":"At the same time you are calling the (so called) constructor of the class, with the parameter System.in","label":{"api":{"System.in":[[94,102]]}}},{"text":"Now when you are calling input.nextInt(); you execute the method from the object you just created (also documented)","label":{"api":{"input.nextInt()":[[25,39]]}}},{"text":"See http://docs.oracle.com/javase/7/docs/api/java/util/logging/LogManager.html on how to do this with java.util.logging","label":{"api":{"java.util.logging":[[102,118]]}}},{"text":"If I understood the question correctly,  Types.directSupertypes() is the method you need","label":{"api":{"Types.directSupertypes()":[[41,64]]}}},{"text":"Regardless of whether they represent a superclass or a superinterface, you should be able to cast them to DeclaredType, which has an asElement() method, that can be used to query things as simple and fully qualified name","label":{"api":{"DeclaredType":[[106,117]],"asElement()":[[133,143]]}}},{"text":"The above works if typeElement is a TypeMirror, if it is a TypeElement, you can get the superclass and the superinterfaces directly by simply calling typeElement.getSuperclass() and typeElement.getInterfaces() separately ( instead of Types.directSupertypes()) but the rest of the process is the same","label":{"api":{"TypeMirror":[[36,45]],"TypeElement":[[59,69]],"typeElement.getSuperclass()":[[150,176]],"typeElement.getInterfaces()":[[182,208]],"Types.directSupertypes()":[[234,257]]}}},{"text":"What you propose is roughly implemented by the ArrayList class","label":{"api":{"ArrayList":[[47,55]]}}},{"text":"You could sort the incoming array (using Array.sort() - this will sort the array in-place), and then compare the largest (first) entry vs","label":{"api":{"Array.sort()":[[41,52]]}}},{"text":"The JOptionPane has the functionality to have a combobox built in","label":{"api":{"JOptionPane":[[4,14]]}}},{"text":"Backslashes, escapes, and quoting","label":{"api":{}}},{"text":"Use scale(x, y) which multiplies the x and y coordinates","label":{"api":{"scale(x, y)":[[4,14]]}}},{"text":"You can use String#substring to remove the square brackets, String#split to split the String into an array, String#trim to remove the whitespace, and Integer#parseInt to convert the Strings into int values","label":{"api":{"String#substring":[[12,27]],"String#split":[[60,71]],"String":[[86,91],[182,187]],"String#trim":[[108,118]],"Integer#parseInt":[[150,165]]}}},{"text":"For summing it, you can use the IntStream#sum method instead of converting it to an array at the end","label":{"api":{"IntStream#sum":[[32,44]]}}},{"text":"Luckily, Java provides a utility in the form of java.util.Arrays.deepToString(Ojbect[]) to generate a more readable string output","label":{"api":{"java.util.Arrays.deepToString(Ojbect[])":[[48,86]]}}},{"text":"Always use ProcessBuilder, which has much more reliable and predictable behavior","label":{"api":{"ProcessBuilder":[[11,24]]}}},{"text":"From the documentation of String#split(String regex, int limit)","label":{"api":{"String#split(String regex, int limit)":[[26,62]]}}},{"text":"Note that you can iterate over the intermediate map more concisely by using Map#forEach","label":{"api":{"Map#forEach":[[76,86]]}}},{"text":"A ClassLoader typically creates this Class instance when calling ClassLoader#loadClass(String className)","label":{"api":{"ClassLoader":[[2,12]],"ClassLoader#loadClass(String className)":[[65,103]]}}},{"text":"Signature of method Object#equals to override must look like this","label":{"api":{"Object#equals":[[20,32]]}}},{"text":"You could use Double and convert it using doubleToRawLongBits and then use any bitwise operator you want","label":{"api":{"Double":[[14,19]],"doubleToRawLongBits":[[42,60]]}}},{"text":"You can use httpserver inside your Java application to share information","label":{"api":{}}},{"text":"Why not return a Number from your method","label":{"api":{"Number":[[17,22]]}}},{"text":"Both Integer and Double are subclasses of Number","label":{"api":{"Integer":[[5,11]],"Double":[[17,22]],"Number":[[42,47]]}}},{"text":"You can create a mark() at the beginning of the file, so before any calls to read() have been done","label":{"api":{"mark()":[[17,22]],"read()":[[77,82]]}}},{"text":"Then, when you want to do random access, you stop reading from the stream, go to the marker position by calling reset() and then use skip() to go to the location you desire","label":{"api":{"reset()":[[112,118]],"skip()":[[133,138]]}}},{"text":"You can find if the AudioInputStream supports it by calling markSupported()","label":{"api":{"AudioInputStream":[[20,35]],"markSupported()":[[60,74]]}}},{"text":"Set the flag allowCoreThreadTimeout to true before submitting any tasks","label":{"api":{"allowCoreThreadTimeout":[[13,34]]}}},{"text":"See Finalization in the ThreadPoolExecutor API documentation","label":{"api":{"ThreadPoolExecutor":[[24,41]]}}},{"text":"For example, how do I implement a Java 8 Collector that gathers stream results into an ImmutableMultimap","label":{"api":{"Collector":[[41,49]],"ImmutableMultimap":[[87,103]]}}},{"text":"I'd like to be able to provide key/value mappers, similar to how Collectors.toMap() works","label":{"api":{"Collectors.toMap()":[[65,82]]}}},{"text":"As mentioned by @Arjit use CopyOnWriteArrayList instead of ArrayList","label":{"api":{"CopyOnWriteArrayList":[[27,46]],"ArrayList":[[59,67]]}}},{"text":"The documentation is here but a typical code would be","label":{"api":{}}},{"text":"Nevertheless, you can achieve this simply using Calendar and SimpleDateFormat, like this","label":{"api":{"Calendar":[[48,55]],"SimpleDateFormat":[[61,76]]}}},{"text":"String.split(String regex, int limit) is a version of String.split() that will not look beyond limit tokens","label":{"api":{"String.split(String regex, int limit)":[[0,36]],"String.split()":[[54,67]]}}},{"text":"Generally, for this kind of String manipulation, using a StringBuilder is recommended","label":{"api":{"String":[[28,33]],"StringBuilder":[[57,69]]}}},{"text":"A more optimized solution would be to make use of StringBuilder instead","label":{"api":{"StringBuilder":[[50,62]]}}},{"text":"This will throw a ClassCastException because of the type inference; the inferred type will be MyFakeDomain, resulting in an attempt to cast FirstBarDomain to MyFakeDomain, which is an illegal cast - hence the unsafe warning","label":{"api":{"ClassCastException":[[18,35]],"MyFakeDomain":[[94,105],[158,169]],"FirstBarDomain":[[140,153]]}}},{"text":"The Base64 class I used is from Java 8","label":{"api":{"Base64":[[4,9]]}}},{"text":"If you're not using Java 8, there are libraries that have Base64 support","label":{"api":{"Base64":[[58,63]]}}},{"text":"Prior to Java 8, there's a com.sun internal Base64 class, but it's advised not to use those","label":{"api":{"com.sun":[[27,33]],"Base64":[[44,49]]}}},{"text":"Use a Comparator","label":{"api":{"Comparator":[[6,15]]}}},{"text":"Alternatively, have Student implement the Comparable interface","label":{"api":{"Student":[[20,26]],"Comparable":[[42,51]]}}},{"text":"Then you can just sort without the Comparator","label":{"api":{"Comparator":[[35,44]]}}},{"text":"replaceAll returns the resulting string","label":{"api":{"replaceAll":[[0,9]]}}},{"text":"You can map the shown indexes of a sorted jTable with their relevants ones in the dataModel using convertRowIndexToModel(index) method which takes in input the row index in the view and returns the index of the corresponding row in the model","label":{"api":{"jTable":[[42,47]],"dataModel":[[82,90]],"convertRowIndexToModel(index) method":[[98,133]]}}},{"text":"To get notified when the reference is cleared (so you can remove it from the map) you can use a ReferenceQueue","label":{"api":{"ReferenceQueue":[[96,109]]}}},{"text":"reading the java.lang.ref package description would have provided the same high level overview","label":{"api":{"java.lang.ref":[[12,24]]}}},{"text":"I'm facing a strange behaviour about StampedLock","label":{"api":{"StampedLock":[[37,47]]}}},{"text":"I do think the Javadoc of unlock() is misleading though","label":{"api":{"unlock()":[[26,33]]}}},{"text":"Additionally, StampedLock.validate(long) states","label":{"api":{"StampedLock.validate(long)":[[14,39]]}}},{"text":"BigInteger has a constructor taking a byte array as argument","label":{"api":{"BigInteger":[[0,9]]}}},{"text":"For the reverse operation, use BigInteger.toByteArray(), and then new String(bytes, StandardCharsets.UTF_8)","label":{"api":{"BigInteger.toByteArray()":[[31,54]],"String(bytes, StandardCharsets.UTF_8)":[[70,106]]}}},{"text":"...or use HashMap's copy constructor","label":{"api":{"HashMap":[[10,16]]}}},{"text":"So it looks like Akka Futures do exactly the same thing as Java 7 Futures","label":{"api":{"Futures":[[22,28],[66,72]]}}},{"text":"Use a Comparator when sorting the collection","label":{"api":{"Comparator":[[6,15]]}}},{"text":"If you are not using Java 8 you must use the (old-fashioned) new Comparator instead of the lambda expression","label":{"api":{"Comparator":[[65,74]]}}},{"text":"Use .toEpochSecond() to get the # of seconds from the reference date (which is in UTC), multiply by 1000 and pass this to the Timestamp constructor (as it expects milliseconds)","label":{"api":{".toEpochSecond()":[[4,19]]}}},{"text":"BigDecimal allows one to set very precise rules with which the calculations are done by setting the number of digits after the division point, rounding mode and by accepting a MathContext as an argument","label":{"api":{"BigDecimal":[[0,9]],"MathContext":[[176,186]]}}},{"text":"You should yse this method - label.setLabelFor(target)","label":{"api":{"label.setLabelFor(target)":[[29,53]]}}},{"text":"I am hoping that someone could provide a bit more insight into GridBagLayout","label":{"api":{"GridBagLayout":[[63,75]]}}},{"text":"I will be very grateful if someone could write something like a 'documentation' based on his personal experience with using GridBagLayout.","label":{"api":{"GridBagLayout":[[124,136]]}}},{"text":"The readUTF() method expects the data to be formatted in a specific way ( more details here ), the data send by what looks like a C# program is not formatted in a way that can be interpreted correctly by the readUTF() method","label":{"api":{"readUTF()":[[4,12],[208,216]]}}},{"text":"In order to keep track of the position of the matched pattern in a specific line, you can use the start() or the end() method of the Matcher class to get the corresponding indices","label":{"api":{"start()":[[98,104]],"end()":[[113,117]],"Matcher":[[133,139]]}}},{"text":"You should annotate toString() with @Override, though legally there is no such requirement","label":{"api":{"toString()":[[20,29]],"@Override":[[36,44]]}}},{"text":"The annotation @Override prevents the programmer from incorrectly overriding a superclass method; compile-time error occurs in case the override is incorrect","label":{"api":{"@Override":[[15,23]]}}},{"text":"That's because you do not use the append option of the FileOutputStream constructor","label":{"api":{"FileOutputStream":[[55,70]]}}},{"text":"What you want to do is to set it to the end of the file using the alternative constructor of FileOutputStream that has a boolean attribute","label":{"api":{"FileOutputStream":[[93,108]]}}},{"text":"Interface List has a method add(int index, E element)","label":{"api":{"List":[[10,13]],"add(int index, E element)":[[28,52]]}}},{"text":"First find the index of item X in the list, for example using the indexOf(Object o) method, then use this method to insert an item before or after X","label":{"api":{"indexOf(Object o)":[[66,82]]}}},{"text":"inserting elements at arbitrary positions is more efficient in a LinkedList than in an ArrayList","label":{"api":{"LinkedList":[[65,74]],"ArrayList":[[87,95]]}}},{"text":"When using Proguard, the message \"Got connection!\" is never printed hence getConnection() is stuck","label":{"api":{"Proguard":[[11,18]],"getConnection()":[[74,88]]}}},{"text":"It does not fit to int.MIN_VALUE","label":{"api":{"int.MIN_VALUE":[[19,31]]}}},{"text":"I think you want to use ServerSocket","label":{"api":{"ServerSocket":[[24,35]]}}},{"text":"Executors service and Future to make sure your not reinventing a wheel","label":{"api":{"Executors service":[[0,16]],"Future":[[22,27]]}}},{"text":"keySet will almost certainly use Collections.newSetFromMap(this) as that is a very efficient method - so O(1) then","label":{"api":{"keySet":[[0,5]],"Collections.newSetFromMap(this)":[[33,63]]}}},{"text":"Like @MattPutnam said, use toCharArray to get the individual characters of an array","label":{"api":{"toCharArray":[[27,37]]}}},{"text":"Your try/catch is too far from the thrown exception, because at the point you create a lambda expression, you've created a Consumer there, and Consumer's accept method isn't declared to throw any checked exceptions","label":{"api":{"Consumer":[[123,130],[143,150]],"accept":[[154,159]]}}},{"text":"As stated in the Comparator interface documentation, the compare(T o1, To2) method must return","label":{"api":{"Comparator":[[17,26]],"compare(T o1, To2)":[[57,74]]}}},{"text":"You can use String's indexOf(String str) method to find where the http://etc is","label":{"api":{"String":[[12,17]],"indexOf(String str)":[[21,39]]}}},{"text":"You can then use indexOf(String str, int fromIndex) method to find where the first space after the URL is","label":{"api":{"indexOf(String str, int fromIndex)":[[17,50]]}}},{"text":"Lastly, use substring(int beginIndex, int endIndex) with those two values","label":{"api":{"substring(int beginIndex, int endIndex)":[[12,50]]}}},{"text":"With the release of Java 7 came the MethodHandle, which allows a user to invoke a method as if using its underlying bytecode","label":{"api":{"MethodHandle":[[36,47]]}}},{"text":"In particular, the MethodHandles.Lookup class provides factory methods to create method handles to access class members","label":{"api":{"MethodHandles.Lookup":[[19,38]]}}},{"text":"So, is there any reason to still use reflection functionalities like Field#get(..)/Method.invoke(..) or are these methods effectively obsolete with the introduction of the faster method handles","label":{"api":{"Field#get(..)":[[69,81]],"Method.invoke(..)":[[83,99]]}}},{"text":"Another approach (use java.lang.ThreadLocal)","label":{"api":{"java.lang.ThreadLocal":[[22,42]]}}},{"text":"If you want to pass some information/object to other pieces of code without passing it in method parameters then ThreadLocal is your friend","label":{"api":{"ThreadLocal":[[113,123]]}}},{"text":"ThreadLocal has thread scope, so now you can understand that anything you will put in ThreadLocal will be valid until that thread is alive","label":{"api":{"ThreadLocal":[[0,10],[86,96]]}}},{"text":"Read this nice tutorial on how to use ThreadLocal","label":{"api":{"ThreadLocal":[[38,48]]}}},{"text":"1) Collections.emptyList() solves the problem of creating a new object every time (not that you should worry about such micro-optimizations)","label":{"api":{"Collections.emptyList()":[[3,25]]}}},{"text":"No need for a stream here, you can use the new Collection#removeIf method","label":{"api":{"Collection#removeIf":[[47,65]]}}},{"text":"In that case synchronizedSortedSet may be directly used instead of the listener","label":{"api":{"synchronizedSortedSet":[[13,33]]}}},{"text":"Here's an alternative (and much shorter) way to get it to work using Pattern and Matcher,or more commonly known as regex","label":{"api":{"Pattern":[[69,75]],"Matcher":[[81,87]]}}},{"text":"due to shortcomings in the standard APIs - since most available intermediate ops are not allowed to be stateful.See this SO answer for an example","label":{"api":{}}},{"text":"If you're wanting to make your own Stream because you want custom close() logic, the simplest solution is to create a Stream from an Iterator, and call onClose(Runnable)","label":{"api":{"Stream":[[35,40],[118,123]],"close()":[[66,72]],"Iterator":[[133,140]],"onClose(Runnable)":[[152,168]]}}},{"text":"Instead of using a lookup, which will only work after the scene has been rendered, you can put the logic you need in your controller class","label":{"api":{"controller":[[122,131]]}}},{"text":"You can inject elements from the FXML file into the controller class by annotating them @FXML","label":{"api":{"controller":[[52,61]],"@FXML":[[88,92]]}}},{"text":"You can use Optional.orElse, it's much simpler than checking isPresent","label":{"api":{"Optional.orElse":[[12,26]],"isPresent":[[61,69]]}}},{"text":"You can achieve this using @JoinTable annotation","label":{"api":{"@JoinTable":[[27,36]]}}},{"text":"The java.awt.Graphics class you're using is just an abstract class","label":{"api":{"java.awt.Graphics":[[4,20]]}}},{"text":"Since you're using an Applet, which inherits the Component, try Component.getGraphics() to get a graphics object","label":{"api":{"Applet":[[22,27]],"Component":[[49,57]],"Component.getGraphics()":[[64,86]]}}},{"text":"@GeneratedValue works with identifiers and you can't use it with regular fields","label":{"api":{"@GeneratedValue":[[0,14]]}}},{"text":"For using the strategy GenerationType.SEQUENCE the sequence should be created in the database","label":{"api":{"GenerationType.SEQUENCE":[[23,45]]}}},{"text":"I have been studying the internals of the Hashmap implementation","label":{"api":{"Hashmap":[[42,48]]}}},{"text":"In Java8 Oracle introduced a new Class LongAdder which seems to perform better than AtomicInteger under high contention","label":{"api":{"LongAdder":[[39,47]],"AtomicInteger":[[84,96]]}}},{"text":"Some blog posts claim that LongAdder perform better by maintaining internal cells - does that mean LongAdder aggregates the values internally and update it later","label":{"api":{"LongAdder":[[27,35],[99,107]]}}},{"text":"Could you please help me to understand how LongAdder works","label":{"api":{"LongAdder":[[43,51]]}}},{"text":"The PropertyResourceBundle relies on the Properties class, whose load method always assumes the file to be encoded is iso-latin-1Â¹","label":{"api":{"PropertyResourceBundle":[[4,25]],"Properties":[[41,50]],"load":[[65,68]]}}},{"text":"The input stream is in a simple line-oriented format as specified in load(Reader) and is assumed to use the ISO 8859-1 character encoding; that is each byte is one Latin1 character","label":{"api":{"input stream":[[4,15]],"load(Reader)":[[69,80]]}}},{"text":"So converting your copied characters to Unicode escape sequences in the right thing to ensure that they will be loaded properly","label":{"api":{"loaded":[[112,117]]}}},{"text":"As the documentation of the PropertyResourceBundle(InputStream) constructor states","label":{"api":{"PropertyResourceBundle(InputStream)":[[28,62]]}}},{"text":"This applies to PropertyResourceBundle which handles this probing, not for the Properties class, which still only uses iso-latin-1 in its load(InputStream) method","label":{"api":{"PropertyResourceBundle":[[16,37]],"Properties":[[79,88]],"load(InputStream)":[[138,154]]}}},{"text":"In your implementation of paintComponent(), invoke setClip() with a suitable Shape, such as Polygon","label":{"api":{"paintComponent()":[[26,41]],"setClip()":[[51,59]],"Shape":[[77,81]],"Polygon":[[92,98]]}}},{"text":"You can size and translate the Polygon to match the destination hexagon using the createTransformedShape() method of AffineTransform","label":{"api":{"Polygon":[[31,37]],"createTransformedShape()":[[82,105]],"AffineTransform":[[117,131]]}}},{"text":"Use the coordinates of the polygon's boundary as the basis for the coordinates used in your call to drawImage()","label":{"api":{"drawImage()":[[100,110]]}}},{"text":"A related example using Ellipse2D is shown here","label":{"api":{"Ellipse2D":[[24,32]]}}},{"text":"If you want to print a int as binary, use Integer.toBinaryString to get the string representation of a int in binary","label":{"api":{"Integer.toBinaryString":[[42,63]]}}},{"text":"Have a look at Direct Known Subclasses for Exception","label":{"api":{"Exception":[[43,51]]}}},{"text":"All these exceptions (except RuntimeException) are examples checked exceptions","label":{"api":{"RuntimeException":[[29,44]]}}},{"text":"The checked exception IOException has these subclasses","label":{"api":{"IOException":[[22,32]]}}},{"text":"character to get [\"18\", \"40\"], and then using parseInt on both parts","label":{"api":{"parseInt":[[46,53]]}}},{"text":"You can represent a reflection as a Scale with x=1 and y=-1","label":{"api":{"Scale":[[36,40]]}}},{"text":"Or just use Arrays.toString(int[])","label":{"api":{"Arrays.toString(int[])":[[12,33]]}}},{"text":"This is explained in short in the documentation of the dispose() method itself","label":{"api":{"dispose()":[[55,63]]}}},{"text":"Note that the documentation for BufferStrategy.getDrawGraphics() tells you that each time it is called, it creates a graphic context","label":{"api":{"BufferStrategy.getDrawGraphics()":[[32,63]]}}},{"text":"In your case you could use a Semaphore that is shared between ThreadOne and ThreadTwo to pause and resume ThreadTwo - initialize the semaphore with one permit, on each iteration ThreadTwo calls availablePermits() and if there is an available permit (return value > 0) then it proceeds, else it calls acquire() causing the thread to block until a permit is available","label":{"api":{"Semaphore":[[29,37]],"ThreadTwo":[[106,114]],"availablePermits()":[[194,211]],"acquire()":[[300,308]]}}},{"text":"As noted by Pshemo in the comments, it is good practice to implement Runnable instead of extending Thread - this avoids cluttering up your classes and also lets you pool threads using an ExecutorService","label":{"api":{"Runnable":[[69,76]],"Thread":[[99,104]],"ExecutorService":[[187,201]]}}},{"text":"String#replace uses string literals, not regexes, so you shouldn't escape any special characters like [ or ]","label":{"api":{"String#replace":[[0,13]]}}},{"text":"Try Channels.newChannel(InputStream in) and use ReadableByteChannel.read(ByteBUffer dst) and benchmark","label":{"api":{"Channels.newChannel(InputStream in)":[[4,38]],"ReadableByteChannel.read(ByteBUffer dst)":[[48,87]]}}},{"text":"You are essentially describing a ReadWriteLock","label":{"api":{"ReadWriteLock":[[33,45]]}}},{"text":"The easiest way would be to treat the array as a list with the Arrays.asList method, and then just call contains","label":{"api":{"Arrays.asList":[[63,75]],"contains":[[104,111]]}}},{"text":"startsWith doesn't evaluate a regex, it just takes the string as is","label":{"api":{"startsWith":[[0,9]]}}},{"text":"Use ThreadLocalRandom (thanks to @bayou.io for mentioning this)  and enjoy the performance boost","label":{"api":{"ThreadLocalRandom":[[4,20]]}}},{"text":"Late to the party, but here's a solution using StringBuilder and printing it out only at the end","label":{"api":{"StringBuilder":[[47,59]]}}},{"text":"To get user input then you need to use Scanner(InputStream source) constructor","label":{"api":{"Scanner(InputStream source)":[[39,65]]}}},{"text":"in Method.invoke(...) you should not pass the parameter types, but the actual parameter values","label":{"api":{"Method.invoke(...)":[[3,20]]}}},{"text":"Please check the java documentation for Method.invoke(...)","label":{"api":{"Method.invoke(...)":[[40,57]]}}},{"text":"See the documentation of Node, section \"Bounding Rectangles\" about how the various bounds are calculated","label":{"api":{"Node":[[25,28]]}}},{"text":"You can implement ListCellRenderer interface or extend DefaultListCellRenderer to customize style of drop-down list items and set it","label":{"api":{"ListCellRenderer":[[18,33]],"DefaultListCellRenderer":[[55,77]]}}},{"text":"See Matcher specs","label":{"api":{"Matcher":[[4,10]]}}},{"text":"Here's the documentation","label":{"api":{}}},{"text":"Using a java.time DateTimeFormatter in Java 8","label":{"api":{"java.time":[[8,16]],"DateTimeFormatter":[[18,34]]}}},{"text":"Use List.listIterator(int index)","label":{"api":{"List.listIterator(int index)":[[4,31]]}}},{"text":"Use Collection.sort() and get the desired number of results with List.subList()","label":{"api":{"Collection.sort()":[[4,20]],"List.subList()":[[65,78]]}}},{"text":"Then Box will always have easy access to the array elements, and can also conveniently use any java.util.Arrays methods such as toString on it","label":{"api":{"java.util.Arrays":[[95,110]],"toStrin":[[128,134]]}}},{"text":"You can use the methods of java.util.reflect.Array to get access to arbitrary arrays' elements no matter what variable type they are stored in","label":{"api":{"java.util.reflect.Array":[[27,49]]}}},{"text":"Instead, such code has to be written nine times as you see the methods of java.util.Arrays are","label":{"api":{"java.util.Arrays":[[74,89]]}}},{"text":"I'm trying to use an implementation of an MQTT client specifically Paho Java client in Android, and trying to trace where I get an EOFException  error","label":{"api":{"EOFException":[[131,142]]}}},{"text":"As suggested by prabugp, you can handle this at runtime by catching all exceptions and testing them with the Class.isAssignableFrom() method","label":{"api":{"Class.isAssignableFrom()":[[109,132]]}}},{"text":"The Java Debug Interface (JDI) has access to live stack frame information represented as a StackFrame, where the actual object is available","label":{"api":{"Java Debug Interface (JDI)":[[4,29]],"StackFrame":[[91,100]]}}},{"text":"Use DOTALL flag to match text spanning multiple lines","label":{"api":{"DOTALL":[[4,9]]}}},{"text":"You have to set CascadeType on the OneToMany relation","label":{"api":{"CascadeType":[[16,26]]}}},{"text":"As the documentation for Normalizer mentions, the process it's following is a very rigorously defined standard, the Unicode Standard Annex #15 â Unicode Normalization Forms","label":{"api":{"Normalizer":[[25,34]]}}},{"text":"You can use System.arraycopy() method","label":{"api":{"System.arraycopy()":[[12,29]]}}},{"text":"This split the String on \",\", and transform the result in a stream, then check if one of the values of the stream is equal to firstString","label":{"api":{"String":[[15,20]]}}},{"text":"If you don't want to use java 8 streams, you can also do that using regular expressions","label":{"api":{"stream":[[32,37]]}}},{"text":"This will create an expression checking if firstString value is at the beginning or end of secondString, or preceded or followed by a \",\"","label":{"api":{}}},{"text":"The first argument to JColorChooser.showDialog is the parent component of the dialog","label":{"api":{"JColorChooser.showDialog":[[22,45]]}}},{"text":"Instead of using JColorChooser.showDialog, you'll need to embed a JColorChooser instance inside a JavaFX dialog or window","label":{"api":{"JColorChooser.showDialog":[[17,40]],"JColorChooser":[[66,78]],"JavaFX":[[98,103]]}}},{"text":"Of course, you're probably better off using ColorPicker in your main window, so you don't have to create an explicit dialog at all","label":{"api":{"ColorPicker":[[44,54]]}}},{"text":"You can use printf as follows","label":{"api":{"printf":[[12,17]]}}},{"text":"For details on the format string, refer to Format String Syntax in the documentation of Formatter","label":{"api":{"Formatter":[[88,96]]}}},{"text":"I just noticed that the Javadoc for IntStream.sum mention this exact reduction as being equivalent to sum()","label":{"api":{"IntStream.sum":[[36,48]],"sum()":[[102,106]]}}},{"text":"Most Servlet's require a javax.servlet.ServletContext object to operate properly","label":{"api":{"javax.servlet.ServletContext":[[25,52]]}}},{"text":"The contract of the java.util.Set interface states","label":{"api":{"java.util.Set":[[20,32]]}}},{"text":"Use SortedMap<K, V>, and your keys will be ordered by their natural ordering by default","label":{"api":{"SortedMap<K, V>":[[4,18]]}}},{"text":"To get the highest key, you will need to construct a TreeSet<T> instance from your map's keySet","label":{"api":{"TreeSet<T>":[[53,62]],"keySet":[[89,94]]}}},{"text":"Just add the javax.servlet API to the compile time dependencies","label":{"api":{"javax.servlet":[[13,25]]}}},{"text":"It covers the entire Java EE API, including javax.servlet (and javax.faces, so you'd then remove those individual JSF API/impl dependencies)","label":{"api":{"javax.servlet":[[44,56]],"javax.faces":[[63,73]]}}},{"text":"This is described in the documentation of Comparator","label":{"api":{"Comparator":[[42,51]]}}},{"text":"It short, if the implementation of Comparator is not consistent with equals method, then you should know what you're doing and you're responsible of the side effects of this design, but it's not an imposition to make the implementation consistent to Object#equals","label":{"api":{"Comparator":[[35,44]],"equals":[[69,74]],"Object#equals":[[250,262]]}}},{"text":"An example of this in the JDK may be found in BigDecimal#compareTo, which explicitly states in javadoc that this method is not consistent with BigDecimal#equals","label":{"api":{"BigDecimal#compareTo":[[46,65]],"BigDecimal#equals":[[143,159]]}}},{"text":"by using an InputStreamReader","label":{"api":{"InputStreamReader":[[12,28]]}}},{"text":"I think ScheduledExecutorService is general easier to use than the Timers so you might take a look at it","label":{"api":{"ScheduledExecutorService":[[8,31]],"Timers":[[67,72]]}}},{"text":"The getConstructor method will not find the constructor because it will only find an exact match of parameter types","label":{"api":{"getConstructor":[[4,17]]}}},{"text":"Try the String.contains() method","label":{"api":{"String.contains()":[[8,24]]}}},{"text":"You can continue using the stream with lines that don't contain your pattern","label":{"api":{"stream":[[27,32]]}}},{"text":"After the Socket is connected to the server, those values can be retrieved using the Socket.getInetAddress() and Socket.getRemoteSocketAddress() methods","label":{"api":{"Socket":[[10,15]],"Socket.getInetAddress()":[[85,107]],"Socket.getRemoteSocketAddress()":[[113,143]]}}},{"text":"Refer to the Socket documentation for more details","label":{"api":{"Socket":[[13,18]]}}},{"text":"You should look into HttpSession","label":{"api":{"HttpSession":[[21,31]]}}},{"text":"It's not so much that you have to use HttpSession, just don't use instance variables in a servlet/filter as they are not thread safe","label":{"api":{"HttpSession":[[38,48]]}}},{"text":"That is, what the Comparable<T> interface is for","label":{"api":{"Comparable<T>":[[18,30]]}}},{"text":"Please look at the API for mor details","label":{"api":{}}},{"text":"System.out is a PrintStream, and an overload of println takes an Object as a parameter, on which toString() is eventually called","label":{"api":{"System.out":[[0,9]],"PrintStream":[[16,26]],"Object":[[65,70]],"toString()":[[97,106]]}}},{"text":"In contrast, a JTextArea inherits its setText() method from JTextComponent, and it accepts a String, not an Object","label":{"api":{"JTextArea":[[15,23]],"setText()":[[38,46]],"JTextComponent":[[60,73]],"String":[[93,98]],"Object":[[108,113]]}}},{"text":"Open the .jar as a Zip File System and use Files.newDirectoryStream or Files.list","label":{"api":{"Files.newDirectoryStream":[[43,66]],"Files.list":[[71,80]]}}},{"text":"Static method valueOf of particular enum returns the enum constant of this type by name","label":{"api":{"valueO":[[14,19]]}}},{"text":"I would suggest in this case you use replace() instead of replaceAll(), because you're not using any regex","label":{"api":{"replace()":[[37,45]],"replaceAll()":[[58,69]]}}},{"text":"Have a look at the documentation for Double.toHexString()","label":{"api":{"Double.toHexString()":[[37,56]]}}},{"text":"You could be using Collections.swap()","label":{"api":{"Collections.swap()":[[19,36]]}}},{"text":"If you'd rather like to use the library as-is, you could create a temporary file (via File.createTempFile), pass that to sitemapgen4j, use it in your StreamResponse, and delete it after you're done reading","label":{"api":{"File.createTempFile":[[86,104]],"sitemapgen4j":[[121,132]],"StreamResponse":[[150,163]]}}},{"text":"Java java.util.regex.Matcher replaceFirst(...)/replaceAll(...) API returns strings, which (if using the default heap size) may well cause an OOME for inputs as large as 20-50M characters","label":{"api":{"java.util.regex.Matcher":[[5,27]],"replaceFirst(...)":[[29,45]],"replaceAll(...)":[[47,61]]}}},{"text":"These 2 methods can be easily rewritten to write to Writers rather than construct stings, effectively eliminating one point of failure","label":{"api":{"Writer":[[52,57]]}}},{"text":"The Matcher's factory method, however, only accepts CharSequences, which is also likely to throw an OOME if I use Strings/StringBuffers/StringBuilders","label":{"api":{"Matcher":[[4,10]],"CharSequences":[[52,64]],"OOME":[[100,103]],"Strings":[[114,120]],"StringBuffers":[[122,134]],"StringBuilder":[[136,148]]}}},{"text":"(Assuming that you meant hash, not hex, since you mentioned MessageDigest)","label":{"api":{"MessageDigest":[[60,72]]}}},{"text":"Having said that, for \"everyday hashing\" (for hash-tables etc.), the hash function provided by String.hashCode is about as good as it gets","label":{"api":{"String.hashCode":[[95,109]]}}},{"text":"For cryptographic hashing, MessageDigest seems to be the way to go","label":{"api":{"MessageDigest":[[27,39]]}}},{"text":"This seems to be an artifact of the implementation of TreeMap (which is what TreeSet uses to store its entries)","label":{"api":{"TreeMap":[[54,60]],"TreeSet":[[77,83]]}}},{"text":"TreeMap uses a binary search tree for storing the key/value pairs, but it only ever uses the given Comparator (or the compare function if the key class implements Comparable) to check for equality, as you can see in this code exxcerpt","label":{"api":{"TreeMap":[[0,6]],"Comparator":[[99,108]],"Comparable":[[163,172]]}}},{"text":"I'd almost call this a (not really fixable) bug since the JavaDoc of the Comparable interface explicitly says that returning 0 with the compareTo function does not have to imply \"equalness\"","label":{"api":{"Comparable":[[73,82]],"compareTo":[[136,144]]}}},{"text":"I'd recommend using a normal HashMap or a LinkedHashMap and then just sorting the output when you need to sort it with Collections.sort","label":{"api":{"HashMap":[[29,35]],"LinkedHashMap":[[42,54]],"Collections.sort":[[119,134]]}}},{"text":"You can do this manually or you can use something like a SwingWorker to do this, which would allow you to provide regular feedback on the \"progress\" of your playing (i.e","label":{"api":{"SwingWorker":[[57,67]]}}},{"text":"The class documentation for SwingWorker is quite good and I highly suggest you read it, regardless of whether or not you are going to use it, as it has some very good suggestions for threads in Swing in general","label":{"api":{"SwingWorker":[[28,38]],"Swing":[[194,198]]}}},{"text":"Good information is found in the HttpServletResponse javadoc as well as \"Myth2\" listed in Control Flow Myths busted in Java","label":{"api":{"HttpServletResponse":[[33,51]]}}},{"text":"XYSeriesCollection#getSeries() returns a List that is Iterable","label":{"api":{"XYSeriesCollection#getSeries()":[[0,29]],"List":[[41,44]],"Iterable":[[54,61]]}}},{"text":"Reading the JavaDoc of Optional, I bumped in a weird method signature; I never saw in my life","label":{"api":{"Optional":[[23,30]]}}},{"text":"Just use this copy constructor which creates a new list out of a collection","label":{"api":{}}},{"text":"Yes, you can implement such a method, since both Integer and Long extend Number","label":{"api":{"Integer":[[49,55]],"Long":[[61,64]],"Number":[[73,78]]}}},{"text":"The only thing you can do with a Number is to get its value as one of the primitive number types","label":{"api":{"Number":[[33,38]]}}},{"text":"In this particular case it's because the List.set(int, E) method requires the type to be the same as the type in the list","label":{"api":{"List.set(int, E)":[[41,56]]}}},{"text":"Java already has nice tools for doing simple text parsing, and in this case using a Scanner seems like a good fit","label":{"api":{"Scanner":[[84,90]]}}},{"text":"Notice that Scanner allows you to set the delimiter you want to parse by, and has several built-in types that it knows about, so you won't need to do any intermediate String creation or type casting","label":{"api":{"Scanner":[[12,18]]}}},{"text":"If you register the refs with a reference queue, poll that queue during after the sleep(1000) for references and remove them from the list you should not run out of memory","label":{"api":{"queue":[[42,46]]}}},{"text":"If you're guaranteed that the environment is first, then the String Split method will work","label":{"api":{"String Split":[[61,72]]}}},{"text":"Quoting from Oracle Documentation http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#substring%28int,%20int%29","label":{"api":{}}},{"text":"lowerKey() is a search in a balanced binary search tree, so it's obviously O(log n)","label":{"api":{"lowerKey()":[[0,9]]}}},{"text":"See the API listing for this","label":{"api":{"listing":[[12,18]]}}},{"text":"replaceAll replaces all occurrences that match a given regular expression","label":{"api":{"replaceAll":[[0,9]]}}},{"text":"Since you just want to match a simple string, you should use replace instead","label":{"api":{"replace":[[61,67]]}}},{"text":"It's much more efficient to construct this string directly, by iterating your list and using StringBuilder","label":{"api":{"StringBuilder":[[93,105]]}}},{"text":"Streams should be handled by calling close in a deterministic manner to avoid this very problem","label":{"api":{"Streams":[[0,6]],"close":[[37,41]]}}},{"text":"If close is not called then the stream will \"be closed at some undetermined time in the future when/if the finalizer runs or the program exits\"","label":{"api":{"close":[[3,7]]}}},{"text":"To make life easier, because it is very tedious to correctly wrap and call close methods, a try-with-resources statement can be used","label":{"api":{"close":[[75,79]]}}},{"text":"While it isn't as important (in this case) to close the read channel it should be done for the sake of hubris, consistency, and practice","label":{"api":{}}},{"text":"Is it necessary to close each nested OutputStream and Writer separately","label":{"api":{"OutputStream":[[37,48]],"Writer":[[54,59]]}}},{"text":"For command line options you have to use System.getProperty() instead of System.getenv()","label":{"api":{"System.getProperty()":[[41,60]],"System.getenv()":[[73,87]]}}},{"text":"Once you have actual Class object for your particular object you can interrogate the API for information like its name and so on","label":{"api":{"Class":[[21,25]]}}},{"text":"To add to Purag's answer, you could alternatively use nextLine() to advance the Scanner past the current line","label":{"api":{"nextLine()":[[54,63]],"Scanner":[[80,86]]}}},{"text":"Javadoc at https://docs.oracle.com/javaee/7/api/javax/persistence/Converter.html says that it must be annotated so I would always do that","label":{"api":{}}},{"text":"Use Collections.shuffle to shuffle it","label":{"api":{"Collections.shuffle":[[4,22]]}}},{"text":"Another, more portable solution of doing this instead of writing this by hand like in your code would be to use Pattern.quote","label":{"api":{"Pattern.quote":[[112,124]]}}},{"text":"See SimpleDateFormat documentation","label":{"api":{"SimpleDateFormat":[[4,19]]}}},{"text":"If you want to restore the old behavior, you can first convert your number to BigDecimal using BigDecimal.valueOf constructor, which \"translates a double into a BigDecimal, using the double's canonical string representation\"","label":{"api":{"BigDecimal":[[78,87],[161,170]],"BigDecimal.valueOf":[[95,112]]}}},{"text":"You can first use a Normalizer and then remove the undesired characters","label":{"api":{"Normalizer":[[20,29]]}}},{"text":"You should use split function","label":{"api":{"split":[[15,19]]}}},{"text":"Please check the Documentation here","label":{"api":{}}},{"text":"I want to double a Stream (no DoubleStream)","label":{"api":{"Stream":[[19,24]],"DoubleStream":[[30,41]]}}},{"text":"You can't add that exception to the throws clause however, since you override TimerTask.run, which declares no exceptions","label":{"api":{"TimerTask.run":[[78,90]]}}},{"text":"The only remaining opitions are catching that error or change Mult.main to not throw any exceptions that are not subclasses of RuntimeException","label":{"api":{"Mult.main":[[62,70]],"RuntimeException":[[127,142]]}}},{"text":"The ImageIcon constructor documentation makes it clear that the string argument is a filename","label":{"api":{"ImageIcon":[[4,12]]}}},{"text":"The goal is to use Affine Transform for sequences of translations, scales, flips, rotations, and shears applied to 2D points and mapping","label":{"api":{"Affine Transform":[[19,34]]}}},{"text":"Look at the Javadoc of remove()","label":{"api":{"remove()":[[23,30]]}}},{"text":"You should use ReentrantLock if you want fair access to synchronized block","label":{"api":{"ReentrantLock":[[15,27]]}}},{"text":"There is no need to do anything special to parse this format","label":{"api":{}}},{"text":"All the above parse fine, see also the Javadoc spec","label":{"api":{}}},{"text":"See the API","label":{"api":{}}},{"text":"The API suggests that \"programmers should call dispose when finished using a Graphics object only if it was created directly from a component or another Graphics object.\" I'm not sure how the implementations differ internally, but that may be the culprit","label":{"api":{"Graphics":[[77,84],[153,160]]}}},{"text":"From the documentation for onCloseRequest","label":{"api":{"onCloseRequest":[[27,40]]}}},{"text":"The Dialog documentation explains this thoroughly","label":{"api":{"Dialog":[[4,9]]}}},{"text":"Why not just use Files.readAllLines() and Files.write()","label":{"api":{"Files.readAllLines()":[[17,36]],"Files.write()":[[42,54]]}}},{"text":"A HashMap would be sufficiently quick, and sounds like what you're describing","label":{"api":{"HashMap":[[2,8]]}}},{"text":"HashMap will be faster then HashTable because HashMap is unsynchronized","label":{"api":{"HashMap":[[0,6],[46,52]],"HashTable":[[28,36]]}}},{"text":"Just have a look at Java API Specification and look for methods to provide these functionality","label":{"api":{}}},{"text":"I would suggest you let getX and setX acquire / release an internal Lock (which the traversal method also uses)","label":{"api":{"getX":[[24,27]],"setX":[[33,36]],"Lock":[[68,71]]}}},{"text":"In particular, you could use ReadWriteLock for your setX and getX methods","label":{"api":{"ReadWriteLock":[[29,41]],"setX":[[52,55]],"getX":[[61,64]]}}},{"text":"If you don't want to wait for it's termination, you can check if it was terminated by calling the exitValue(), without blocking your current thread execution","label":{"api":{"exitValue()":[[98,108]]}}},{"text":"First check using the available method if there is something to read without blocking","label":{"api":{"available":[[22,30]]}}},{"text":"available would most probably return 0 in this case","label":{"api":{"available":[[0,8]]}}},{"text":"The toString() method doesn't actually convert the contents of a byte array to a String","label":{"api":{"toString()":[[4,13]],"String":[[81,86]]}}},{"text":"Currently I'm using setFrom(InternetAddress) on javax.mail.Message and then executing via","label":{"api":{"setFrom(InternetAddress)":[[20,43]],"javax.mail.Message":[[48,65]]}}},{"text":"If your image is a BufferedImage then you can ask for his type with getType(), and test against the several constants (see","label":{"api":{"BufferedImage":[[19,31]],"getType()":[[68,76]]}}},{"text":"If you want to store nickname to file you can use PrintWriter","label":{"api":{"PrintWriter":[[50,60]]}}},{"text":"Use Math.round() (http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#round(double)) to round your output","label":{"api":{"Math.round()":[[4,15]]}}},{"text":"I'd just throw an IllegalArgumentException in the constructor itself","label":{"api":{"IllegalArgumentException":[[18,41]]}}},{"text":"That led to the Constant Field Values document","label":{"api":{"Constant Field Values":[[16,36]]}}},{"text":"The method EntityManager.createStoredProcedureQuery(String procedureName) is new in JPA version 2.1","label":{"api":{"EntityManager.createStoredProcedureQuery(String procedureName)":[[11,72]],"JPA":[[84,86]]}}},{"text":"You could take a look at a HashMap","label":{"api":{"HashMap":[[27,33]]}}},{"text":"What about a Map<String, Long>","label":{"api":{"Map<String, Long>":[[13,29]]}}},{"text":"Although you could just sort the strings, I would store those dates as LocalDateTimes instead of strings and keep them that way","label":{"api":{"LocalDateTime":[[71,83]],"string":[[97,102]]}}},{"text":"Secondly, standard arrays are not dynamic, so you would need to either set the size and increase it as needed, or just simply use an ArrayList","label":{"api":{"ArrayList":[[133,141]]}}},{"text":"After the response is set with all the data(header, body ...), commit it by calling ServletResponse#flushBuffer","label":{"api":{"ServletResponse#flushBuffer":[[84,110]]}}},{"text":"This is also explained in the javadoc","label":{"api":{}}},{"text":"You're looking for Class#getDeclaredMethods","label":{"api":{"Class#getDeclaredMethods":[[19,42]]}}},{"text":"Once it finds it, it parses the second argument (16/11/81, in this case) to a java.util.Date object and stores it in the inputDate variable","label":{"api":{"java.util.Date":[[78,91]],"inputDate":[[121,129]]}}},{"text":"If you're using RMI-IIOP, then you could write your own interceptor to transfer context data to the server and then store it in a thread local","label":{"api":{"interceptor":[[56,66]],"thread local":[[130,141]]}}},{"text":"Start by registering an ORBInitializer","label":{"api":{"ORBInitializer":[[24,37]]}}},{"text":"See the javadoc therein, but since ORB configuration is usually tightly controlled by the application server, you should read your application server documentation, particularly for how (or if it's even supported at all) you can add an ORB interceptor and how the class loading works","label":{"api":{"ORB":[[35,37]],"ORB interceptor":[[236,250]]}}},{"text":"In the client, your ORBInitializer should call ORBInitInfo.add_client_request_interceptor","label":{"api":{"ORBInitializer":[[20,33]],"ORBInitInfo.add_client_request_interceptor":[[47,88]]}}},{"text":"In your implementation of the send_request method, call ClientRequestInfo.add_request_service_context","label":{"api":{"send_request":[[30,41]],"ClientRequestInfo.add_request_service_context":[[56,100]]}}},{"text":"Your client would probably set some data in a thread local, and then your implementation of the send_request method would serialize the data to a byte[] to be added to the  ServiceContext","label":{"api":{"send_request":[[96,107]],"byte[]":[[146,151]],"ServiceContext":[[173,186]]}}},{"text":"In the server, your ORBInitializer should call add_server_request_interceptor","label":{"api":{"ORBInitializer":[[20,33]],"add_server_request_interceptor":[[47,76]]}}},{"text":"Your implementation of this interceptor would decode the service context sent by the client and probably set a thread local variable for the duration of the request and remove it at the end","label":{"api":{}}},{"text":"According to FXML documentation","label":{"api":{"FXML":[[13,16]]}}},{"text":"(I think NTFS/Windows calls it a \"file ID.\")  You can read a file's inode using its BasicFileAttributes.fileKey","label":{"api":{"BasicFileAttributes.fileKey":[[84,110]]}}},{"text":"For command line options you have to use System.getProperty()","label":{"api":{"System.getProperty()":[[41,60]]}}},{"text":"Or pass APP_HOME variable as an environment variable with EnvInject Plugin and lookup it with System.getenv()","label":{"api":{"System.getenv()":[[94,108]]}}},{"text":"It is because you are trying to access to substring (a method of String class)","label":{"api":{"substring":[[42,50]],"String":[[65,70]]}}},{"text":"In the code that you show to us you are trying to access to a method in your class Player making reference to the method substring (of the class String as I put above) and you should have to make reference to some String from your class Player","label":{"api":{"Player":[[83,88],[237,242]],"substring":[[121,129]],"String":[[145,150],[214,219]]}}},{"text":"You should make reference to the GET method that returns your String and then you will be able to use substring method of String class","label":{"api":{"GET":[[33,35]],"String":[[62,67],[122,127]],"substring":[[102,110]]}}},{"text":"Maybe what you are trying (I don't know that) it's to get a String with getGuess method","label":{"api":{"String":[[60,65]],"getGuess":[[72,79]]}}},{"text":"to store the value of your String","label":{"api":{"String":[[27,32]]}}},{"text":"To read files I recommend to you to use an ArrayList","label":{"api":{"ArrayList":[[43,51]]}}},{"text":"Now in your ArrayList you will have all the lines of your file","label":{"api":{"ArrayList":[[12,20]]}}},{"text":"Actually, that's exactly it - you can use java.util.Arrays#fill","label":{"api":{"java.util.Arrays#fill":[[42,62]]}}},{"text":"This is because ObjectOutputStream stores objects in Java's serialization format; it does not just store the raw content of the BigInteger object","label":{"api":{"ObjectOutputStream":[[16,33]],"BigInteger":[[128,137]]}}},{"text":"This is how you can filter using Java 8 Streams","label":{"api":{"Streams":[[40,46]]}}},{"text":"Some existing answers recommend spawning threads manually -- I would not do that, but rather use an ExecutorService instead","label":{"api":{"ExecutorService":[[100,114]]}}},{"text":"Submitting your child tasks to a ListeningExecutorService will give you back a ListenableFuture<T> (with T being your result type)","label":{"api":{"ListeningExecutorService":[[33,56]],"ListenableFuture<T>":[[79,97]]}}},{"text":"If you then wait on this one future (with get), you effectively wait on all child tasks","label":{"api":{"get":[[42,44]]}}},{"text":"If you can't use a 3rd party library, you can use a \"traditional\" ExecutorService to spawn the child tasks and use an ExecutorCompletionService to process the resulting futures","label":{"api":{"ExecutorService":[[66,80]],"ExecutorCompletionService":[[118,142]]}}},{"text":"You could create a single ObservableList<User>, and then populate the various views using a FilteredList","label":{"api":{"ObservableList<User>":[[26,45]],"FilteredList":[[92,103]]}}},{"text":"use setLayoutX (and Y) or setTranslateX (and Y)","label":{"api":{"setLayoutX":[[4,13]],"setTranslateX":[[26,38]]}}},{"text":"You should make yourself familiar with Working With Layouts in JavaFX and the Node class","label":{"api":{"JavaFX":[[63,68]],"Node":[[78,81]]}}},{"text":"Have a look at the documentation for the condition interface","label":{"api":{"condition":[[41,49]]}}},{"text":"A data structure like a BlockingQueue would also be a solution","label":{"api":{"BlockingQueue":[[24,36]]}}},{"text":"You can use a Scanner as follows","label":{"api":{"Scanner":[[14,20]]}}},{"text":"You can use ScheduledThreadPoolExecutor if you believe this may grow past a trivial implementation","label":{"api":{"ScheduledThreadPoolExecutor":[[12,38]]}}},{"text":"Note that comparing strings should be done using equals, == compares references and not content","label":{"api":{"equals":[[49,54]]}}},{"text":"A classic example would be java.io.File.separtorChar","label":{"api":{"java.io.File.separtorChar":[[27,51]]}}},{"text":"using the following two classes (ImageWriter , ImageWriteParam) , but the example provided is just compressing an Image","label":{"api":{"ImageWriter":[[33,43]],"ImageWriteParam":[[47,61]],"Image":[[114,118]]}}},{"text":"As a sidenote, and in general, you might want to try to use ExecutorService and Callable when you can, as these are higher level, newer APIs","label":{"api":{"ExecutorService":[[60,74]],"Callable":[[80,87]]}}},{"text":"What is happening is that you're using a raw java.util.function.Predicate, on which the test() method would look like","label":{"api":{"java.util.function.Predicate":[[45,72]],"test()":[[88,93]]}}},{"text":"However, if you use a generic java.util.function.Predicate with type-parameter of Integer, the test() method would look like","label":{"api":{"java.util.function.Predicate":[[30,57]],"Integer":[[82,88]],"test()":[[95,100]]}}},{"text":"It would be much easier to do with a Scanner, where you can just set the delimiter","label":{"api":{"Scanner":[[37,43]]}}},{"text":"Spring method for ToolBar section alignment works fine for me","label":{"api":{"Spring":[[0,5]],"ToolBar":[[18,24]]}}},{"text":"A ToolBar (at least in the standard modena.css stylesheet for Java 8), is already internally implemented as a HBox container, so you can just use the HBox.setHgrow method to adjust the internal layout constraints of items you place in a toolbar","label":{"api":{"ToolBar":[[2,8]],"HBox":[[110,113]],"HBox.setHgrow":[[150,162]]}}},{"text":"If you wanted a spacer which was a fixed size, instead of HBox.setHgrow, you could use something like","label":{"api":{"HBox.setHgrow":[[58,70]]}}},{"text":"Please re-read the TreeMap Javadocs - or the generic Map interface, for that matter - and be very familiar with them for what you're trying to do here","label":{"api":{"TreeMap":[[19,25]],"Map":[[53,55]]}}},{"text":".containsValue() will search for specific, exact matches in the domain of values that you have inserted into your Map - nothing more, nothing less","label":{"api":{".containsValue()":[[0,15]],"Map":[[114,116]]}}},{"text":"This goes against the exact purpose of a Map - Hash, Tree, or otherwise","label":{"api":{}}},{"text":"In most implementations (including the out-of-box TreeMap and HashMap) - searches against values will have to scan the entire Map structure anyway (or at least, until it can bail out after finding the first match)","label":{"api":{"TreeMap":[[50,56]],"HashMap":[[62,68]],"Map":[[126,128]]}}},{"text":"I've tried TimeZone.getTimeZone and DateTimeZone.forID but to no avail","label":{"api":{"TimeZone.getTimeZone":[[11,30]],"DateTimeZone.forID":[[36,53]]}}},{"text":"You can convert your arrays to a List and then use the containsAll method to see if a particular list contains all elements described in another list","label":{"api":{"containsAll":[[55,65]]}}},{"text":"Since Runnable is an interface, you need to supply an object that implements that interface","label":{"api":{"Runnable":[[6,13]]}}},{"text":"Collections.reverseOrder will create such a comparator for you, you can use it like this","label":{"api":{"Collections.reverseOrder":[[0,23]]}}},{"text":"I've read Stream.skip() documentation","label":{"api":{"Stream.skip()":[[10,22]]}}},{"text":"Also Characteristics.UNORDERED documentation is not very comprehend and does not say that ordering will be lost for the whole stream","label":{"api":{"Characteristics.UNORDERED":[[5,29]]}}},{"text":"Finally, Ordering section in package summary does not cover this case either","label":{"api":{}}},{"text":"You could use the getPath() method of the URL object","label":{"api":{"getPath()":[[18,26]],"URL":[[42,44]]}}},{"text":"Check the PrinterStateReason class","label":{"api":{"PrinterStateReason":[[10,27]]}}},{"text":"If you check the ArrayList.indexOf implementation, you will see that Vector3i.equals is called in your case","label":{"api":{"ArrayList.indexOf":[[17,33]],"Vector3i.equals":[[69,83]]}}},{"text":"Actually it's even specified in JavaDoc for List","label":{"api":{"List":[[44,47]]}}},{"text":"o.equals(get(i))), or -1 if there is no such index","label":{"api":{"o.equals(get(i))":[[0,15]]}}},{"text":"In general equals operation must be symmetric","label":{"api":{"equals":[[11,16]]}}},{"text":"a.equals(b) == b.equals(a)","label":{"api":{}}},{"text":"So you have to implement Vector3i.equals as well","label":{"api":{"Vector3i.equals":[[25,39]]}}},{"text":"Please note also that your current equals implementation lacks other properties like reflexivity","label":{"api":{"equals":[[35,40]]}}},{"text":"Also consider implementing the hashCode when you implement an equals","label":{"api":{"hashCode":[[31,38]],"equals":[[62,67]]}}},{"text":"You can use class CyclicBarrier from the JDK","label":{"api":{"CyclicBarrier":[[18,30]]}}},{"text":"If so, use the Scanner class","label":{"api":{"Scanner":[[15,21]]}}},{"text":"This is mentioned in the Javadocs of SimpleDateFormat","label":{"api":{"SimpleDateFormat":[[37,52]]}}},{"text":"Use Comparator.comparing helper method","label":{"api":{"Comparator.comparing":[[4,23]]}}},{"text":"CountDownLatch is a synchronization mechanism","label":{"api":{"CountDownLatch":[[0,13]]}}},{"text":"Exchanger is a communication mechanism","label":{"api":{"Exchanger":[[0,8]]}}},{"text":"HashMap does not have a guaranteed iteration order so you will need to collect to a LinkedHashMap in order for the sorting to be meaningful","label":{"api":{"HashMap":[[0,6]],"LinkedHashMap":[[84,96]]}}},{"text":"You can also use comparingByValue if you find it more readable","label":{"api":{"comparingByValue":[[17,32]]}}},{"text":"In my opinion, this is by far the most common use of flatMap(Function mapper)","label":{"api":{"flatMap(Function mapper)":[[53,76]]}}},{"text":"You need to round the product with Math.round so that it can be casted to an int safely","label":{"api":{"Math.round":[[35,44]]}}},{"text":"Use Java HTTP Server","label":{"api":{"HTTP Server":[[9,19]]}}},{"text":"May I know what's causing the JVM to treat/think that r1 has 1 (estimated number of) dependent CompletableFuture, while it decides to straightforwardly complete r2 and r3","label":{"api":{"CompletableFuture":[[95,111]]}}},{"text":"You can use javax.xml.stream.events.Comment.getText() to get the string data of a comment, or the empty string if it doesn't exist","label":{"api":{"javax.xml.stream.events.Comment.getText()":[[12,52]]}}},{"text":"If String#compareTo is fine for you, then you could really simplify things a bit, and do it with a single Stream chain","label":{"api":{"String#compareTo":[[3,18]],"Stream":[[106,111]]}}},{"text":"Your compilation error is because String.charAt() returns a char, not a String","label":{"api":{"String.charAt()":[[34,48]],"char":[[60,63]],"String":[[72,77]]}}},{"text":"Since replaceAll takes a regex, you can ask for optional :, followed by one or more space(s)","label":{"api":{"replaceAll":[[6,15]],"optional":[[48,55]]}}},{"text":"Use the method String.split(regex)","label":{"api":{"String.split(regex)":[[15,33]]}}},{"text":"If you want to defer closing of the reader to the delivered Stream you need to invoke Stream.onClose()","label":{"api":{"Stream":[[60,65]],"Stream.onClose()":[[86,101]]}}},{"text":"Please refer to getIssuerDN() and getSubjectDN()","label":{"api":{"getIssuerDN()":[[16,28]],"getSubjectDN()":[[34,47]]}}},{"text":"As both List and array are Iterable, you can use the foreach syntax","label":{"api":{"Iterable":[[27,34]]}}},{"text":"The reason why this might be happening is that Positioning clears isInterrupted flag (see https://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#interrupted%28%29) and/or catches somewhere InterruptedException (or Exception/Throwable)","label":{"api":{"isInterrupted":[[66,78]],"InterruptedException":[[198,217]],"Exception":[[223,231]],"Throwable":[[233,241]]}}},{"text":"You can use the Stream#findFirst() method, which","label":{"api":{"Stream#findFirst()":[[16,33]]}}},{"text":"Alternatively, with the same success you can also use the Stream#findAny() method","label":{"api":{"Stream#findAny()":[[58,73]]}}},{"text":"The API defines the key of the map entry as the constant javax.management.remote.JMXConnector.CREDENTIALS but the value of the constant is \"jmx.remote.credentials\"","label":{"api":{"javax.management.remote.JMXConnector.CREDENTIALS":[[57,104]],"jmx.remote.credentials":[[140,161]]}}},{"text":"You can either create a new Array, or use an ArrayList (internally, however, the ArrayList creates a new array, but this is hidden from you)","label":{"api":{"Array":[[28,32]],"ArrayList":[[45,53],[81,89]]}}},{"text":"See the API docs for Integer","label":{"api":{"Integer":[[21,27]]}}},{"text":"If you want to dynamically lookup the target method based on a target, a name and available argument types then the MethodHandle machinery might prove useful","label":{"api":{"MethodHandle":[[116,127]]}}},{"text":"You can also use a ListIterator (the enhanced for loop uses an Iterator in the background)","label":{"api":{"ListIterator":[[19,30]],"Iterator":[[63,70]]}}},{"text":"Per the JavaSE 7 JavaDoc, the remove method for Iterator","label":{"api":{"remove":[[30,35]],"Iterator":[[48,55]]}}},{"text":"System.exit(int) takes an integer argument, but otherwise you can call it to terminate your program","label":{"api":{"System.exit(int)":[[0,15]]}}},{"text":"If you're using the Servlet 3.0 (or higher) API, you could also configure your servlet by annotating it with the @WebServlet annotation, and you won't need the web.xml","label":{"api":{"@WebServlet":[[113,123]]}}},{"text":"Because all classes in Java inherently extend the Object class","label":{"api":{"Object":[[50,55]]}}},{"text":"Class A will inherit the Object#equals method","label":{"api":{"Object#equals":[[25,37]]}}},{"text":"Because RuntimeException extends Exception, which means that the Exception toThrow can be cast to T (i.e","label":{"api":{"RuntimeException":[[8,23]],"Exception":[[33,41],[65,73]],"toThrow":[[75,81]]}}},{"text":"You can put the token in an AtomicReference and use a Semaphore to pause the threads","label":{"api":{"AtomicReference":[[28,42]],"Semaphore":[[54,62]]}}},{"text":"ThreadFactory is your friend, my friend","label":{"api":{"ThreadFactory":[[0,12]]}}},{"text":"I'm not familiar with any of these functions, but I believe that DIB_RGB_COLORS gives you the components in the âblue, green, red, reservedâ order, whereas TYPE_4BYTE_ABGR is expecting the components in the âalpha, blue, green, redâ order","label":{"api":{"TYPE_4BYTE_ABGR":[[156,170]]}}},{"text":"Instead you could snapshot the WebView Node, and use a PixelReader from the snapshot Image to get a pixel Buffer","label":{"api":{"WebView":[[31,37]],"PixelReader":[[55,65]]}}},{"text":"Here is an example of continuously taking snapshots of an animated WebView node (playing a video) into an ImageView","label":{"api":{"WebView":[[67,73]],"ImageView":[[106,114]]}}},{"text":"The bottom of the image is a snapshot of the original image with a frame-rate overlaid (approx 60fps when run on a Retina MacBook when the original source WebView is sized to full-screen)","label":{"api":{"WebView":[[155,161]]}}},{"text":"For more information, please refer to the document","label":{"api":{}}},{"text":"You probably want to use ServletContext.html#getRealPath(java.lang.String) to translate a a relative resource into a real file system path","label":{"api":{"ServletContext.html#getRealPath(java.lang.String)":[[25,73]]}}},{"text":"Please have a look at the JavaDoc for the Iterator","label":{"api":{"Iterator":[[42,49]]}}},{"text":"You can create the path by calling File#mkdirs on its parent","label":{"api":{"File#mkdirs":[[35,45]]}}},{"text":"Math.max(a, b) returns the maximum of the two given value","label":{"api":{"Math.max(a, b)":[[0,13]]}}},{"text":"Add a DocumentListener to learn when the underlying HTMLDocument changes","label":{"api":{"DocumentListener":[[6,21]],"HTMLDocument":[[52,63]]}}},{"text":"In the example below, an adjacent JTextArea displays the changes as they are typed using the result of getText(), which \"Returns the text contained in this TextComponent in terms of the content type of this editor.\" You can traverse the elements of the parsed HTMLDocument as shown here","label":{"api":{"JTextArea":[[34,42]],"getText()":[[103,111]],"TextComponent":[[156,168]],"HTMLDocument":[[260,271]]}}},{"text":"An HTMLDocument models HTML, \"As a result, the structure described by an HTML document is not exactly replicated by default.\" The editor alters elements, not tags","label":{"api":{"HTMLDocument":[[3,14]]}}},{"text":"The getText() method uses an HTMLWriter to reconstruct the modeled HTML by traversing the elements of its internal document tree","label":{"api":{"getText()":[[4,12]],"HTMLWriter":[[29,38]]}}},{"text":"In order to use String.format you do not concatenate the values for the placeholders with the format string, but rather pass them as parameters","label":{"api":{"String.format":[[16,28]]}}},{"text":"If you need to make a change on the user interface, like changing text in your JTextPane and setting the caret position out of a different thread than the event dispatch thread, you need to invoke either EventQueue.invokeLater() or EventQueue.invokeAndWait() (see EventQueue)","label":{"api":{"JTextPane":[[79,87]],"EventQueue.invokeLater()":[[204,227]],"EventQueue.invokeAndWait()":[[232,257]],"EventQueue":[[264,273]]}}},{"text":"Might be even better if you call EventQueue.invokeAndWait only after x iterations and cache the previous results, which needs to be displayed","label":{"api":{"EventQueue.invokeAndWait":[[33,56]]}}},{"text":"You can use Graphics2D.drawImage(BufferedImage image, BufferedImageOp op, int x, int y) and a RescaleOp to alter the colours when drawing the image","label":{"api":{"Graphics2D.drawImage(BufferedImage image, BufferedImageOp op, int x, int y)":[[12,86]],"RescaleOp":[[94,102]]}}},{"text":"The scheme as given by ServletRequest#getSchemeitself is http","label":{"api":{"ServletRequest#getScheme":[[23,46]]}}},{"text":"Hibernate), you can use the PersistenceProvider#createContainerEntityManagerFactory(PersistenceUnitInfo info, Map map) method to bootstrap an EntityManagerFactory without needing a persistence.xml","label":{"api":{"PersistenceProvider#createContainerEntityManagerFactory(PersistenceUnitInfo info, Map map)":[[28,117]],"EntityManagerFactory":[[142,161]]}}},{"text":"However, it's annoying that you have to implement the PersistenceUnitInfo interface, so you are better off using Spring or Hibernate which both support bootstrapping JPA without a persistence.xml file","label":{"api":{"PersistenceUnitInfo":[[54,72]]}}},{"text":"Where the PersistenceUnitInfo is implemented by the Spring-specific MutablePersistenceUnitInfo class","label":{"api":{"PersistenceUnitInfo":[[10,28]],"MutablePersistenceUnitInfo":[[68,93]]}}},{"text":"Depending on what you want to achieve and in what context (ApplicationServer vs CLI, CMT transactions vs EntityTransactions), it may be possible to use JPA without a persistence.xml","label":{"api":{"ApplicationServer":[[59,75]],"EntityTransaction":[[105,121]],"JPA":[[152,154]]}}},{"text":"If you are trying to share a property between different components during the request life time, you can set a servlet request attribute","label":{"api":{}}},{"text":"Java EE 7 has JSON classes related to the pertaining JSR 353 (there also in an overview article on oracle's web presence)","label":{"api":{}}},{"text":"This can be quite complicated because the best candidate for on-the-fly xml parsing the SAX Parser","label":{"api":{"SAX Parser":[[88,97]]}}},{"text":"From the connection you can get DatabaseMetaData, and do a query-by-expression on it (null = any)","label":{"api":{"DatabaseMetaData":[[32,47]]}}},{"text":"Both OracleDataSource and the HSQLDB DataSource implement the javax.sql.DataSource interface so you should use those instead","label":{"api":{"OracleDataSource":[[5,20]],"HSQLDB DataSource":[[30,46]],"javax.sql.DataSource":[[62,81]]}}},{"text":"HTMLEditorKit only supports HTML 3.2, so you will likely encounter several issues","label":{"api":{"HTMLEditorKit":[[0,12]]}}},{"text":"If you are targeting HTML tags beyond version 3.2, then you will be better served by JavaFX HTMLEditor","label":{"api":{"JavaFX HTMLEditor":[[85,101]]}}},{"text":"From the HTMLEditorKit documentation","label":{"api":{"HTMLEditorKit":[[9,21]]}}},{"text":"The earliest version of HTML that could be validated against an XML schema was XHTML 1.0, so finding all of the outlier cases will be challenge with HTMLEditorKit","label":{"api":{"HTMLEditorKit":[[149,161]]}}},{"text":"A Callable throws an Exception, which is not the superclass of NoClassDefFoundError","label":{"api":{"Callable":[[2,9]],"Exception":[[21,29]],"NoClassDefFoundError":[[63,82]]}}},{"text":"Within your Callable, catch Error (or even Throwable) and wrap it with an Exception","label":{"api":{"Callable":[[12,19]],"Throwable":[[43,51]],"Exception":[[74,82]]}}},{"text":"In order to print the error to the console, you can create a Thread.UncaughtExceptionHander","label":{"api":{"Thread.UncaughtExceptionHander":[[61,90]]}}},{"text":"Passing it into the Thread#setDefaultUncaughtThreadExceptionHandler will cause the handler to be invoked when the error is thrown","label":{"api":{"Thread#setDefaultUncaughtThreadExceptionHandler":[[20,66]]}}},{"text":"It's not pretty, but you could use reflection to look up the getCustomerId Method and then invoke() it, cf","label":{"api":{"getCustomerId":[[61,73]],"invoke()":[[91,98]]}}},{"text":"Alternatively, use a StringBuilder to aggregate your substrings - every time you concatenate two strings you're creating a new string, whereas StringBuilder is mutable and doesn't need to create a new copy on an update","label":{"api":{"StringBuilder":[[21,33],[143,155]]}}},{"text":"Retrieving the computed value without blocking the GUI Thread would be done with getValue()","label":{"api":{"getValue()":[[81,90]]}}},{"text":"That is why you should do this aysnc in the onSucceeded block","label":{"api":{"onSucceeded":[[44,54]]}}},{"text":"If you want to schedule an on-completion action without blocking the current thread, you may instead use CompletableFuture which offers such functionality","label":{"api":{"CompletableFuture":[[105,121]]}}},{"text":"A canonical path is absolute and unique, but will have different meaning on different systems","label":{"api":{}}},{"text":"A canonical pathname is both absolute and unique","label":{"api":{}}},{"text":"The problem in here is that you are appending a /, when you are already using a ClassLoader's getResource()","label":{"api":{"ClassLoader":[[80,90]],"getResource()":[[94,106]]}}},{"text":"You should never use a / at the beginning of a ClassLoader path is because all ClassLoader paths are absolute","label":{"api":{"ClassLoader":[[47,57],[79,89]]}}},{"text":"You can definitely use Class's getResource() with a URL which starts with /, because before it delegates down to the classloader, it creates an absolute URL","label":{"api":{"Class":[[23,27]],"getResource()":[[31,43]],"classloader":[[117,127]]}}},{"text":"If you are using this JSONArray, you can even write","label":{"api":{"JSONArray":[[22,30]]}}},{"text":"The Java Collections Framework (Tutorial) defines the Set interface for collecting a distinct bunch of values","label":{"api":{"Collections":[[9,19]],"Set":[[54,56]]}}},{"text":"As an implementation of that interface, we will use HashSet","label":{"api":{"HashSet":[[52,58]]}}},{"text":"Now we have a Set of distinct values","label":{"api":{"Set":[[14,16]]}}},{"text":"To sort them, we need to convert to a List","label":{"api":{"List":[[38,41]]}}},{"text":"The Collections class (notice the \"s\") offers a static method for sorting a List of items that implement Comparable","label":{"api":{"Collections":[[4,14]],"Comparable":[[105,114]]}}},{"text":"It can be any object (in fact, synchronized without parameters will synchronize on this), but Java API provides classes dedicated to this functionality, for example ReentrantLock","label":{"api":{"ReentrantLock":[[165,177]]}}},{"text":"You don't get a proper serial number here because you are using a wrong format for SimpleDateFormat, you are referring to month with m while it should be M, take a look at the SimpleDateFormat Documentation for further information","label":{"api":{"SimpleDateFormat":[[83,98],[176,191]]}}},{"text":"So I want to make a Map that maps the service to use to the corresponding key","label":{"api":{"Map":[[20,22]]}}},{"text":"If you were using Java 8 Optional, it would look like this","label":{"api":{"Optional":[[25,32]]}}},{"text":"If you can't use the official Optional class, you could maybe change your Option to behave similarly","label":{"api":{"Optional":[[30,37]]}}},{"text":"With Java 9 you could even replace the awkward filter(Optional::isPresent).map(Optional::get) with flatMap(Optional::stream)","label":{"api":{"filter(Optional::isPresent).map(Optional::get)":[[47,92]],"flatMap(Optional::stream)":[[99,123]]}}},{"text":"Your Swing code is broken - Swing is also single threaded, and you should execute jLabel.setText(...) on the AWT event handling thread, either by wrapping it in SwingUtilities.runLater(...);, or by using a higher-level API such as a Timer","label":{"api":{"jLabel.setText(...)":[[82,100]],"SwingUtilities.runLater(...)":[[161,188]],"Timer":[[233,237]]}}},{"text":"If Java 8 is available you could always implement an Either using the new Optional class","label":{"api":{"Optional":[[74,81]]}}},{"text":"For this kind of tasks you can use javax.swing.Timer","label":{"api":{"javax.swing.Timer":[[35,51]]}}},{"text":"With Java 8, this is possible with the anyMatch method","label":{"api":{"anyMatch":[[39,46]]}}},{"text":"Instead use the constructor","label":{"api":{}}},{"text":"Use String#toCharArray to obtain the char[] from the String you're working with","label":{"api":{"String#toCharArray":[[4,21]],"char[]":[[37,42]],"String":[[53,58]]}}},{"text":"Examples include java.util.Arrays and java.util.stream.StreamSupport","label":{"api":{"java.util.Arrays":[[17,32]],"java.util.stream.StreamSupport":[[38,67]]}}},{"text":"Change hh:mmAA to hh:mmaa (link)","label":{"api":{}}},{"text":"Refer to the documentation for more details","label":{"api":{}}},{"text":"You could use a DocumentListener to analyse only the text that is inserted inside your TextPane","label":{"api":{"DocumentListener":[[16,31]],"TextPane":[[87,94]]}}},{"text":"To do so, you would need to get the getWordStart and getWordEnd methods of the javax.swing.text.Utilities class","label":{"api":{"getWordStart":[[36,47]],"getWordEnd":[[53,62]],"javax.swing.text.Utilities":[[79,104]]}}},{"text":"If you need to throw an exception and it is not possible to return a Response (or you'd just rather throw the exception), if you look at the constructors of WebApplicationException, you'll notice that it has a constructor that excepts a Response","label":{"api":{"Response":[[69,76],[237,244]],"WebApplicationException":[[157,179]]}}},{"text":"That's really the only way to add a body if throwing an exception (unless you use a mapper)","label":{"api":{"mapper":[[84,89]]}}},{"text":"You need a second Collector for that mapping","label":{"api":{"Collector":[[18,26]]}}},{"text":"The following piece of code, while executed by a single thread, throws a ConcurrentModificationException on line 4","label":{"api":{"ConcurrentModificationException":[[73,103]]}}},{"text":"I couldn't find any Map.iterator() or Map.mapIterator() method on HashMap Javadoc","label":{"api":{"Map.iterator()":[[20,33]],"Map.mapIterator()":[[38,54]],"HashMap":[[66,72]]}}},{"text":"Use Matcher.find() instead","label":{"api":{"Matcher.find()":[[4,17]]}}},{"text":"Then, in that main thread, measure the time that elapsed since last frame using System.currentTimeMilis(), don't assume that Thread.sleep(17); will sleep for exactly 17 miliseconds","label":{"api":{"System.currentTimeMilis()":[[80,104]],"Thread.sleep(17)":[[125,140]]}}},{"text":"From String(byte[] bytes, String charsetName)","label":{"api":{"String(byte[] bytes, String charsetName)":[[5,44]]}}},{"text":"To execute queries that update, delete or insert any data in your DB, you cannot use executeQuery(String sql) (check here the docs), but executeUpdate(String sql) instead","label":{"api":{"executeQuery(String sql) (check here the docs)":[[85,130]],"executeUpdate(String sql)":[[137,161]]}}},{"text":"In addition to that, automatic flushing (on newline) of the PrintWriter is off by default","label":{"api":{"PrintWriter":[[60,70]]}}},{"text":"You could use a combination of indexOf and substring to find and extract the substring","label":{"api":{"indexOf":[[31,37]],"substring":[[43,51]]}}},{"text":"While studying the ByteBuffer class I got to thinking about an array wrapped ByteBuffer that might be constructed as follows","label":{"api":{"ByteBuffer":[[19,28],[77,86]]}}},{"text":"However, as I studied further, I seemed to find that the ByteBuffer has two modes which are read and write and we can flip between them using the flip() method","label":{"api":{"ByteBuffer":[[57,66]],"flip()":[[146,151]]}}},{"text":"What is the definition of the initial state of a ByteBuffer","label":{"api":{"ByteBuffer":[[49,58]]}}},{"text":"You can just use Math.hypo()","label":{"api":{"Math.hypo()":[[17,27]]}}},{"text":"When the input number does not fit in long, use the constructor that takes a String argument","label":{"api":{"String":[[77,82]]}}},{"text":"For this classes, you can define their natural order by implementing Comparable<T>","label":{"api":{"Comparable<T>":[[69,81]]}}},{"text":"For this, Comparator<T> is extremely useful","label":{"api":{"Comparator<T>":[[10,22]]}}},{"text":"You need to sort the list as well, in reversed order","label":{"api":{}}},{"text":"as discussed in the Font API, each supported platform may map a different physical font to a particulate logical font such as Font.MONOSPACED","label":{"api":{"Font":[[20,23]],"Font.MONOSPACED":[[126,140]]}}},{"text":"Sort the resulted list in the order you want using a Comparator","label":{"api":{"Comparator":[[53,62]]}}},{"text":"Keep in mind that this is different than a Comparable, where you mark a specific object as such; Comparator allows you to specify a new ordering that differs from the natural ordering at will","label":{"api":{"Comparable":[[43,52]],"Comparator":[[97,106]]}}},{"text":"Also HashSet doesn't preserve the order, if you want ordered set you can use LinkedHashSet which preserves insertion order","label":{"api":{"HashSet":[[5,11]],"LinkedHashSet":[[77,89]]}}},{"text":"However, you can use a Map, which probably does what you want","label":{"api":{"Map":[[23,25]]}}},{"text":"To have pluralized translations, use different keys, or use a ChoiceFormat","label":{"api":{"ChoiceFormat":[[62,73]]}}},{"text":"Note that MessageFormat can use a ChoiceFormat by specifying it in its pattern","label":{"api":{"MessageFormat":[[10,22]],"ChoiceFormat":[[34,45]]}}},{"text":"Just use the built-in Collections.sort, which is a mergesort implementation","label":{"api":{"Collections.sort":[[22,37]]}}},{"text":"I did not try this approach but this link may help you with it","label":{"api":{}}},{"text":"You can use JButton#getToolTipLocation to return a Point within the component's coordinate context for where you want the tool tip displayed","label":{"api":{"JButton#getToolTipLocation":[[12,37]],"Point":[[51,55]]}}},{"text":"We can use a comma and a new line character as delimiters using a Pattern","label":{"api":{"Pattern":[[66,72]]}}},{"text":"you might want to use a StringBuilder to gain some performance","label":{"api":{"StringBuilder":[[24,36]]}}},{"text":"I'm using StringBuilder which makes it easy (and effective) to compose a single String from the array contents","label":{"api":{"StringBuilder":[[10,22]],"String":[[80,85]]}}},{"text":"String.format is useful when you want to create formatted output","label":{"api":{"String.format":[[0,12]]}}},{"text":"Java ships with the javax.xml.xpath library, with which you can search the node tree of your document","label":{"api":{"javax.xml.xpath":[[20,34]]}}},{"text":"Better yet, use Arrays.toString for printing to avoid this kind of confusion","label":{"api":{"Arrays.toString":[[16,30]]}}},{"text":"indexOf doesn't accept a regex, you should iterate on the list and use Matcher and Pattern to achieve that","label":{"api":{"indexOf":[[0,6]],"Matcher":[[71,77]],"Pattern":[[83,89]]}}},{"text":"You should iterate on the list, check if the string startsWith that string, and then return its index","label":{"api":{"startsWith":[[52,61]]}}},{"text":"You can use List#sublist()","label":{"api":{"List#sublist()":[[12,25]]}}},{"text":"A different and concise way to do that is using streams from Java 8","label":{"api":{"streams":[[48,54]]}}},{"text":"Instead, you could use the Map.merge method","label":{"api":{"Map.merge":[[27,35]]}}},{"text":"If it's the latter, something like ScheduledExecutorService or ListeningScheduledExecutorService might be preferable","label":{"api":{"ScheduledExecutorService":[[35,58]],"ListeningScheduledExecutorService":[[63,95]]}}},{"text":"Use java.io.SequenceInputStream to trick xml parser","label":{"api":{"java.io.SequenceInputStream":[[4,30]]}}},{"text":"The Date documentation seems to indicate is aware of leap seconds, but seems unhelpfully vague","label":{"api":{"Date":[[4,7]]}}},{"text":"Can I assume the JDK, when the appropriate Date object is constructed or  Calendar.getInstance() is invoked, it is a pass through to the underlying OS's date-time handling to get the appropriate \"real\" time value","label":{"api":{"Date":[[43,46]],"Calendar.getInstance()":[[74,95]]}}},{"text":"Use a Map (probably a HashMap) internal to your object to associate \"option2\" with {\"2-option1\", \"2-option2\", \"2-option3\", \"2-option4\"}","label":{"api":{"Map":[[6,8]],"HashMap":[[22,28]]}}},{"text":"new Thread() is a constructor call","label":{"api":{"Thread()":[[4,11]]}}},{"text":"This is odd, since sleep is a static method, so you can just do Thread.sleep(1000) for a static call (making sure to catch and handle InterruptedException","label":{"api":{"Thread.sleep(1000)":[[64,81]],"InterruptedException":[[134,153]]}}},{"text":"JOptionPane.showMessageDialog() is a static method call as is ImageIO.read()","label":{"api":{"JOptionPane.showMessageDialog()":[[0,30]],"ImageIO.read()":[[62,75]]}}},{"text":"new File() is a constructor call that returns a File object","label":{"api":{"File()":[[4,9]],"File":[[48,51]]}}},{"text":"You could use XSLT with Java Transformer API","label":{"api":{"Transformer":[[29,39]]}}},{"text":"Javafx Canvas for the Pane?Any good resources other than the java doc to read to learn how can I do this","label":{"api":{"Javafx Canvas":[[0,12]]}}},{"text":"Here's what I came to the end with Optional","label":{"api":{"Optional":[[35,42]]}}},{"text":"TreeSet allows us to give a comparator","label":{"api":{"TreeSet":[[0,6]]}}},{"text":"For keeping the count use a TreeMap","label":{"api":{"TreeMap":[[28,34]]}}},{"text":"If you have to store it in the application, you can also define that programmatically, by makeing use of \"ServletContext.getRealPath(\".\") to find out where your app is deployed, and then set the path to the file","label":{"api":{"ServletContext.getRealPath(\".\")":[[106,136]]}}},{"text":"Try using a TreeMap","label":{"api":{"TreeMap":[[12,18]]}}},{"text":"According to the URL documentation of Oracle though, it shouldn't","label":{"api":{}}},{"text":"Use Thread.join() in order to wait for your thread to end, then call getNetwork() in order to access the list your Thread just filled","label":{"api":{"Thread.join()":[[4,16]],"getNetwork()":[[69,80]],"Thread":[[115,120]]}}},{"text":"So you are using java's list built in isEmpty() method here","label":{"api":{"isEmpty()":[[38,46]]}}},{"text":"Whenever I had to check if the given parameters to a method are not null, I used to write a null check and throw a IllegalArgumentException if the null check fails","label":{"api":{"IllegalArgumentException":[[115,138]]}}},{"text":"However, by reading the source code of some Java 8 classes such as ArrayList, I found out that  Oracle  are using Objects.requireNonNull to check a parameter against a null value, and then, if the test fails, a NullPointerException is thrown","label":{"api":{"ArrayList":[[67,75]],"Objects.requireNonNull":[[114,135]],"NullPointerException":[[211,230]]}}},{"text":"Assuming that I have control of the whole exception handling of the system, (even that I shouldn't, sometimes it is part of the business to handle these unchecked exceptions), should I replace my IllegalArgumentException with NullPointerException and use Objects.requireNonNull instead of writing my own null checking and exception throwing","label":{"api":{"IllegalArgumentException":[[196,219]],"NullPointerException":[[226,245]],"Objects.requireNonNull":[[255,276]]}}},{"text":"I think the best solution is to combine your input streams with DataInputStream and then use readByte() method","label":{"api":{"DataInputStream":[[64,78]],"readByte()":[[93,102]]}}},{"text":"Because instances of Runnable are continually posted to the EventQueue, the risk of a failed read is small","label":{"api":{"Runnable":[[21,28]],"EventQueue":[[60,69]]}}},{"text":"For the case insensitivity, you should look at using the equalsIgnoreCase method provided by the String object","label":{"api":{"equalsIgnoreCase":[[57,72]],"String":[[97,102]]}}},{"text":"When the nextDouble method throws an InputMismatchException, it doesn't consume the bad input that caused the exception","label":{"api":{"nextDouble":[[9,18]],"InputMismatchException":[[37,58]]}}},{"text":"Here the Scanner API will tell you exactly what constructors are available for this class","label":{"api":{"Scanner":[[9,15]]}}},{"text":"The Locale constructor you use considers the unique argument you pass is the language","label":{"api":{"Locale":[[4,9]]}}},{"text":"Split the string, and use the other constructor, accepting a language and a country","label":{"api":{}}},{"text":"Note, that in Java 8, there is a whole host of Function types and with lambdas your code becomes","label":{"api":{"Function":[[47,54]]}}},{"text":"Thread.isInterrupted() doesn't clear the interrupted status of the thread","label":{"api":{"Thread.isInterrupted()":[[0,21]]}}},{"text":"The Process instance can help you manipulate the execution of your runtime through its InputStream and Outpustream","label":{"api":{"Process":[[4,10]],"InputStream":[[87,97]],"Outpustream":[[103,113]]}}},{"text":"The process instance has a waitFor() method that allows the current Thread to wait for the termination of the subprocess","label":{"api":{"waitFor()":[[27,35]],"Thread":[[68,73]]}}},{"text":"The hashCode function has to be compatible with the equals method in the sense that hashCode has to return the same value for 2 objects that are equal","label":{"api":{"hashCode":[[4,11],[84,91]],"equals":[[52,57]]}}},{"text":"I think you are looking for Math.E - javadoc here","label":{"api":{"Math.E":[[28,33]]}}},{"text":"Or Math.exp(double) which raises the e to the power of the double - javadoc here","label":{"api":{"Math.exp(double)":[[3,18]]}}},{"text":"You need to write a javax.servlet.ServletContextListener that uses javax.servlet.ServletContext.getServletContextName() to get the application name from the web.xml deployment descriptor","label":{"api":{"javax.servlet.ServletContextListener":[[20,55]],"javax.servlet.ServletContext.getServletContextName()":[[67,118]]}}},{"text":"You can then use this value in your own java.util.logging.Formatter implementation (perhaps derived from SimpleFormatter)","label":{"api":{"java.util.logging.Formatter":[[40,66]],"SimpleFormatter":[[105,119]]}}},{"text":"To format a float into a String with a certain number of decimal places, you would use the DecimalFormat class","label":{"api":{"float":[[12,16]],"String":[[25,30]],"DecimalFormat":[[91,103]]}}},{"text":"Unfortunately, I can't find any methods similar to first() and last()","label":{"api":{"first()":[[51,57]],"last()":[[63,68]]}}},{"text":"You may be looking for the setDefaultButton() method of JRootPane, shown here, in concert with the GTKLookAndFeel","label":{"api":{"setDefaultButton()":[[27,44]],"JRootPane":[[56,64]],"GTKLookAndFeel":[[99,112]]}}},{"text":"All those wrappers extend from the standard ServletRequestWrapper interface","label":{"api":{"ServletRequestWrapper":[[44,64]]}}},{"text":"Just cast to it, obtain the wrapped request via getRequest() method and test it instead","label":{"api":{"getRequest()":[[48,59]]}}},{"text":"You can even do it in a loop if it actually returned another ServletRequestWrapper implementation","label":{"api":{"ServletRequestWrapper":[[61,81]]}}},{"text":"More information in Java String class documentation","label":{"api":{"String":[[25,30]]}}},{"text":"In this case, you can also use AtomicInteger","label":{"api":{"AtomicInteger":[[31,43]]}}},{"text":"You can choose any format and add time or AM/PM, see more details of SimpleDateFormat","label":{"api":{"SimpleDateFormat":[[69,84]]}}},{"text":"JSF has several builtin converters for standard types like Integer which run automatically depending on the model value type","label":{"api":{"Integer":[[59,65]]}}},{"text":"ChartPanel inherits a FlowLayout from the parent class, JPanel, by default; a surrounding chartHolder with BoxLayout may be superfluous","label":{"api":{"ChartPanel":[[0,9]],"FlowLayout":[[22,31]],"JPanel":[[56,61]],"chartHolder":[[90,100]],"BoxLayout":[[107,115]]}}},{"text":"According to the JavaDocs for @OneToOne there are two use cases for having a one-to-one relationship between two normal (i.e., not embedded or component) entity classes","label":{"api":{"@OneToOne":[[30,38]]}}},{"text":"Just use Stream#anyMatch(...) with a Predicate that returns the value itself","label":{"api":{"Stream#anyMatch(...)":[[9,28]],"Predicate":[[37,45]]}}},{"text":"Also, if you need the timezone itself, see Class SimpleDateFormat","label":{"api":{"SimpleDateFormat":[[49,64]]}}},{"text":"I'm experimenting with Stream.reduce(), and have run into a snag with the type system","label":{"api":{"Stream.reduce()":[[23,37]]}}},{"text":"Stream.reduce() must return something of the same type as the source's elements, and","label":{"api":{"Stream.reduce()":[[0,14]]}}},{"text":"extends, but with the identity parameter to reduce()","label":{"api":{"reduce()":[[44,51]]}}},{"text":"The workaround is to use the three-argument reduce() method, which allows you to treat the result as a different type (even if it's not really)","label":{"api":{"reduce()":[[44,51]]}}},{"text":"Internally it will handle it as a for loop traversing the iterator of any collection, or any other implementation of the Iterable Interface","label":{"api":{"Iterable":[[121,128]]}}},{"text":"I have never used dynamic proxy to be honest, but coding against an interface and then determining the concrete type based on configuration is simply the inversion of control concept (or dependency injection) which is used in Spring and adopted by many other frameworks as well","label":{"api":{"Spring":[[226,231]]}}},{"text":"Stream.collect() also takes BiConsumers as arguments, but it's used less often than an iteration on map entries","label":{"api":{"Stream.collect()":[[0,15]],"BiConsumers":[[28,38]]}}},{"text":"You can always add a JPanel to your Container that has it's own Layout and its own child components","label":{"api":{"JPanel":[[21,26]],"Container":[[36,44]]}}},{"text":"As you can see from UUIDJavaDoc, the resulting timestamp is measured in 100-nanosecond units since midnight, October 15, 1582 UTC","label":{"api":{"UUIDJavaDoc":[[20,30]]}}},{"text":"Java provides a way to work around this by letting BigDecimal parse the scientific notation for you, and then converting the value to BigInteger using toBigInteger method","label":{"api":{"BigDecimal":[[51,60]],"BigInteger":[[134,143]],"toBigInteger":[[151,162]]}}},{"text":"Conversion to scientific notation can be done by constructing BigDecimal using a constructor that takes BigInteger","label":{"api":{"BigDecimal":[[62,71]],"BigInteger":[[104,113]]}}},{"text":"You should implements the comparable class in your Fruit by either using instanceof or by having the specific implementation for each subclass","label":{"api":{"comparable":[[26,35]],"Fruit":[[51,55]]}}},{"text":"Another option would be defining a comparator for example","label":{"api":{"comparator":[[35,44]]}}},{"text":"Spring Data JPA hands out what is called a shared EntityManager when the @PersistenceContext annotation is used (without any attributes)","label":{"api":{"Spring Data JPA":[[0,14]],"EntityManager":[[50,62]],"@PersistenceContext":[[73,91]]}}},{"text":"The annotation @PersistenceContext has a type attribute that can be set to one of PersistenceContextType.EXTENDED or PersistenceContextType.TRANSACTION, with the later being the default","label":{"api":{"@PersistenceContext":[[15,33]],"PersistenceContextType.EXTENDED":[[82,112]],"PersistenceContextType.TRANSACTION":[[117,150]]}}},{"text":"Therefore, the default @PersistenceContext causes SharedEntityManagerCreator to look for a transaction and bail out if none is found","label":{"api":{"@PersistenceContext":[[23,41]],"SharedEntityManagerCreator":[[50,75]]}}},{"text":"You may want to consider switching to a HashSet object to store your candidate Strings","label":{"api":{"HashSet":[[40,46]],"String":[[79,84]]}}},{"text":"The reason you're seeing that come across is due to that being the way the object is represented in Class#getName","label":{"api":{"Class#getName":[[100,112]]}}},{"text":"You can read the whole http request as an input and \"decode\" the headers on your own, using getInputStream() if the request is POST, or getRequestURL() if it's a GET request","label":{"api":{"getInputStream()":[[92,107]],"getRequestURL()":[[136,150]]}}},{"text":"However, the method getParameter() has been implemented to do those things, and I do not think that this function could be further optimized","label":{"api":{"getParameter()":[[20,33]]}}},{"text":"If you use http://docs.oracle.com/javase/7/docs/api/javax/xml/stream/XMLStreamWriter.html#writeDTD(java.lang.String) you can write out the DOCTYPE node you need","label":{"api":{}}},{"text":"You can extract the node with styleclass .track from the ProgressBar by using lookup( ) on it and then apply style to it","label":{"api":{".track":[[41,46]],"ProgressBar":[[57,67]],"lookup( )":[[78,86]]}}},{"text":"First is one that is provided in java doc of lock","label":{"api":{"lock":[[45,48]]}}},{"text":"Thread is a good example","label":{"api":{"Thread":[[0,5]]}}},{"text":"To get a Thread to work you can let your class extends Thread and then start() an instance of this class","label":{"api":{"Thread":[[9,14],[55,60]],"start()":[[71,77]]}}},{"text":"Another common possibility to start a thread (especially with the advent of Java 8 and lambdas) is to pass a Runnable as an argument to the Thread-constructor","label":{"api":{"Runnable":[[109,116]]}}},{"text":"You can return an unmodifiable view of the list with Collections.unmodifiableList","label":{"api":{"Collections.unmodifiableList":[[53,80]]}}}]