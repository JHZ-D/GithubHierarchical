[{"text":"Stream has a function called anyMatch that can clean up your filter a bit","label":{"api":{"Stream":[[0,5]],"anyMatch":[[29,36]]}}},{"text":"This can also be done with Map.computeIfAbsent() if the above is too wordy for your tastes","label":{"api":{"Map.computeIfAbsent()":[[27,47]]}}},{"text":"Map::compute is probably what you're looking for","label":{"api":{"Map::compute":[[0,11]]}}},{"text":"You can use Map#merge like this","label":{"api":{"Map#merge":[[12,20]]}}},{"text":"But when looking at the TemporalAmount interface","label":{"api":{"TemporalAmount":[[24,37]]}}},{"text":"it seems that instances of TemporalAmount aren't \"signed\"","label":{"api":{"TemporalAmount":[[27,40]]}}},{"text":"simply by looking at concrete implementations of that interface, namely Duration","label":{"api":{"Duration":[[72,79]]}}},{"text":"That class actually offers negated() to well, negate a Duration instance","label":{"api":{"negated()":[[27,35]],"Duration":[[55,62]]}}},{"text":"Therefore the above implementation already works, when passing a negative Duration","label":{"api":{"Duration":[[74,81]]}}},{"text":"ArrayList inherits sort from List","label":{"api":{"ArrayList":[[0,8]],"sort":[[19,22]],"List":[[29,32]]}}},{"text":"It expects a Comparator that can compare list entries via its compare method","label":{"api":{"Comparator":[[13,22]],"compare":[[62,68]]}}},{"text":"The JavaDoc for compare says","label":{"api":{"compare":[[16,22]]}}},{"text":"sort calls the comparator's compare repeatedly with pairs of values, and uses those return values to sort the list","label":{"api":{"sort":[[0,3]],"omparator":[[16,24]],"compare":[[28,34]]}}},{"text":"A good example can be found in JMS Connection#setExceptionListener(), (ref.link), which offers notification hook in the ExceptionListener","label":{"api":{"JMS Connection#setExceptionListener()":[[31,67]],"ExceptionListener":[[120,136]]}}},{"text":"The closest example I've found so far is described in this PostgreSQL documentation (ref.link), which uses asynchronous thread(s) to test/poll JDBC connection","label":{"api":{}}},{"text":"The regular way to define a custom ordering in Java is via a Comparator instance","label":{"api":{"Comparator":[[61,70]]}}},{"text":"This object can be plugged into the sorting routines of eg Arrays or Collections","label":{"api":{"Arrays":[[59,64]],"Collections":[[69,79]]}}},{"text":"I would just convert the OffsetDateTime to an Instant and then use toEpochMilli","label":{"api":{"OffsetDateTime":[[25,38]],"toEpochMilli":[[67,78]]}}},{"text":"You should use java.time types instead of Date and Calendar, which are considered legacy types since Java 8","label":{"api":{"java.time":[[15,23]],"Date":[[42,45]],"Calendar":[[51,58]]}}},{"text":"The only change I would make to your second solution is to replace the boolean[] with a BitSet, which is similar to a boolean[] but more space-efficient as it uses just one bit per element","label":{"api":{"boolean[]":[[71,79],[118,126]],"BitSet":[[88,93]]}}},{"text":"For example, using ListIterator","label":{"api":{"ListIterator":[[19,30]]}}},{"text":"Secondly, you can change the TableModel of the second JTable, by using setModel() method passing a DefaultTableModel","label":{"api":{"TableModel":[[29,38]],"JTable":[[54,59]],"setModel()":[[71,80]],"DefaultTableModel":[[99,115]]}}},{"text":"The exception is thrown in DefaultHttpClient class in a method named channelRead0","label":{"api":{"DefaultHttpClient":[[27,43]],"channelRead0":[[69,80]]}}},{"text":"If you don't like it, you can always use good old built-in HttpURLConnection, a new HttpClient from Java 9 or something 3rd party like OkHttp","label":{"api":{"HttpURLConnection":[[59,75]],"HttpClient":[[84,93]],"OkHttp":[[135,140]]}}},{"text":"The read() method has returned a Java char value, which is an unsigned 2-byte binary number (0-65535)","label":{"api":{"read()":[[4,9]]}}},{"text":"I think the issue is that the underlying javax.servlet.http.Cookie does not support the SameSite attribute, let alone the new None value","label":{"api":{"javax.servlet.http.Cookie":[[41,65]],"SameSite":[[88,95]],"None":[[126,129]]}}},{"text":"Instead you can set this directly as a header, assuming your response is an instance of javax.servlet.http.HttpServletResponse","label":{"api":{"javax.servlet.http.HttpServletResponse":[[88,125]]}}},{"text":"When trying to inject a class which is in the java.lang namespace via java.lang.instrument.Instrumentation#appendToBootstrapClassLoaderSearch  on a OpenJDK 11, nothing happens and no error is thrown","label":{"api":{"java.lang":[[46,54]],"java.lang.instrument.Instrumentation#appendToBootstrapClassLoaderSearch":[[70,140]]}}},{"text":"Since you're referring to a IntBuffer, then","label":{"api":{"IntBuffer":[[28,36]]}}},{"text":"The javadoc of get() says","label":{"api":{"get()":[[15,19]]}}},{"text":"If the if statement is true, then rewind() is called, and javadoc says","label":{"api":{"rewind()":[[34,41]]}}},{"text":"You can use a loop, or a Java utility class Arrays.copyOf or System.arraycopy","label":{"api":{"Arrays.copyOf":[[44,56]],"System.arraycopy":[[61,76]]}}},{"text":"java.nio.file.Paths was introduced in Java 7","label":{"api":{"java.nio.file.Paths":[[0,18]]}}},{"text":"Use String.split with a limit","label":{"api":{"String.split":[[4,15]]}}},{"text":"The Class class itself provides the a method called getInterfaces() which according to the JavaDoc","label":{"api":{"Class":[[4,8]],"getInterfaces()":[[52,66]]}}},{"text":"the javadoc of interrupt()","label":{"api":{"interrupt()":[[15,25]]}}},{"text":"and sleep(long millis)","label":{"api":{"sleep(long millis)":[[4,21]]}}},{"text":"Added prefix My to avoid confusion with built-in class named Class","label":{"api":{"Class":[[61,65]]}}},{"text":"Otherwise, take a look at Map.merge() or the corresponding Collectors.toMap() overload","label":{"api":{"Map.merge()":[[26,36]],"Collectors.toMap()":[[59,76]]}}},{"text":"You will probably be much better off initializing an InputMismatchException with a message, and using its getMessage method to extract the relevant information in the catch statement","label":{"api":{"InputMismatchException":[[53,74]],"getMessage":[[106,115]]}}},{"text":"The easiest way would be to stream the List and use Collectors#groupingBy and Collectors#mapping","label":{"api":{"List":[[39,42]],"Collectors#groupingBy":[[52,72]],"Collectors#mapping":[[78,95]]}}},{"text":"It happens because you initialize an instance level variable as an instance of the class where it is defined itself which results in the endless recursion and the JVM throws the StackOverflowError","label":{"api":{"StackOverflowError":[[178,195]]}}},{"text":"am not sure if it fits the bill, java.net.InetAddress uses dns resolution (domain to ip translation) cache","label":{"api":{"java.net.InetAddress":[[33,52]]}}},{"text":"The tf you see referenced above is just a variable I use to refer to the CellDataFeatures object in Java which we can use to get a reference to that row's data model object (using the getValue() method)","label":{"api":{"CellDataFeatures":[[73,88]],"getValue()":[[184,193]]}}},{"text":"However, you can obtain a localized DateTimeFormatter pattern, and strip the year from that","label":{"api":{"DateTimeFormatter":[[36,52]]}}},{"text":"From List docs","label":{"api":{"List":[[5,8]]}}},{"text":"java.net.http first appeared in Java 11 and you are trying to compile your code for Java 8 (sourceCompatibility = 1.8)","label":{"api":{"java.net.http":[[0,12]]}}},{"text":"According to the documentation ReentrantLock.getOwner() is protected","label":{"api":{"ReentrantLock.getOwner()":[[31,54]]}}},{"text":"In this case the size of the list is exceeded so IndexOutOfBoundsException is thrown","label":{"api":{"IndexOutOfBoundsException":[[49,73]]}}},{"text":"You may build such pattern using DateTimeFormatterBuilder","label":{"api":{"DateTimeFormatterBuilder":[[33,56]]}}},{"text":"to then use System.arraycopy to copy all bytes from b to that new array, at the position you want them to show up","label":{"api":{"System.arraycopy":[[12,27]]}}},{"text":"Set the positive prefix and negative prefix of the DecimalFormat","label":{"api":{"DecimalFormat":[[51,63]]}}},{"text":"You can do this in your format string for DecimalFormat","label":{"api":{"DecimalFormat":[[42,54]]}}},{"text":"Have you tried using ImageIcon.getIconHeight and ImageIcon.getIconWidth","label":{"api":{"ImageIcon.getIconHeight":[[21,43]],"ImageIcon.getIconWidth":[[49,70]]}}},{"text":"Additionally, if you have a fixed-size view, you might consider using ImageIcon.getImage followed by Image.getScaledInstance","label":{"api":{"ImageIcon.getImage":[[70,87]],"Image.getScaledInstance":[[101,123]]}}},{"text":"Since you already have an ImageIcon instance, you can simply use its getIconHeight() and getIconWidth() methods to get these values","label":{"api":{"ImageIcon":[[26,34]],"getIconHeight()":[[69,83]],"getIconWidth()":[[89,102]]}}},{"text":"I would use CharSequence::codePoints to get an IntStream of the code points and map them to strings, and then collect them, concatenating to a single string","label":{"api":{"CharSequence::codePoints":[[12,35]],"IntStream":[[47,55]]}}},{"text":"Assuming you have Java 8 or later, use the Base64 class to decode into a byte[]","label":{"api":{"Base64":[[43,48]]}}},{"text":"You can use anyMatch on the inner stream","label":{"api":{"anyMatch":[[12,19]]}}},{"text":"Thus it can't be mapped to ArrayList<BaseContact>","label":{"api":{"ArrayList<BaseContact>":[[27,48]]}}},{"text":"You may want to trim the word in the first place, so you no longer have spaces before the first character and after the last one, and then you could start splitting","label":{"api":{}}},{"text":"Because it is java.lang.String","label":{"api":{"java.lang.String":[[14,29]]}}},{"text":"There is no String in java.util","label":{"api":{"String":[[12,17]],"java.util":[[22,30]]}}},{"text":"For an immutable vector class, however, you need to clone the vector","label":{"api":{"vector":[[17,22]]}}},{"text":"You invoked startCustomThread method twice so you have started 2 Threads","label":{"api":{"startCustomThread":[[12,28]]}}},{"text":"From Thread docs","label":{"api":{"Thread":[[5,10]]}}},{"text":"According to the web, the value of KeyEvent.VK_DOWN matches the Win32 definition (40)","label":{"api":{"KeyEvent.VK_DOWN":[[35,50]]}}},{"text":"In the code you linked to from your question, your LinkedList class is not generic","label":{"api":{"LinkedList":[[51,60]]}}},{"text":"However, since your LinkedList class contains only Nodes, you should rather just make your Node class generic","label":{"api":{"LinkedList":[[20,29]],"Nodes":[[51,55]],"Node":[[91,94]]}}},{"text":"By the way, I suggest renaming your LinkedList class since there is already such a class in the standard java library of classes","label":{"api":{"LinkedList":[[36,45]]}}},{"text":"You won't need to sort after doing this, because IntStream.rangeClosed promises that all the elements from the IntStream will be provided in sorted order","label":{"api":{"IntStream.rangeClosed":[[49,69]],"IntStream":[[111,119]]}}},{"text":"Instead, use SwingUtilities.invokeLater, like so","label":{"api":{"SwingUtilities.invokeLater":[[13,38]]}}},{"text":"Using File#listFiles can give you a list of files (in form of an array) in a directory","label":{"api":{"File#listFiles":[[6,19]]}}},{"text":"You can wrap it in a Number class","label":{"api":{"Number":[[21,26]]}}},{"text":"The javadoc of Instrumentation.redefineClasses does not tell whether it support concurrency or not","label":{"api":{"Instrumentation.redefineClasses":[[15,45]]}}},{"text":"Since the NullPointerException is wrapped in an InvocationTargetException, the actual source has to lie somewhere in the constructor that is called, according to Oracle Docs","label":{"api":{"NullPointerException":[[10,29]],"InvocationTargetException":[[48,72]]}}},{"text":"Thread B could try to acquire the lock by Lock.tryLock","label":{"api":{"Lock.tryLock":[[42,53]]}}},{"text":"Looking at the API docs for BytesMessage might reveal a possible way to do that","label":{"api":{"BytesMessage":[[28,39]]}}},{"text":"That method has nothing to do with the Process;  it is the inherited Object.wait method, which is used for cooperation between multiple threads","label":{"api":{"Process":[[39,45]],"Object.wait":[[69,79]]}}},{"text":"It still works, since the Collection returned by values is backed by the map","label":{"api":{"Collection":[[26,35]],"map":[[73,75]]}}},{"text":"Simply use Stream::noneMatch for your nested Stream","label":{"api":{"Stream::noneMatch":[[11,27]],"Stream":[[45,50]]}}},{"text":"You can iterate through this since it represents a set","label":{"api":{"set":[[51,53]]}}},{"text":"The set is iterable","label":{"api":{"set":[[4,6]]}}},{"text":"For Java, this probably means \"Can you open the channel with an AudioFormat that includes 4 channels\"","label":{"api":{"AudioFormat":[[64,74]]}}},{"text":"file string, and a Set<String> of discarded user IDs and then use removeAll function to remove all discarded users","label":{"api":{"Set<String>":[[19,29]],"removeAll":[[66,74]]}}},{"text":"For the TimeZone API - https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html#getTimeZone(java.lang.String), where can I find the list of IDs which can be used as parameter here","label":{"api":{"TimeZone":[[8,15]]}}},{"text":"On the other hand, if you don't have a sorted list, just use Collection.removeAll, which has a time complexity of O(M*N) in this case","label":{"api":{"Collection.removeAll":[[61,80]]}}},{"text":"You can find an AbstractCollection.removeAll implementation here","label":{"api":{"AbstractCollection.removeAll":[[16,43]]}}},{"text":"If I were you, I'd just use Stream#of for all Map#values, and then call Stream#flatMap and Stream#collect to transform it to a List","label":{"api":{"Stream#of":[[28,36]],"Map#values":[[46,55]],"Stream#flatMap":[[72,85]],"Stream#collect":[[91,104]],"List":[[127,130]]}}},{"text":"Consider using a Set (for example HashSet) instead of List for picks as HashSet::contains is O(1)","label":{"api":{"Set":[[17,19]],"HashSet":[[34,40]],"List":[[54,57]],"HashSet::contains":[[72,88]]}}},{"text":"I use HttpServletRequest class in Java that has getCookies()","label":{"api":{"HttpServletRequest":[[6,23]],"getCookies()":[[48,59]]}}},{"text":"Is there a built in method to convert the output of getCookies() to string","label":{"api":{"getCookies()":[[52,63]]}}},{"text":"You can combine multiple Comparator<T>s into a single Comparator<T> (with more complicated logic) using Comparator.thenComparing (and its primitive counterparts) to achieve what you want","label":{"api":{"Comparator<T>s":[[25,38]],"Comparator<T>":[[54,66]],"Comparator.thenComparing":[[104,127]]}}},{"text":"Oh, no, there is a handy IntSummaryStatistics#getAverage","label":{"api":{"IntSummaryStatistics#getAverage":[[25,55]]}}},{"text":"An easier API without this limitation is offered by channel.getIterableHistory().takeAsync(amount) which returns a CompletableFuture and can be combined with thenAccept","label":{"api":{"channel.getIterableHistory().takeAsync(amount)":[[52,97]],"CompletableFuture":[[115,131]],"thenAccept":[[158,167]]}}},{"text":"Shut down the executor, then await for its termination, then finally close the logger","label":{"api":{"executor":[[14,21]]}}},{"text":"You can set this with setRequestMethod","label":{"api":{"setRequestMethod":[[22,37]]}}},{"text":"You can set them with setRequestProperty","label":{"api":{"setRequestProperty":[[22,39]]}}},{"text":"This is done by setting the Content-Type header using the setRequestProperty method, just like the other headers","label":{"api":{"setRequestProperty":[[58,75]]}}},{"text":"The URLEncoder class exists for this purpose","label":{"api":{"URLEncoder":[[4,13]]}}},{"text":"Note that if it is possible for different threads to modify the individual LockerControl instances, look into concurrency and/or Atomic Integer, Atomic Boolean classes","label":{"api":{"LockerControl":[[75,87]],"Atomic Integer":[[129,142]],"Atomic Boolean":[[145,158]]}}},{"text":"You can use ClassLoader.getResources() to find all resources of a given name, when they exist in multiple jar files","label":{"api":{"ClassLoader.getResources()":[[12,37]]}}},{"text":"This is even promoted way to do it described in OpenJDK 13 docs)","label":{"api":{}}},{"text":"I refer to ObjectStreamConstants.STREAM_MAGIC in the interface ObjectStreamConstants, which is defined in the JDK source like so","label":{"api":{"ObjectStreamConstants.STREAM_MAGIC":[[11,44]],"ObjectStreamConstants":[[63,83]]}}},{"text":"My best guess at the error, is that the jar file contains a ServiceLoader file in the META-INF/services/ folder, which lists the 2 classes in the error message","label":{"api":{"ServiceLoader":[[60,72]]}}},{"text":"I'm looking for a class implementing HttpHandler and providing a WebSocket implementation","label":{"api":{"HttpHandler":[[37,47]],"WebSocket":[[65,73]]}}},{"text":"Split your String by space, create a LinkedHashSet out of it - this will remove duplicates and preserve element order (since Set does not allow duplicate values and it uses Object::equals and Object::hashCode methods for it","label":{"api":{"String":[[11,16]],"LinkedHashSet":[[37,49]],"Set":[[125,127]],"Object::equals":[[173,186]],"Object::hashCode":[[192,207]]}}},{"text":"LinkedHashSet also preserves element adding order)","label":{"api":{"LinkedHashSet":[[0,12]]}}},{"text":"You can use AtomicInteger as Integer wrapper","label":{"api":{"AtomicInteger":[[12,24]]}}},{"text":"You can use an IntStream to solve this","label":{"api":{"IntStream":[[15,23]]}}},{"text":"You create an IntStream from 0 to list.size() - 1 (IntStream.range() excludes the last value from the stream) and map each index to the value in your list","label":{"api":{"IntStream":[[14,22]],"list.size()":[[34,44]],"IntStream.range()":[[51,67]]}}},{"text":"Use a NavigableMap interface (implemented by TreeMap, a red-black tree)","label":{"api":{"NavigableMap":[[6,17]],"TreeMap":[[45,51]]}}},{"text":"The methods of NavigableMap, like subMap(), are designed to work this way, and it's a good practice when you are working with intervals of any quantity, as it's easy to define a sequence of intervals without overlap or gaps","label":{"api":{"NavigableMap":[[15,26]],"subMap()":[[34,41]]}}},{"text":"Read the documentation of Platform.exit()","label":{"api":{"Platform.exit()":[[26,40]]}}},{"text":"I am trying to import the Java Instrumentation library (java.lang.instrument) https://docs.oracle.com/javase/7/docs/api/java/lang/instrument/Instrumentation.html in my Android Studio project but it is complaining that it isn't able to find it","label":{"api":{"java.lang.instrument":[[56,75]]}}},{"text":"Then it's just a question of calling Stream.anyMatch with that predicate","label":{"api":{"Stream.anyMatch":[[37,51]]}}},{"text":"removeEldestEntry is called after put or putAll (source), when you put something for the first time the value of size() in removeEldestEntry is 1, which is larger than size which is 0","label":{"api":{"removeEldestEntry":[[0,16],[123,139]],"put":[[34,36]],"putAll":[[41,46]],"size()":[[113,118]]}}},{"text":"Better work with the frame content pane","label":{"api":{"frame content pane":[[21,38]]}}},{"text":"In addition to the doFinal-call an update-call is performed in the encryptWithGCM-method","label":{"api":{"doFinal":[[19,25]],"update":[[35,40]],"encryptWithGCM":[[67,80]]}}},{"text":"The update-call must either be removed or the result must be concatenated with the result of the doFinal-call (resulting in a double plaintext when decrypted)","label":{"api":{"update":[[4,9]],"doFinal":[[97,103]]}}},{"text":"In the doFinal-call of the decryptWithGCM-method encryptedText.getBytes() is used","label":{"api":{"doFinal":[[7,13]],"decryptWithGCM":[[27,40]],"encryptedText.getBytes()":[[49,72]]}}},{"text":"For details, see this Javadoc for details on that constructor","label":{"api":{}}},{"text":"Your current object is an instance of the Runnable interface (you should be able to check that by checking out the code where the class starts)","label":{"api":{"Runnable":[[42,49]]}}},{"text":"That's because the code inside orElse() will be always evaluated","label":{"api":{"orElse()":[[31,38]]}}},{"text":"In other words it will be executed even if you specify a non-empty Optional, so that's why the Exception will be thrown","label":{"api":{"Optional":[[67,74]],"Exception":[[95,103]]}}},{"text":"If you check the orElse() section of Java Optional – orElse() vs orElseGet() article, you can see that in their example, where it says","label":{"api":{"orElse()":[[17,24],[53,60]],"Optional":[[42,49]],"orElseGet()":[[65,75]]}}},{"text":"We can easily infer that the parameter of orElse() is evaluated even when having a non-empty Optional","label":{"api":{"orElse()":[[42,49]],"Optional":[[93,100]]}}},{"text":"For example it offers a method destroy()","label":{"api":{"destroy()":[[31,39]]}}},{"text":"You can use the ScriptEngine API to evaluate JS scripts","label":{"api":{"ScriptEngine":[[16,27]]}}},{"text":"Source from the docs that explains ChronoUnit.DAYS is an estimation","label":{"api":{"ChronoUnit.DAYS":[[35,49]]}}},{"text":"In addition to the other answers, you would likely be better off using an ArrayList if you're planning on adding integers to it dynamically","label":{"api":{"ArrayList":[[74,82]]}}},{"text":"You can use one of the existing implementations like AbstractMap.SimpleEntry","label":{"api":{"AbstractMap.SimpleEntry":[[53,75]]}}},{"text":"Specifically, java.util.Date is replaced by java.time.Instant","label":{"api":{"java.util.Date":[[14,27]],"java.time.Instant":[[44,60]]}}},{"text":"I'd say that the idiomatic approach for that case would be to throw an IllegalArgumentException, which is a built-in runtime exception","label":{"api":{"IllegalArgumentException":[[71,94]]}}},{"text":"You can use eiter a TreeMap, which is sorted by natural ordering of its keys, or by a predefined comparator or a LinkedHashMap, which is sorted by insertion order","label":{"api":{"TreeMap":[[20,26]],"LinkedHashMap":[[113,125]]}}},{"text":"Using a TreeMap you need to change your code just a little bit to get correct result","label":{"api":{"TreeMap":[[8,14]]}}},{"text":"Use the getValue() method of JFormattedTextField","label":{"api":{"getValue()":[[8,17]],"JFormattedTextField":[[29,47]]}}},{"text":"If you are assuming the image is grayscale, it’s probably easier to call getRGB and divide one of its components","label":{"api":{"getRGB":[[73,78]]}}},{"text":"The API documentation of StandardOpenOption.CREATE_NEW says","label":{"api":{"StandardOpenOption.CREATE_NEW":[[25,53]]}}},{"text":"If you want to query the database using whereLessThanOrEqualTo() you can simply pass as the second argument a Date object","label":{"api":{"whereLessThanOrEqualTo()":[[40,63]],"Date":[[110,113]]}}},{"text":"From the java/lang/InterruptedException documentation its not clear to me if by standards it should be another thread that should interrupt or if its okay for a thread to throw this exception for itself","label":{"api":{"java/lang/InterruptedException":[[9,38]]}}},{"text":"The Javadoc for InterruptedException states","label":{"api":{"InterruptedException":[[16,35]]}}},{"text":"Being interrupted is a result of Thread.interrupt() being called on your running thread, which is not what's happening in the code you posted","label":{"api":{"Thread.interrupt()":[[33,50]]}}},{"text":"Java has an attribute within their StringBuffer class called setLength that allows one to set a fixed length to a variable","label":{"api":{"StringBuffer":[[35,46]],"setLength":[[61,69]]}}},{"text":"Instead of java.lang.ProcessImpl use the abstract class (\"interface\") java.lang.Process","label":{"api":{"java.lang.ProcessImpl":[[11,31]],"java.lang.Process":[[70,86]]}}},{"text":"This is also documented","label":{"api":{}}},{"text":"String#trim method also removes \\t","label":{"api":{"String#trim":[[0,10]]}}},{"text":"If performance matters for you or if you have a very large list I would recommend using a StringBuilder and Java Streams to collect all numbers","label":{"api":{"StringBuilder":[[90,102]],"Streams":[[113,119]]}}},{"text":"To get the final result we can use StringBuilder.substring() to cut off the first white space","label":{"api":{"StringBuilder.substring()":[[35,59]]}}},{"text":"To improve the performance on large lists you can also use List.parallelStream() or Stream.parallel() to create a parallel stream","label":{"api":{"List.parallelStream()":[[59,79]],"Stream.parallel()":[[84,100]]}}},{"text":"Just a guess, but a MessageProducer extends AutoClosable, suggesting it to be closed after it is no longer of use","label":{"api":{"MessageProducer":[[20,34]],"AutoClosable":[[44,55]]}}},{"text":"Since you've got a Map<String, String>, Map#getOrDefault could be an option","label":{"api":{"Map<String, String>":[[19,37]],"Map#getOrDefault":[[40,55]]}}},{"text":"If I understand correctly, a simple call to ifPresent should work","label":{"api":{"ifPresent":[[44,52]]}}},{"text":"It doesn't matter what you do with the optional (whether you cast it or not), because ifPresent accepts a \"function\" as its parameter","label":{"api":{"ifPresent":[[86,94]]}}},{"text":"StringBuffer extends Object class directly and it does not override hashCode from Object class","label":{"api":{"StringBuffer":[[0,11]],"Object":[[21,26],[82,87]],"hashCode":[[68,75]]}}},{"text":"So the implementation of StringBuffer::hashCode is the same as for Object::hashCode","label":{"api":{"StringBuffer::hashCode":[[25,46]],"Object::hashCode":[[67,82]]}}},{"text":"But just going deeper into data-structures in Java, I have found out that the LinkedList implementation has a getLast() method that is not implemented (I suppose for some reason) in the ArrayList implementation","label":{"api":{"LinkedList":[[78,87]],"getLast()":[[110,118]],"ArrayList":[[186,194]]}}},{"text":"If you need to do something with every value in the ConcurrentHashMap, you have many choices","label":{"api":{"ConcurrentHashMap":[[52,68]]}}},{"text":"Collections.unmodifiableMap returns a Map<K,V> so you would have to use it like this","label":{"api":{"Collections.unmodifiableMap":[[0,26]],"Map<K,V>":[[38,45]]}}},{"text":"because Collections.unmodifiableMap returns instance of private static UnmodifiableMap so you will get a ClassCastException","label":{"api":{"Collections.unmodifiableMap":[[8,34]],"UnmodifiableMap":[[71,85]],"ClassCastException":[[105,122]]}}},{"text":"And then use the object returned from Collections.unmodifiableMap as Map","label":{"api":{"Collections.unmodifiableMap":[[38,64]]}}},{"text":"The easiest way to do this would be to extend AbstractMap, and delegate to an actual LinkedHashMap","label":{"api":{"AbstractMap":[[46,56]],"LinkedHashMap":[[85,97]]}}},{"text":"When you use a ExecutorService you need to call the ExecutorService.shutdown() after all tasks are submitted, then you need to wait for the pool to shut down by calling ExecutorService.awaitTermination() and supply the time to wait as parameters","label":{"api":{"ExecutorService":[[15,29]],"ExecutorService.shutdown()":[[52,77]],"ExecutorService.awaitTermination()":[[169,202]]}}},{"text":"In the finally section call shutdown() to initiate a orderly shut down of the threads in the pool and as the shutdown call is not blocking the awaitTermination() has to be called for the calling thread to wait for the shut down process to finish","label":{"api":{"shutdown()":[[28,37]],"shutdown":[[109,116]],"awaitTermination()":[[143,160]]}}},{"text":"For the desktop, the way to go is to generate the data, acquire a SourceDataLine, open and start the line and then write your data to it","label":{"api":{"SourceDataLine":[[66,79]]}}},{"text":"It's important that the line is suitable for the AudioFormat you have chosen to generate","label":{"api":{"AudioFormat":[[49,59]]}}},{"text":"The strings your code is producing are the string versions of the ArrayList<Character>, because you're using its toString","label":{"api":{"ArrayList<Character>":[[66,85]],"oString":[[114,120]]}}},{"text":"Or use a StringBuilder instead of the ArrayList<Character>, or..","label":{"api":{"StringBuilder":[[9,21]],"ArrayList<Character>":[[38,57]]}}},{"text":"Use Map::computeIfPresent instead","label":{"api":{"Map::computeIfPresent":[[4,24]]}}},{"text":"It can be substituted by single usage of Map::merge","label":{"api":{"Map::merge":[[41,50]]}}},{"text":"Is there a way to obtain the file attributes (specifically, the file key) of an already-open file channel","label":{"api":{"file":[[29,32]]}}},{"text":"If I know a path of the file, I can call Files.readAttributes(…), but this still has a race condition on systems where open files can be deleted or renamed","label":{"api":{"Files.readAttributes(…)":[[41,63]]}}},{"text":"You can tell from the method documentation","label":{"api":{}}},{"text":"You can use MessageFormat like so","label":{"api":{"MessageFormat":[[12,24]]}}},{"text":"There is no standard to represent NaN and INFINITY in neither the Graphql and also in JSON","label":{"api":{"NaN":[[34,36]],"INFINITY":[[42,49]]}}},{"text":"After that you can submit a specific task to a ExecutorService that handels the execution of the \"input reading\" seperately from the main Thread","label":{"api":{"ExecutorService":[[47,61]]}}},{"text":"You will get a Future on which you can define a timeout","label":{"api":{"Future":[[15,20]]}}},{"text":"Instead use PreparedStatement to avoid SQL njection attacks","label":{"api":{"PreparedStatement":[[12,28]]}}},{"text":"Is there a place in the JDBC API to interrogate a JDBC driver as to the version of JDBC it supports","label":{"api":{"JDBC":[[24,27]],"JDBC driver":[[50,60]]}}},{"text":"I found Driver::jdbcCompliant, but that is simply boolean, with no indication of with which version the driver is compliant","label":{"api":{"Driver::jdbcCompliant":[[8,28]]}}},{"text":"I found Driver::getMajorVersion & getMinorVersion","label":{"api":{"Driver::getMajorVersion":[[8,30]],"getMinorVersion":[[34,48]]}}},{"text":"If you want to avoid boxing values to Integer and you want to get primitive integer directly use IntStream::concat and and IntStream::of","label":{"api":{"Integer":[[38,44]],"IntStream::concat":[[97,113]],"IntStream::of":[[123,135]]}}},{"text":"Have a look in the documentation of FXMLLoader","label":{"api":{"FXMLLoader":[[36,45]]}}},{"text":"You can load a FXML-File using the load(InputStream) Method","label":{"api":{"load(InputStream)":[[35,51]]}}},{"text":"Both noneMatch and anyMatch are short-circuiting stream operations","label":{"api":{"noneMatch":[[5,13]],"anyMatch":[[19,26]]}}},{"text":"The only difference is that noneMatch will return false on a match and anyMatch will return true","label":{"api":{"noneMatch":[[28,36]],"anyMatch":[[71,78]]}}},{"text":"Your negating the result from anyMatch makes the two expressions logically equivalent","label":{"api":{"anyMatch":[[30,37]]}}},{"text":"NumberFormat.format() (see this) returns a String, not an int/long/double/or similar","label":{"api":{"NumberFormat.format()":[[0,20]],"String":[[43,48]],"int":[[58,60]],"long":[[62,65]],"double":[[67,72]]}}},{"text":"Arrays.hashCode(double[]) is specified to return the equivalent value of a List containing Double values representing the same numeric value","label":{"api":{"Arrays.hashCode(double[])":[[0,24]],"List":[[75,78]],"Double":[[91,96]]}}},{"text":"List.hashCode in turn is specified with a fairly simple algorithm","label":{"api":{"List.hashCode":[[0,12]]}}},{"text":"You can use Streams","label":{"api":{"Stream":[[12,17]]}}},{"text":"This will result in the List","label":{"api":{"List":[[24,27]]}}},{"text":"You can take an input Set having the keys to query for and use stream operations Stream#filter and Stream#map to filter and map the results and finally collect the values into a list","label":{"api":{"Set":[[22,24]],"Stream#filter":[[81,93]],"Stream#map":[[99,108]]}}},{"text":"As another example, take Java's OutputStream","label":{"api":{"OutputStream":[[32,43]]}}},{"text":"In your program you can write to an OutputStream that the caller passes in","label":{"api":{"OutputStream":[[36,47]]}}},{"text":"send it over the network or save it to a file or pipe it into another program","label":{"api":{}}},{"text":"Zip it or encrypt it before doing so","label":{"api":{}}},{"text":"The caller can do that by passing you a different OutputStream, and your code does not need to change to handle network I/O, compression, or encryption","label":{"api":{"OutputStream":[[50,61]]}}},{"text":"Tests can pass a ByteArrayOutputStream to capture your program's output","label":{"api":{"ByteArrayOutputStream":[[17,37]]}}},{"text":"However, you could try to use https://docs.oracle.com/javase/8/docs/api/java/lang/management/ThreadMXBean.html to find the CPU usage of all threads and filter those out that are not interesting to you (maybe by package name)","label":{"api":{}}},{"text":"Why does computeIfAbsent work","label":{"api":{"computeIfAbsent":[[9,23]]}}},{"text":"When you call computeIfAbsent, you pass the following parameters","label":{"api":{"computeIfAbsent":[[14,28]]}}},{"text":"You create a new ArrayList and immediately call add","label":{"api":{"ArrayList":[[17,25]],"add":[[48,50]]}}},{"text":"If you are interested in creating a new list of elements on the spot, you can use Arrays.asList","label":{"api":{"Arrays.asList":[[82,94]]}}},{"text":"Note that this creates a fixed sized ArrayList (you can't add elements to this list)","label":{"api":{"ArrayList":[[37,45]]}}},{"text":"You can add a blocking method call or use a CountDownLatch to wait for the cache to be populated","label":{"api":{"CountDownLatch":[[44,57]]}}},{"text":"Alternatively, if you're asynchronously populating the cache, you can use a CountDownLatch","label":{"api":{"CountDownLatch":[[76,89]]}}},{"text":"The only guarantee given in the Javadoc for System.nanoTime() is that the resolution of the clock is at least as good as System.currentTimeMillis() - so if you are writing cross-platform code, there is clearly no expectation that the results of nanoTime are unique, as you can call nanoTime() many times per millisecond","label":{"api":{"System.nanoTime()":[[44,60]],"System.currentTimeMillis()":[[121,146]],"nanoTime":[[245,252]],"nanoTime()":[[282,291]]}}},{"text":"I recommend always passing the optional ZoneId (or ZoneOffset) to the various date-time methods","label":{"api":{"ZoneId":[[40,45]],"ZoneOffset":[[51,60]]}}},{"text":"Define a functional interface","label":{"api":{"functional":[[9,18]]}}},{"text":"If you reduced the number of parameters to 2, we could go with BiFunction","label":{"api":{"BiFunction":[[63,72]]}}},{"text":"If there were one parameter, Function would come in handy","label":{"api":{"Function":[[29,36]]}}},{"text":"A possible solution is to use Stream to convert your String in a Set of char, then if the size of the set is the same as the length of your string, it is unique","label":{"api":{"Stream":[[30,35]],"String":[[53,58]],"Set":[[65,67]]}}},{"text":"Class Date has methods compareTo(), after() and before() that allow you to compare 2 Dates","label":{"api":{"Date":[[6,9]],"compareTo()":[[23,33]],"after()":[[36,42]],"before()":[[48,55]],"Dates":[[85,89]]}}},{"text":"Also Date has method getTime() that returns you the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this date","label":{"api":{"Date":[[5,8]],"getTime()":[[21,29]]}}},{"text":"But again, The best option is to switch to java.time package and classes Instant and ZonedDateTime (and others) have methods compareTo(), isAfter() and isBefore()","label":{"api":{"java.time":[[43,51]],"Instant":[[73,79]],"ZonedDateTime":[[85,97]],"compareTo()":[[125,135]],"isAfter()":[[138,146]],"isBefore()":[[152,161]]}}},{"text":"If you don't pass anything in for this parameter, it defaults to \" \\t\\n\\r\\f\", which is basically just whitespace","label":{"api":{}}},{"text":"The only method that allows me to get the details of the return type is ExecutableElement.getReturnType()","label":{"api":{"ExecutableElement.getReturnType()":[[72,104]]}}},{"text":"It gives me back a TypeMirror","label":{"api":{"TypeMirror":[[19,28]]}}},{"text":"I could not find anything that allows me to check if TypeMirror returned is a subtype of Collection","label":{"api":{"TypeMirror":[[53,62]],"Collection":[[89,98]]}}},{"text":"I am trying to generate the source code to call one of the methods in Collection","label":{"api":{"Collection":[[70,79]]}}},{"text":"You can use the Math.pow() method to get the square of a value","label":{"api":{"Math.pow()":[[16,25]]}}},{"text":"Check Math.pow() for more details","label":{"api":{"Math.pow()":[[6,15]]}}},{"text":"Javadoc for ConcurrentLinkedQueue explicitly states that the complexity of the size() method is O(n)","label":{"api":{"ConcurrentLinkedQueue":[[12,32]],"size()":[[79,84]]}}},{"text":"From Object::wait docs","label":{"api":{"Object::wait":[[5,16]]}}},{"text":"It might not be documented as thread-safe and it's not specified that it should be thread-safe, but any sane implementation is thread-safe","label":{"api":{}}},{"text":"Open your file as a RandomAccessFile","label":{"api":{"RandomAccessFile":[[20,35]]}}},{"text":"I would suggest you use Timeline instead of Thread","label":{"api":{"Timeline":[[24,31]],"Thread":[[44,49]]}}},{"text":"It can be done using a Thread, but Timeline is designed for cases like this","label":{"api":{"Thread":[[23,28]],"Timeline":[[35,42]]}}},{"text":"Alternatively, if you want to use Files.probeContentType(…) but do not want to rely upon the provided default implementation, you can create your own FileTypeDetector","label":{"api":{"Files.probeContentType(…)":[[34,58]],"FileTypeDetector":[[150,165]]}}},{"text":"You will also need to create a file that ServiceLoader can find because that is how it discovers implementations of FileTypeDetector","label":{"api":{"ServiceLoader":[[41,53]],"FileTypeDetector":[[116,131]]}}},{"text":"You can make use of String's indexOf() to find the index of \"TERM\" and substring() to extract the String containing the integer value","label":{"api":{"String":[[20,25],[98,103]],"indexOf()":[[29,37]],"substring()":[[71,81]],"integer":[[120,126]]}}},{"text":"For the AutoClosable implementation running Reference#reachabilityFence​ from the close method after the handler is unregister would be a sane decision","label":{"api":{"AutoClosable":[[8,19]],"Reference#reachabilityFence":[[44,70]]}}},{"text":"As an alternative you could simply use String::split method and then make a Stream out of returned array","label":{"api":{"String::split":[[39,51]],"Stream":[[76,81]]}}},{"text":"According to your scenario you can use collections like  class like ArrayList where dynamically you can insert or remove elements","label":{"api":{"ArrayList":[[68,76]]}}},{"text":"Every element of the ArrayList represents one of your rows (initially empty) where you can add or remove your elements","label":{"api":{"ArrayList":[[21,29]]}}},{"text":"It is possible using Java Stream and Stream::flatMap","label":{"api":{"Stream":[[26,31]],"Stream::flatMap":[[37,51]]}}},{"text":"To begin with, this code is bad, since priorityQueue.remove(v) requires O(n) time, which defeats the whole purpose of using PriorityQueue https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/PriorityQueue.html","label":{"api":{"priorityQueue.remove(v)":[[39,61]],"PriorityQueue":[[124,136]]}}},{"text":"Because Sedan is package-private, you need to call myConstructor.setAccessible​(true)","label":{"api":{"Sedan":[[8,12]],"myConstructor.setAccessible​(true)":[[51,84]]}}},{"text":"If you want to keep the array that you created using new char[10]; you will have to use System.arraycopy() for example","label":{"api":{"System.arraycopy()":[[88,105]]}}},{"text":"Judging from what you've shown, Stream#anyMatch might a good candidate","label":{"api":{"Stream#anyMatch":[[32,46]]}}},{"text":"If you're running in a semi-standard JAX-RS environment you can trigger this internally with a ContainerResponseFilter","label":{"api":{"ContainerResponseFilter":[[95,117]]}}},{"text":"But you also have the option of using the index-based version of getXyz","label":{"api":{"getXyz":[[65,70]]}}},{"text":"ProcessBuilder#directory(File) sets the working directory for the process","label":{"api":{"ProcessBuilder#directory(File)":[[0,29]]}}},{"text":"Since this code calls t1.wait without holding the lock on t1 object - the IllegalMonitorStateException will be thrown - as is documented in Object::wait(time) method","label":{"api":{"t1.wait":[[22,28]],"t1":[[58,59]],"IllegalMonitorStateException":[[74,101]],"Object::wait(time)":[[140,157]]}}},{"text":"You could use OffsetDateTime for mapping  both firstDate and secondDate properties","label":{"api":{"OffsetDateTime":[[14,27]],"firstDate":[[47,55]],"secondDate":[[61,70]]}}},{"text":"The deserialization will fail when the input doesn't match the DateTimeFormatter.ISO_OFFSET_DATE_TIME pattern","label":{"api":{"DateTimeFormatter.ISO_OFFSET_DATE_TIME":[[63,100]]}}},{"text":"The value of System.in, which is an instance of InputStream, is the \"standard input\"","label":{"api":{"System.in":[[13,21]],"InputStream":[[48,58]]}}},{"text":"When you use new Scanner(System.in) you are using the Scanner#<init>(InputStream) constructor, whose documentation says","label":{"api":{"Scanner(System.in)":[[17,34]],"Scanner#<init>(InputStream)":[[54,80]]}}},{"text":"As you can see, passing System.in simply configures the Scanner to read from the standard input","label":{"api":{"System.in":[[24,32]],"Scanner":[[56,62]]}}},{"text":"As you can see, we just pass a Supplier to retrieveValue and call it in a try-catch block where we catch the possible NullPointerException and return an Optional.empty() in that case","label":{"api":{"Supplier":[[31,38]],"retrieveValue":[[43,55]],"NullPointerException":[[118,137]],"Optional.empty()":[[153,168]]}}},{"text":"The correct way to implement a plugin architecture is with the ServiceLoader class","label":{"api":{"ServiceLoader":[[63,75]]}}},{"text":"However, you can use java.util.concurrent.TimeUnit api to easily convert from nanoseconds to milliseconds","label":{"api":{"java.util.concurrent.TimeUnit":[[21,49]]}}},{"text":"Build a string using StringBuilder and trim() it when done","label":{"api":{"StringBuilder":[[21,33]],"trim()":[[39,44]]}}},{"text":"Build a string using Java 8's StringJoiner","label":{"api":{"StringJoiner":[[30,41]]}}},{"text":"exec splits into tokens based on whitespace","label":{"api":{}}},{"text":"Javadoc on Executors.newSingleThreadExecutor","label":{"api":{"Executors.newSingleThreadExecutor":[[11,43]]}}},{"text":"By exposing a Principal instance (such as an instance of GenericPrincipal from Apache Tomcat) in your web API, you may ended up leaking some sensitive details you don't intent to","label":{"api":{"Principal":[[14,22]],"GenericPrincipal":[[57,72]]}}},{"text":"If you create an instance of GenericPrincipal and then attempt to serialize it to JSON using ObjectMapper directly, you'll see it won't succeed","label":{"api":{"GenericPrincipal":[[29,44]],"ObjectMapper":[[93,104]]}}},{"text":"If you check the GenericPrincipal source code, you'll see a userPrincipal field","label":{"api":{"GenericPrincipal":[[17,32]],"userPrincipal":[[60,72]]}}},{"text":"This can also be inferred from the Servlet documentation","label":{"api":{"Servlet":[[35,41]]}}},{"text":"You need to call this PriorityQueue constructor, supplying your own Comparator","label":{"api":{"PriorityQueue":[[22,34]],"Comparator":[[68,77]]}}},{"text":"I think you're looking for NumberFormat","label":{"api":{"NumberFormat":[[27,38]]}}},{"text":"Either use an array and set the 0th index or if you need to go ahead with a List for some reason, then consider using List.set instead, as stated in the comments above","label":{"api":{"List.set":[[118,125]]}}},{"text":"You should call ListIterator::next in your loop","label":{"api":{"ListIterator::next":[[16,33]]}}},{"text":"From ListIterator::next docs","label":{"api":{"ListIterator::next":[[5,22]]}}},{"text":"Also, im using a BlockingLinkedQueue, maybe you should use a PriorityQueue, it will automatically order your items in the Queue","label":{"api":{"BlockingLinkedQueue":[[17,35]],"PriorityQueue":[[61,73]],"Queue":[[122,126]]}}},{"text":"There are lots of useful methods in the Comparator interface to help you compare things","label":{"api":{"Comparator":[[40,49]]}}},{"text":"You only need to create a Comparator","label":{"api":{"Comparator":[[26,35]]}}},{"text":"Further, CompletableFuture marks its completion tasks with AsynchronousCompletionTask to help monitoring and debugging and its useful to follow the convention","label":{"api":{"CompletableFuture":[[9,25]],"AsynchronousCompletionTask":[[59,84]]}}},{"text":"In Java you use a ServerSocket for TCP sockets","label":{"api":{"ServerSocket":[[18,29]]}}},{"text":"You cannot use a ServerSocket for the WebSocket protocol, at least not so straight forward as you might think","label":{"api":{"ServerSocket":[[17,28]]}}},{"text":"In the Java world you can use web servers like Tomcat or Jetty which provide WebSocket implementations and a high level Java API","label":{"api":{"WebSocket":[[77,85]]}}},{"text":"decimal parts is controlled by the Locale in use","label":{"api":{"Locale":[[35,40]]}}},{"text":"An example is Locale.US","label":{"api":{"Locale.US":[[14,22]]}}},{"text":"You simply need to use thenCombine()","label":{"api":{"thenCombine()":[[23,35]]}}},{"text":"Consider the documentation of TransferHandler.exportDone","label":{"api":{"TransferHandler.exportDone":[[30,55]]}}},{"text":"If you're okay with ISO 4217 Currency Codes, java has a Currency class (https://docs.oracle.com/javase/7/docs/api/java/util/Currency.html) where you can get all currency codes as a set","label":{"api":{"Currency":[[56,63]]}}},{"text":"The Object.wait() function keeps waiting, even though the other thread already called Object.notifyAll()","label":{"api":{"Object.wait()":[[4,16]],"Object.notifyAll()":[[86,103]]}}},{"text":"Javadoc of notifyAll() says","label":{"api":{"notifyAll()":[[11,21]]}}},{"text":"Wakes up all threads that are waiting on this object's monitor","label":{"api":{}}},{"text":"A thread waits on an object's monitor by calling one of the wait methods","label":{"api":{"wait":[[60,63]]}}},{"text":"Only threads current waiting are woken up","label":{"api":{}}},{"text":"No flag is set or anything, so threads that start waiting after the call to notifyAll will not see the call, and will have to wait until the next call to notifyAll","label":{"api":{"notifyAll":[[76,84],[154,162]],"wait":[[126,129]]}}},{"text":"Use BigDecimal instead","label":{"api":{"BigDecimal":[[4,13]]}}},{"text":"As it states in the documentation","label":{"api":{}}},{"text":"I suggest using String.format(format, ...args) to do the heavy lifting unless explicitly disallowed","label":{"api":{"String.format(format, ...args)":[[16,45]]}}},{"text":"If you need arguments or a return value, you can use a different functional interface","label":{"api":{}}},{"text":"That said, this approach can be simplified by using a Map to count the number of times each word appears","label":{"api":{"Map":[[54,56]]}}},{"text":"The Java class Double contains a static method that will do what you're looking for","label":{"api":{"Double":[[15,20]]}}},{"text":"The exception doesn't occur if an (additional) init is executed immediately before the doPhase","label":{"api":{"init":[[47,50]],"doPhase":[[87,93]]}}},{"text":"However, this init-call shouldn't be necessary, since after the doPhase-call generateSecret is executed, which should reset the KeyAgreement-instance to the state after the init-call, at least according to the generateSecret-documentation","label":{"api":{"init":[[14,17],[173,176]],"doPhase":[[64,70]],"generateSecret":[[77,90],[210,223]],"KeyAgreement":[[128,139]]}}},{"text":"This method resets this KeyAgreement object to the state that it was in after the most recent call to one of the init methods..","label":{"api":{"KeyAgreement":[[24,35]],"init":[[113,116]]}}},{"text":"repeated doPhase-calls are possible (without additional init-calls)","label":{"api":{"doPhase":[[9,15]],"init":[[56,59]]}}},{"text":"The second parameter (lastPhase) in doPhase should be set to true, otherwise an IllegalStateException (Only two party agreement supported, lastPhase must be true) is generated (at least for ECDH)","label":{"api":{"lastPhase":[[22,30],[139,147]],"doPhase":[[36,42]],"IllegalStateException":[[80,100]]}}},{"text":"KeyAgreement#generateSecret is not reset for ECDH based algorithmm","label":{"api":{"KeyAgreement#generateSecret":[[0,26]]}}},{"text":"You can use AtomicLong#incrementAndGet as a counter","label":{"api":{"AtomicLong#incrementAndGet":[[12,37]]}}},{"text":"Take a look at java.util.Objects","label":{"api":{"java.util.Objects":[[15,31]]}}},{"text":"Be careful not to use String methods that work on regexs, especially since the name of the methods aren't very informative (replace replaces all occurences of a fixed string, replaceAll replaces all occurences that match a regex pattern)","label":{"api":{"String":[[22,27]],"replace":[[124,130]],"replaceAll":[[175,184]]}}},{"text":"InetAddress.getByAddress(...) throws a UnknownHostException  which is a checked exception because it is a subclass of Exception","label":{"api":{"netAddress.getByAddress(...)":[[1,28]],"UnknownHostException":[[39,58]],"Exception":[[118,126]]}}},{"text":"As the behaviour you've mentioned above is compliant with the JavaDoc documentation of ExecutorService, no subclass (at least the ones coming with the Java Standard Edition) will behave differently","label":{"api":{"ExecutorService":[[87,101]]}}},{"text":"I think you can solve the problem with CompletableFuture","label":{"api":{"CompletableFuture":[[39,55]]}}},{"text":"The main idea here is to use CompletableFuture.anyOf and apply it to CompletableFuture of your useful task and CopmpletableFuture of timeout task","label":{"api":{"CompletableFuture.anyOf":[[29,51]],"CompletableFuture":[[69,85]],"CopmpletableFuture":[[111,128]]}}},{"text":"Timeout is achieved by using ScheduledExecutorService and CompletableFuture.completeExceptionally","label":{"api":{"Timeout":[[0,6]],"ScheduledExecutorService":[[29,52]],"CompletableFuture.completeExceptionally":[[58,96]]}}},{"text":"You could use BigDecimal","label":{"api":{"BigDecimal":[[14,23]]}}},{"text":"All of them are in the Files class","label":{"api":{"Files":[[23,27]]}}},{"text":"If you browse the \"Developer’s Guide for Java Clients\" linked from the Open MQ 4.5 Documentation page and inspect chapter 2 titled \"Using the Java API\" you'll see this in the \"Obtaining a Connection Factory\" section","label":{"api":{}}},{"text":"Further down in the document you'll find an example of how to look up a connection factory object in the JNDI object store","label":{"api":{}}},{"text":"To generate text in other formats, see the DateTimeFormatter class","label":{"api":{"DateTimeFormatter":[[43,59]]}}},{"text":"However, you can eliminate that error, and the possibility of most other errors, by using Files.copy instead of writing your own save code","label":{"api":{"Files.copy":[[90,99]]}}},{"text":"EntityManager#remove takes an entity instance as parameter","label":{"api":{"EntityManager#remove":[[0,19]]}}},{"text":"Use the Objects.toString method, which takes a ‘use if first argument is null’ argument","label":{"api":{"Objects.toString":[[8,23]]}}},{"text":"if you're on JDK9+ I'd suggest looking into Objects.requireNonNullElse i.e.","label":{"api":{"Objects.requireNonNullElse":[[44,69]]}}},{"text":"So the Pattern class for a full description of the syntax","label":{"api":{"Pattern":[[7,13]]}}},{"text":"Looking at Math class, the ulp method","label":{"api":{"Math":[[11,14]],"ulp":[[27,29]]}}},{"text":"You're forgetting the call to Matcher.find","label":{"api":{"Matcher.find":[[30,41]]}}},{"text":"Oracle's Java Docs have a very helpful definition of SimpleFileVisitor on https://docs.oracle.com/javase/7/docs/api/java/nio/file/SimpleFileVisitor.html","label":{"api":{"SimpleFileVisitor":[[53,69]]}}},{"text":"A FileVisitor is an object whose callback methods are invoked as a method such as Files.walkFileTree traverses an entire hierarchy of files under a common root directory","label":{"api":{"FileVisitor":[[2,12]],"Files.walkFileTree":[[82,99]]}}},{"text":"As each file or directory in the tree is encountered, we say it is “visited.”  At that point, the FileVisitor argument that was passed to the walk method has one or more of its methods invoked, depending on the nature of each file","label":{"api":{"FileVisitor":[[98,108]]}}},{"text":"The documentation of SimpleFileVisitor does in fact distinguish it from the FileVisitor interface","label":{"api":{"SimpleFileVisitor":[[21,37]],"FileVisitor":[[76,86]]}}},{"text":"A SimpleFileVisitor implements each method of FileVisitor","label":{"api":{"SimpleFileVisitor":[[2,18]],"FileVisitor":[[46,56]]}}},{"text":"The “simple” part means that a SimpleFileVisitor has no functionality of its own","label":{"api":{"SimpleFileVisitor":[[31,47]]}}},{"text":"Instead of hand-crafted polling with an infinite loop and manual 2 minute sleep, look into scheduling, for example with Quartz or at least a ScheduledExecutorService, here's a Tomcat based example","label":{"api":{"ScheduledExecutorService":[[141,164]]}}},{"text":"As each line seems to consist of comma separated values, you can just use split to get the individual values as array","label":{"api":{"split":[[74,78]]}}},{"text":"Using streams (or alternatively a for-each loop) you can clean those values, e.g","label":{"api":{"streams":[[6,12]]}}},{"text":"using strip to remove whitespaces and replaceAll to remove the brackets","label":{"api":{"strip":[[6,10]],"replaceAll":[[38,47]]}}}]